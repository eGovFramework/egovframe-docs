<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>데이터처리 on 표준프레임워크 개발가이드</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/</link><description>Recent content in 데이터처리 on 표준프레임워크 개발가이드</description><generator>Hugo -- gohugo.io</generator><language>ko</language><atom:link href="https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/index.xml" rel="self" type="application/rss+xml"/><item><title>DataSource 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/data-source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/data-source/</guid><description>DataSource 서비스 개요 데이터베이스에 대한 연결을 제공하는 서비스이다. 다양한 방식의 데이터베이스 연결을 제공하고,이에 대한 추상화계층을 제공함으로써, 업무 로직과 데이터베이스 연결 방식 간의 종속성을 배제한다.
설명 Connection Provider 별 DataSource implementions Connection Provider별 Connection 객체를 얻기 위한 로직을 구현한 DataSource 구현체를 사용한다.
JDBCDataSource JDBC driver를 이용하여 Database Connection을 생성한다.
Configuration &amp;lt;bean id=&amp;#34;dataSource&amp;#34; class=&amp;#34;org.springframework.jdbc.datasource.DriverManagerDataSource&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;${driver}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;${dburl}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;${username}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;${password}&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; PROPERTIES 설 명 driverClassName JDBC driver class name설정 url Database에 접근하기 위한 JDBC URL username Database 접근하기 위한 사용자명 password Database 접근하기 위한 암호 Sample Source @Resource(name = &amp;#34;dataSource&amp;#34;) DataSource dataSource; @Resource(name = &amp;#34;jdbcProperties&amp;#34;) Properties jdbcProperties; boolean isHsql = true; @Test public void testJdbcDataSource() throws Exception { assertNotNull(dataSource); assertEquals(&amp;#34;org.</description></item><item><title>Data Access 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-ibatis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-ibatis/</guid><description>Data Access 서비스 개요 Data Access 서비스는 다양한 데이터베이스 솔루션 및 데이터베이스 접근 기술에 일관된 방식으로 대응하기 위한 서비스로서,데이터를 조회하거나 입력, 수정, 삭제하는 기능을 수행하는 메커니즘을 단순화한다. 또한 데이터베이스 솔루션이나 접근 기술이 변경될 경우에도 데이터를 다루는 시스템 영역의 변경을 최소화할 수 있도록 데이터베이스와의 접점을 추상화하며, 추상화된 데이터 접근 방식을 템플릿(Template)으로 제공함으로써, 개발자들의 업무 효율을 향상시킨다.
iBATIS 프레임워크 전자정부 프레임워크에서는 JDBC 를 사용한 Data Access 를 추상화하여 간편하고 쉽게 사용할 수 있는 Data Mapper framework 인 iBATIS 를 Data Access 기능의 기반 오픈 소스로 채택하였다.</description></item><item><title>iBATIS Configuration</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-ibatis_configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-ibatis_configuration/</guid><description>iBATIS Configuration iBATIS 의 메인 설정 파일인 SQL Map XML Configuration 파일(이하 sql-map-config.xml 설정 파일) 작성과 상세한 옵션 설정에 대해 알아본다.
sql-map-config.xml SqlMapClient 설정관련 상세 내역을 제어할 수 있는 메인 설정 파일로 주로 transaction 관리 관련 설정 및 다양한 옵션 설정, Sql Mapping 파일들에 대한 path 설정 등을 포함한다.
Sample Configuration &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE sqlMapConfig PUBLIC &amp;#34;-//ibatis.apache.org//DTD SQL Map Config 2.0//EN&amp;#34; &amp;#34;http://ibatis.apache.org/dtd/sql-map-config-2.dtd&amp;#34;&amp;gt; &amp;lt;sqlMapConfig&amp;gt; &amp;lt;properties resource=&amp;#34;META-INF/spring/jdbc.properties&amp;#34; /&amp;gt; &amp;lt;settings cacheModelsEnabled=&amp;#34;true&amp;#34; enhancementEnabled=&amp;#34;true&amp;#34; lazyLoadingEnabled=&amp;#34;true&amp;#34; maxRequests=&amp;#34;128&amp;#34; maxSessions=&amp;#34;10&amp;#34; maxTransactions=&amp;#34;5&amp;#34; useStatementNamespaces=&amp;#34;false&amp;#34; defaultStatementTimeout=&amp;#34;1&amp;#34; /&amp;gt; &amp;lt;typeHandler javaType=&amp;#34;java.</description></item><item><title>Spring-iBATIS Integration</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-spring_ibatis_integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-spring_ibatis_integration/</guid><description>Spring-iBATIS Integration Spring 프레임워크는 iBATIS SQL Map 을 이미 잘 통합하고 있으며, JDBC/Hibernate 에 대한 연동과 동일하게 template 스타일 프로그래밍이 가능토록 지원한다. 이러한 지원으로 Spring 의 특징인 IoC 의 장점과 Exception 계층 구조의 처리가 iBATIS 통합 환경에서도 쉽게 사용되고 있으며, iBATIS 단독 사용 시에 트랜잭션 관리 및 DataSource 에 대한 설정 및 관리가 별도로 필요했던 것에 비해 Spring-iBATIS 통합 환경에서는 Spring 의 유연한 트랜잭션 처리와 dataSource 를 그대로 사용할 수 있다.</description></item><item><title>iBATIS에서의 Data Type 매핑</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-data_type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-data_type/</guid><description>Data Type 어플리케이션을 작성할 때 Data Type 에 대한 올바른 사용과 관련 처리는 매우 중요하다. 특히 데이터베이스를 이용하여 데이터를 저장하고 조회할 때 Java 어플리케이션에서의 Type 과 DBMS 에서 지원하는 관련 매핑 jdbc Type 의 정확한 사용이 필요하며, 여기에서는 iBATIS 환경에서 javaType 과 특정 DBMS 의 jdbcType 의 적절한 매핑 사용예를 중심으로 일반적인 Data Type 의 사용 가이드를 참고할 수 있도록 한다.
기본 Data Type 사용 방법 iBATIS SQL Mapper 프레임워크는 Java 어플리케이션 영역의 표준 JavaBeans 객체(또는 Map 등)의 각 Attribute 에 대한 Java Type 과 JDBC 드라이버에서 지원하는 각 DBMS의 테이블 칼럼에 대한 Data Type 의 매핑을 기반으로 parameter / result 객체에 대한 바인딩/매핑 을 처리한다.</description></item><item><title>iBATIS parameterMap</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-parametermap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-parametermap/</guid><description>parameterMap parameterMap 은 해당 요소로 SQL 문 외부에 정의한 입력 객체의 속성에 대한 name 및 javaType, jdbcType 을 비롯한 옵션을 설정할 수 있는 매핑 요소이다. 이를 통해 JavaBeans 객체(또는 Map 등)에 대한 prepared statement 에 대한 바인드 변수 매핑을 처리할 수 있다. 유사한 기능을 처리하는 parameterClass 나 Inline Parameter 에 비해 많이 사용되지 않지만 더 기술적인(descriptive) parameterMap(예를 들어 stored procedure 를 위한) 이 필요하거나, XML 의 일관된 사용과 순수성을 지키고자 할때 좋은 접근법이 될 수도 있다.</description></item><item><title>Inline Parameters</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-inline_parameters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-inline_parameters/</guid><description>Inline Parameters 이전에 살펴본 prepared statement 에 대한 바인드 변수 매핑 처리를 위한 parameterMap 요소(SQL 문 외부에 정의한 입력 객체 property name 및 javaType, jdbcType 을 비롯한 옵션을 설정 매핑 요소) 와 동일한 기능을 처리하는 간편한 방법을 Inline Parameters 방법으로 제공한다. 보통 parameterClass 로 명시된 입력 객체에 대해 바인드 변수 영역을 간단한 #property# 노테이션으로 나타내는 Inline Parameter 방법은 기존 parameterMap 에서의 ? 와 이의 순서를 맞춘 외부 parameterMap 선언으로 처리하는 방법에 비해 많이 사용되고 일반적으로 추천하는 방법이다.</description></item><item><title>resultMap</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-resultmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-resultmap/</guid><description>resultMap resultMap 은 SQL 문 외부에 정의한 매핑 요소로, result set 으로부터 어떻게 데이터를 뽑아낼지, 어떤 칼럼을 어떤 property로 매핑할지에 대한 상세한 제어를 가능케 해준다. resultMap 은 일반적으로 가장 많이 사용되는 중요한 매핑 요소로 resultClass 속성을 이용한 자동 매핑 접근법에 비교하여 칼럼 타입의 지시, null value 대체값, typeHandler 처리, complex property 매핑(다른 JavaBean, Collections 등을 포함하는 복합 객체) 등을 허용한다.
기본 resultMap 사용 방법 아래의 샘플 resultMap 정의를 참고하라.
Sample resultMap .</description></item><item><title>iBATIS Dynamic SQL 사용</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-dynamic_sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-dynamic_sql/</guid><description>Dynamic SQL 일반적으로 JDBC API 를 사용한 코딩에서 한번 정의한 쿼리문을 최대한 재사용하고자 하나 단순 파라메터 변수의 값만 변경하는 것으로 해결하기 어렵고 다양한 조건에 따라 조금씩 다른 쿼리의 실행이 필요한 경우 많은 if~else 조건 분기의 연결이 필요한 문제가 있다. 여기에서는 SQL 문의 동적인 변경에 대한 상대적으로 유연한 방법을 제공하는 iBATIS 의 Dynamic 요소에 대해 알아본다.
기본 Dynamic 요소 사용 방법 아래의 샘플 Dynamic 요소 사용예를 참고하라.
Sample Dynamic SQL mapping xml .</description></item><item><title>MyBatis</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mybatis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mybatis/</guid><description>MyBatis
주요 변경 사항 Getting Started Configuration XML Mapper XML Files Dynamic SQL 표준프레임워크 기반 적용 가이드</description></item><item><title>MyBatis 주요 변경점</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-ibatis_vs_mybatis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-ibatis_vs_mybatis/</guid><description>MyBatis 주요 변경점 본 가이드는 MyBatis와 iBatis의 차이점을 설명한다.
변경된 용어(종합) iBatis MyBatis 비고 com.ibatis.* org.apache.ibatis.* 패키지 구조 변경 SqlMapConfig Configration 용어변경 sqlMap mapper 용어변경 sqlMapClient sqlSession 구문대체 rowHandler resultHandler 구문대체 resultHandler SqlSessionFactory 구문대체 parameterMap, parameterClass parameterType 속성 통합 resultClass resultType 용어변경 #var# #{var} 구문대체 $var$ ${var} 구문대체 , 구문대체 변경사항 패키지 구조 변경 iBatis MyBatis com.ibatis.* org.apache.ibatis.* 패키지 구조는 변경되었으나 기존에 iBatis 패키지명은 그대로 사용한다.
MyBatis library 별도 제공 Maven Dependency Information 예시</description></item><item><title>MyBatis 시작하기</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-getting_started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-getting_started/</guid><description>시작하기 모든 MyBatis 애플리케이션은 SqlSessionFactory 인스턴스를 사용한다. SqlSessionFactory 인스턴스는 SqlSessionFactoryBuilder 를 사용하여 만들 수 있다. SqlSessionFactoryBuilder 는 XML 설정파일에서 SqlSessionFactory 인스턴스를 빌드할 수 있다;
XML에서 SqlSessionFactory 빌드하기 XML 파일에서 SqlSessionFactory 인스턴스를 빌드하는 것은 매우 간단하다. 설정을 위해 클래스패스 자원을 사용하는 것을 추천하나, 파일 경로나 file URL 로부터 만들어진 InputStream 인스턴스를 사용할 수도 있다. MyBatis 는 클래스패스와 다른 위치에서 자원을 로드하는 것으로 좀더 쉽게 해주는 Resources 라는 유틸성 클래스를 가지고 있다.</description></item><item><title>MyBatis Configuration XML File</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-configuration_xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-configuration_xml/</guid><description>MyBatis Configuration XML File MyBatis XML 설정파일은 다양한 셋팅과 프로퍼티를 가진다 해당 파일의 작성과 상세한 옵션 설정에 대해 알아본다.
Configuration XML MyBatis XML 설정파일의 일반적인 구조 및 구성은 properties, settings, typeAliases, typeHandlers, objectFactory, plugins, environments, databaseIdProvider, mappers 등의 내용으로 구성이 되어 있으며 주요 내용은 아래와 같다.
Sample Configuration &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE configuration PUBLIC &amp;#34;-//mybatis.org//DTD Config 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;#34;&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;properties resource=&amp;#34;org/mybatis/example/config.properties&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;dev_user&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;F2Fa3!33TYyg&amp;#34;/&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;settings&amp;gt; &amp;lt;setting name=&amp;#34;cacheEnabled&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;setting name=&amp;#34;lazyLoadingEnabled&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;setting name=&amp;#34;multipleResultSetsEnabled&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;/settings&amp;gt; &amp;lt;typeHandlers&amp;gt; &amp;lt;typeHandler handler=&amp;#34;egovframework.</description></item><item><title>Mapper XML Files</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mapper_xml_files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mapper_xml_files/</guid><description>Mapper XML File MyBatis Mapper XML (SQL Mapping XML) File은 실행할 SQL문을 정의해놓은 파일로서,
SQL문 실행을 위해 Parameter Object를 받아오거나 SQL문 실행 결과를 Result Object에 자동 바인딩하는 기능 등을 제공한다.
Mapper XML (SQL Mapping XML) Mapper XML File에는 다음과 같은 요소들을 사용할 수 있다.
&amp;lt;select&amp;gt;: 매핑된 SELECT 구문 &amp;lt;insert&amp;gt;: 매핑된 INSERT 구문 &amp;lt;update&amp;gt;: 매핑된 UPDATE 구문 &amp;lt;delete&amp;gt;: 매핑된 DELETE 구문 &amp;lt;sql&amp;gt;: 다른 구문에서 재사용하기 위한 SQL 조각 &amp;lt;resultMap&amp;gt;: 데이터베이스 결과 데이터를 객체에 매핑하는 방법을 정의 &amp;lt;cache&amp;gt;: 자신의 namespace를 위한 캐시설정 &amp;lt;cache-ref&amp;gt;: 다른 namespace의 캐시설정을 참조 Sample Configuration &amp;lt;?</description></item><item><title>Mapper Dynamic SQL</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mybatis-dynamic-sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mybatis-dynamic-sql/</guid><description>Dynamic SQL 일반적으로 JDBC API를 사용한 코딩에서 다양한 조건에 따라 다양한 형태의 쿼리의 실행이 필요한 경우가 존재하며 이에 MyBatis는 강력한 동적 SQL 언어를 제공한다.
MyBatis는 SQL 문의 동적인 변경에 대해 iBatis보다 상대적으로 유연하다.
iBatis도 다양한 Dynamic 요소를 제공하였으나 이해해야 하는 요소들이 많았다.
MyBatis에서 제공하는 동적 SQL 요소들은 JSTL이나 XML 기반의 텍스트 프로세서와 유사한 형태로 제공되며 OGNL 기반의 표현식을 제공함으로써 보다 유연하고 편리하게 Dynamic 요소를 사용할 수 있다.
기본 Dynamic 요소 사용 방법 Sample Dynamic SQL mapper xml MyBatis에서 제공하는 Dynamic 요소의 기본적인 형태에 대해 알아보도록 한다.</description></item><item><title>MyBatis 적용 가이드</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mybatis-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mybatis-guide/</guid><description>MyBatis 적용 가이드 개요 전자정부 표준프레임워크 기반 MyBatis 적용 가이드이다.
📁 ex-dataaccess-mybatis.zip
Step 1. pom.xml 변경 표준프레임워크 dataaccess artifact version을 다음과 같이 2.7.0으로 변경한다.
&amp;lt;!-- 실행환경 라이브러리 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;egovframework.rte&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;egovframework.rte.psl.dataaccess&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.7.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Step 2. 환경 설정 Step 2.1 XML 설정 Spring XML 설정 파일 상(ex: context-mapper.xml)에 다음과 같은 sqlSession bean을 추가한다.
Ex) context-mapper.xml
&amp;lt;!-- SqlSession setup for MyBatis Database Layer --&amp;gt; &amp;lt;bean id=&amp;#34;sqlSession&amp;#34; class=&amp;#34;org.mybatis.spring.SqlSessionFactoryBean&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;dataSource&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;mapperLocations&amp;#34; value=&amp;#34;classpath:/sqlmap/mappers/**/*.</description></item><item><title>Spring Data</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/jpa-spring-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/jpa-spring-data/</guid><description>Spring Data Spring Data는 데이터베이스 관련 많은 하위 프로젝트를 포함하는 오픈 소스 프로젝트로, non-relational databases, map-reduce frameworks, and cloud based data services 등의 새로운 데이터 액세스 기술을 보다 쉽게 사용 할 수 있는 기능을 제공한다. 또한 관계형 데이터베이스 기술에 대한 향상된 지원도 제공한다.
Spring Data Project Category Sub-Project Description Relational Databases JPA Spring Data JPA - Simplifies the development of creating a JPA-based data access layer JDBC Extensions Support for Oracle RAC, Advanced Queuing, and Advanced datatypes.</description></item><item><title>Spring Data Repository</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/jpa-repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/jpa-repository/</guid><description>Repository 설명 일반적으로 Data Access Layer를 구현하기 위해서는 상당량의 코드를 작성해야 한다. Spring Data에서는 Repository를 추상화하여 다양한 저장소에 접근하기 위한 Data Access Layer 구현 코드를 최소화함으로써 개발생산성을 높일 수 있도록 한다. 이는 Query Method를 통해 가능한데 Query Method란 메소드명만 가지고 쿼리를 만들 수 있다는 것이다. 특정 규칙에 맞게 메소드를 작성하면 개발자가 따로 Data Access 클래스를 만들지 않아도 Spring Data가 대신하여 해당 Database와 자동으로 매핑하여 결과를 가져다준다.
Repository 인터페이스를 상속받아 CRUD 관련 메소드들을 제공하는 CrudRepository 인터페이스와 Paging 처리 기능이 제공되는 PagingAndSortingRepository 인터페이스를 살펴보도록 하겠다.</description></item><item><title>Query Method</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/jpa-querymethod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/jpa-querymethod/</guid><description>Query Method 설명 User Guide Query Method JPA 모듈은 문자열로 쿼리를 정의하거나 메서드에서 파생되어진 쿼리를 사용하는 방법을 지원한다.
쿼리생성 스트링으로 쿼리를 정의하는 예시 :
public interface UserRepository extends Repository&amp;lt;User, Long&amp;gt; { List&amp;lt;User&amp;gt; findByEmailAddressAndLastname(String emailAddress, String lastname); JPA표준 API는 위의 스트링으로 정의된 쿼리를 다음 쿼리로 변경한다.
select u from User u where u.emailAddress = ?1 and u.lastname = ?2 지원하는 메서드 명 Keyword Sample JPQL snippet And findByLastnameAndFirstname … where x.lastname = ?</description></item><item><title/><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/mongodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/mongodb/</guid><description/></item><item><title>MongoDB support</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/mongodb-support3_5_1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/mongodb-support3_5_1/</guid><description>MongoDB support 3.5.1 설명 Spring Data MongoDB는 Spring Data의 하위 프로젝트로서 document-oriented storage를 지원하는 MongoDB에 대한 Data Access 기능을 제공한다.
MongoDB support 주요 기능 Spring configuration 지원 (@Configuration, XML namespace) 기본 처리를 효율적으로 지원하는 MongoTemplate helper 제공 Spring이 제공하는 Data Access Exception hierarchy 변환 기능 제공 Spring의 Conversion Service와 통합된 Feature Rich Object Mapping 기능 Annotation 기반 매핑 metadata Java 기반 Query, Criteria, Update DSLs Spring Data의 Repository 인페이스 지원 QueryDSL 등 1.</description></item><item><title>MongoDB Repositories</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/mongodb-repositories3_5_1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/mongodb-repositories3_5_1/</guid><description>MongoDB Repositories 3.5.1 설명 Spring Data MongoDB도 Spring Data repository 추상화 인터페이스를 지원한다. 이에 대한 내용은 Spring Data JPA 가이드 중 Repository 부분을 참조한다.
1. 시작하기 MongoDB에 대한 repository를 사용하기 위해서는 다음과 같은 mongo schem의 repositories 설정이 필요하다.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:mongo=&amp;#34;http://www.springframework.org/schema/data/mongo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd&amp;#34;&amp;gt; &amp;lt;mongo:mongo-client host=&amp;#34;localhost&amp;#34; port=&amp;#34;27017&amp;#34; credentials=&amp;#34;id:password@database&amp;#34; &amp;gt; &amp;lt;/mongo:mongo-client&amp;gt; &amp;lt;mongo:db-factory dbname=&amp;#34;database&amp;#34; mongo-ref=&amp;#34;mongo&amp;#34; /&amp;gt; &amp;lt;bean id=&amp;#34;mongoTemplate&amp;#34; class=&amp;#34;org.springframework.data.mongodb.core.MongoTemplate&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;mongoDbFactory&amp;#34; ref=&amp;#34;mongoDbFactory&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;!-- for Repository --&amp;gt; &amp;lt;mongo:repositories base-package=&amp;#34;egovframework.</description></item><item><title>ORM 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm/</guid><description>ORM 서비스 개요 객체 모델링(Object Oriented Modeling)과 관계형 데이터 모델링(Relational Data Modeling) 사이의 불일치를 해결해 주는 OR Mapping 서비스로 자바 표준인 JPA를 표준 서비스로 제시하고 구현체로는 JPA 구현체중에 가장 성능이 우수한 것으로 알려진 Hibernate를 이용하였다. 서비스의 특징을 살펴보면 다음과 같다.
특정 DBMS에 영향을 받지 않으므로 DBMS가 변경되더라도 데이터 액세스 처리 코드에 대한 변경없이 설정 정보의 변경만으로도 동작 가능하다. SQL을 작성하고 SQL 실행 결과로부터 전달하고자 하는 객체로 변경하는 코드를 작성하는 시간이 줄어든다.</description></item><item><title>Entities</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-entities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-entities/</guid><description>Entities ORM 서비스를 구성하는 가장 기초적인 클래스로 어플리케이션에서 다루고자 하는 테이블에 대응하여 구성할 수 있으며 테이블이 포함하는 컬럼에 대응한 속성들을 가지고 있다.
기본 필요 요건 Entity를 구성하기 위한 아래와 같은 요건이 있다.(JPA요건)
[필수] Entity annotation 선언 필요 ( 혹은 XML 설정파일에 정의 ) @Entity public class User { } [필수] Argument 없는 생성자 필요 public User(){ } [필수] 최상위레벨 클래스로 생성되어야 하고 enum,interface로 정의될 수 없음 [필수] final 클래스로 선언될 수 없음 [필수] Primary Key 있어야 함 : @Id라는 Annotation 표기 @Id private String userId; [권장] Serializable 인터페이스 구현 public class User implements Serializable { private static final long serialVersionUID = -8077677670915867738L; } [권장] 속성 정보 접근을 위한 getter, setter 정의 private String userName; public String getUserName() { return userName; } public void setUserName(String userName) { this.</description></item><item><title>Entity Operation</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-entity_operation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-entity_operation/</guid><description>Entity Operation ORM서비스를 이용하여 특정 DB에 데이터를 입력, 수정, 조회, 삭제, 배치입력하는 방법에 대해 알아보도록 한다.
입력 EntityManager의 persist()메소드를 호출하여 DB에 단건의 데이터를 추가할 수 있다. persist() 메소드 호출시 대상이 되는 Entity를 입력 인자로 전달해야 한다.
Sample Source private Department addDepartment() throws Exception { // 1. insert a new Department information Department department = new Department(); String DepartmentId = &amp;#34;DEPT-0001&amp;#34;; department.setDeptId(DepartmentId); department.setDeptName(&amp;#34;SaleDept&amp;#34;); department.setDesc(&amp;#34;판매부서&amp;#34;); em.persist(department); ... return department; } 위의 예를 보면 EntityManager의 persist() 메소드에 department라는 Entity를 입력인자로 전달하여 처리하였다.</description></item><item><title>Association Mapping</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-association_mapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-association_mapping/</guid><description>Association Mapping 두 클래스 사이의 Association 유형별 매핑 방법에 대해서 살펴보고자 한다. 그리고 다양한 Collection의 매핑 방법 및 Collection의 주요속성인 inverse,cascade에 대해서 샘플코드를 중심으로 살펴본다.
One To One Mapping 테이블간 1:1 매핑이 있을 경우에 각각의 Entity 클래스를 정의하고 클래스간 관계를 OneToOne 매핑으로 처리한다.
Sample Source @Entity public class Employee { @OneToOne private TravelProfile profile; } @Entity public class TravelProfile { @OneToOne private Employee employee; } 위의 예를 보면 Employee 와 TravelProfile가 각각 OneToOne이라는 Annotation을 기재하여 매핑처리한 것을 알수 있다.</description></item><item><title>JPA Query Language</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-query_language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-query_language/</guid><description>Query Language JPA에는 별도의 Query Language를 제공함으로써 객체 지향 관점에서 특정 객체에 대한 조회와 DB 유형에 독립적인 Query 정의를 가능하도록 한다. 구성요소 및 작성 방법은 아래와 같다.
구성요소 QL Statement 유형으로는 SELECT 문과 Update and Delete 문 두가지가 있다.
SELECT문 : SELECT 절 + FROM 절 + WHERE 절(Option) + ORDER BY 절(Option) + GROUP BY 절(Option) UPDATE&amp;amp;DELETE문 : UPDATE/DELETE 절 + WHERE 절 각각의 절에 대해서 아래에서 알아보고자 한다. SELECT 절 조회 결과값을 구체적으로 명시하고자 할 경우 정의한다.</description></item><item><title>Native SQL</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-native_sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-native_sql/</guid><description>Native SQL 기본적으로 CRUD 작업을 할 때 JPA 기본 API를 사용하거나 QL을 이용하여 수행한다. 그러나 특정 DBMS에서 제공하는 기능을 사용할 수 있도록 하기 위해 Native SQL 사용을 지원한다.
기본적인 사용 방법 entityManager.createNativeQuery() 메소드를 이용하여 Native SQL을 실행할 수 있다.
기본 리스트 조회 SQL을 통해 하나의 테이블을 대상으로 조회 작업을 수행할 수 있다.
Sample Source StringBuffer qlBuf = new StringBuffer(); qlBuf.append(&amp;#34;SELECT * &amp;#34;); qlBuf.append(&amp;#34;FROM DEPARTMENT &amp;#34;); qlBuf.append(&amp;#34;WHERE DEPT_NAME like :condition &amp;#34;); qlBuf.</description></item><item><title>Concurrency</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-concurrency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-concurrency/</guid><description>Concurrency 동시에 동일한 데이터에 접근할 때에 데이터에 대한 접근을 제어하기 위해 Optimistic Locking을 지원한다. 한편 Hibernate의 Native API를 통해서는 지원 가능한 Pessimistic Locking 은 JPA2.0 버전에 정의될 예정이다.
Optimistic Locking Without Locking Source @Test public void testUpdateUserWithoutOptimisticLocking() throws Exception { // 1. 테스트를 위한 신규 데이터를 입력 newTransaction(); addDepartmentUserAtOnce(); closeTransaction(); // 2. 동일한 식별자를 이용하여 User 정보를 두번 조회 newTransaction(); User fstUser = (User) em.find(User.class,&amp;#34;User1&amp;#34;); User scdUser = (User) em.find(User.class,&amp;#34;User1&amp;#34;); closeTransaction(); // 3.</description></item><item><title>Cache Handling</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-cache_handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-cache_handling/</guid><description>Cache Handling 입력 인자로 전달된 객체를 정의된 테이블로 매핑시켜 데이터 액세스 처리를 수행해야 하는데 JPA에서는 이로 인해 발생 가능한 성능 이슈를 개선하기 위해 Cache를 활용한다. 현재 표준버전에서는 1 level Cache 만을 정의하고 있다. JPA 2.0에서는 2level Cache 정의 추가됨.
1 Level Cache Entity Manager 내부에 정의된 Cache로, 트랜잭션의 시작과 종료 사이에서 사용되며 한 트랜잭션 내에서 읽혀진 객체들을 보관하는 역할을 수행한다. JPA 구현체는 하나의 트랜잭션 내에서 동일한 객체를 한 번 이상 Loading할 경우 2번째부터는 Cache로부터 해당 객체를 추출하고 또한, 한 트랜잭션 범위 내에서 객체의 속성 변경시 변경 사항은 트랜잭션 종료시에 자동적으로 DB에 반영하도록 한다.</description></item><item><title>Fetch Strategy</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-fetch_strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-fetch_strategy/</guid><description>Fetch Strategy ORM 서비스는 기본적으로 Entity간의 연관관계를 정의하고 정의된 연관관계를 가지고 관련 Entity를 추출하여 사용한다. 관련 Entity를 추출하는데 기본적으로 Lazy Loading이란 기법을 통해서 객체가 실제로 필요하기 전까지 SQL을 실행하지 않고 Proxy 객체로 리턴하도록 하고 한다. 그러나 이러한 Lazy Loading으로 처리하게 되면 Lazy Loading을 하지 않는 것에 대비하여 필요시점에 쿼리를 여러번 수행해야 하는 문제가 발생한다. 이런 문제를 해결하기 위한 여러가지 Fetch 전략이 존재하는데 Batch를 이용하여 데이터 조회, Sub-Query를 이용하여 데이터 조회, Join Fetch를 이용하여 데이터 한꺼번에 조회하는 방법이 있다.</description></item><item><title>Spring과 JPA 통합</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-spring_integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-spring_integration/</guid><description>Spring Integration Spring에서는 JPA 기반에서 DAO 클래스를 쉽게 구현할 수 있도록 하기 위해 JdbcTemplate,HibernateTemplate등처럼 JpaTemplate을 제공한다. 하지만 JPA에 있어서는 Entity Manager의 Method를 직접 이용하는 것(plain JPA)에 대한 것도 가이드한다. 이에 두가지 방법에 대한 설정 및 사용방법에 대해서 설명하고자 한다. Spring JPA
기본 설정 Spring 기반하에서 JPA를 쓰고자 할 때 필요한 설정은 persistence.xml과 ApplicationContext 파일 설정이 필요하다.
persistence.xml 설정 &amp;lt;persistence-unit name=&amp;#34;HSQLMUnit&amp;#34; transaction-type=&amp;#34;RESOURCE_LOCAL&amp;#34;&amp;gt; // 구현체는 Hibernate &amp;lt;provider&amp;gt;org.hibernate.ejb.HibernatePersistence&amp;lt;/provider&amp;gt; // Entity Class List &amp;lt;class&amp;gt;egovframework.sample.model.bidirection.User&amp;lt;/class&amp;gt; &amp;lt;class&amp;gt;egovframework.</description></item><item><title>JPA Configuration</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-jpa_configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-jpa_configuration/</guid><description>JPA Configuration JPA는 실행 속성을 포함하고 있는 persistence.xml을 기반으로 하여 동작하도록 구성되어 있다. persistence.xml 파일의 주요 구성 요소와 속성 정의 방법에 대해 살펴보기로 한다. 먼저, persistence.xml 파일은 가장 상위에 &amp;lt;persistence&amp;gt; 태그를 포함하고 있으며 &amp;lt;persistence&amp;gt; 태그 내에 여러개의 &amp;lt;persistence-unit&amp;gt;를 포함할 수 있다.
Persistence Unit Persistence Unit에 포함하고 있는 주요한 엔티티들은 다음과 같다.
element 명 설 명 provider Entity Manager를 지원하는 Provider 클래스 mapping-file 매핑정보 파일 class Entity 클래스 리스트, @Entity, @Embeddable or @MappedSuperclass 를 포함하고 있는 클래스 exclude-unlisted-classes class 에서 정의하지 않은 것은 제외 properties JPA 구현체 프로퍼티 리스트 상세한 정보는 스키마 참조 아래는 위의 항목을 포함하고 있는 설정파일 예입니다.</description></item><item><title>Transaction 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/transaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/transaction/</guid><description>Transaction 서비스 개요 트랜잭션 서비스는 Spring 트랜잭션 서비스를 채택하여 가이드한다. 트랜잭션 서비스에는 여러가지가 있지만 여기서는 DataSource Transaction Service, JTA Transaction Service, JPA Transaction Service에 대해서 설명하고 트랜잭션 활용에 대해서는 설정 및 Annotation을 통해서 활용할 수 있는 Declaration Transaction Management와 프로그램에서 직접 API를 호출하여 쓸 수 있도록 하는 Programmatic Transaction Management 두가지에 대해서 설명한다.
Declarative Transaction Management Programmatic Transaction Management 설명 DataSource Transaction Service DataSource를 사용하여 Local Transaction을 관리할 수 있다. 아래에서 예를 들어서 설정 방법과 사용법을 설명한다.</description></item><item><title>선언적 Transaction 관리</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/transaction-declarative-transaction-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/transaction-declarative-transaction-management/</guid><description>Declarative Transaction Management 개요 코드에서 직접적으로 Transaction 처리하지 않고, 선언적으로 Transaction을 관리할 수 있는데 Annotation을 이용한 Transaction 관리, XML 정의를 이용한 Transaction 관리를 지원한다.
설명 Annotation Transaction Management Annotation 설정을 이용해서 Transaction을 관리할 수 있는데 아래에서 예를 들어서 설정 방법과 사용법을 설명한다.
Configuration &amp;lt;tx:annotation-driven transaction-manager=&amp;#34;transactionManager&amp;#34; /&amp;gt; 설정 XML에 위의 &amp;lt;tx:annotation-driven..&amp;gt;을 기재하면 설정된다. transactionManager는 TransactionManager 설정 참조
Sample Source @Transactional public void removeRole(Role role) throws Exception { this.roleDAO.removeRole(role); } 위의 예를 보면 @Transactional을 트랜잭션 처리하고자 하는 메소드위에 기재하여 트랜잭션 관리를 할 수 있다.</description></item><item><title>프로그래밍 방식의 Transaction 관리</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/transaction-programmatic-transaction-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/transaction-programmatic-transaction-management/</guid><description>Programmatic Transaction Management 개요 프로그램에서 직접 트랜잭션을 관리하고자 할 때 사용할 수 있는 방법에 대해서 설명하고자 한다. TransactionTemplate를 사용하는 방법과 Trnasaction Manager를 사용하는 방법 두가지가 있다.
설명 TransactionTemplate를 사용하는 방법 TransactionTemplate를 정의하고 callback 메소드 정의를 이용하여 Transaction 관리를 할 수 있도록 하는 방법이다.
Configuration
&amp;lt;bean id=&amp;#34;transactionTemplate&amp;#34; class=&amp;#34;org.springframework.transaction.support.TransactionTemplate&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;transactionManager&amp;#34; ref=&amp;#34;transactionManager&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;transactionManager&amp;#34; class=&amp;#34;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;dataSource&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; PROPERTIES 설 명 transactionManager 트랜잭션매니저 dataSource 데이타소스 위의 설정에서 transactionTemplate를 정의하고 property로 transactionManager을 정의한다.</description></item><item><title>Spring Data - Reactive</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive/</guid><description>Spring Data - Reactive 개요 Spring Data는 스프링 프레임워크의 하위 프로젝트 중 하나로, 데이터 액세스를 단순화하고 보다 쉽게 관리할 수 있도록 지원하는 도구 모음이다. 주로 데이터베이스와의 상호 작용을 다루며, 다양한 데이터 저장소 및 데이터 액세스 기술을 지원한다.
여기서는 NoSQL 데이터베이스인 R2DBC, Spring Data MongoDB, Cassandra, Redis와 Spring Reactive 연동에 전자정부 표준프레임워크에서 지원하는 라이브러리에 대해 설명한다.
자세한 내용은 아래 페이지에서 확인할 수 있다.
R2DBC MongoDB Cassandra Redis</description></item><item><title>R2DBC</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-r2dbc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-r2dbc/</guid><description>R2DBC 개요 R2DBC(Relational Reactive Database Connectivity)는 Reactive 프로그래밍 모델을 기반으로 하는 비동기적인 방식으로 관계형 데이터베이스와 상호 작용하기 위한 자바 라이브러리로 Spring WebFlux와 함께 사용하여 비동기 논블로킹 방식의 애플리케이션을 구성할 수 있다. 이를 통해 리액티브 애플리케이션 스택에서 관계형 데이터 액세스 기술을 사용하는 Spring 기반 애플리케이션을 더 쉽게 빌드할 수 있다.
설명 데이터베이스 연동 R2DBC를 사용하여 데이터베이스에 액세스하기 위해 가장 먼저 해야 할 일은 JDBC의 DataSource와 비슷한 역할을 하는 ConnectionFactory 객체를 만드는 것이다.</description></item><item><title>MongoDB</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-mongodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-mongodb/</guid><description>MongoDB 개요 Spring Data MongoDB 프로젝트는 MongoDB 문서 스타일 데이터 저장소를 사용하는 솔루션 개발에 Spring의 핵심 개념을 적용하여 문서를 저장하고 쿼리하기 위한 높은 수준의 추상화 템플릿을 제공한다. Spring 프레임워크에서 제공하는 JDBC 지원과 유사하다는 것을 알 수 있다.
설명 데이터베이스 연동 Spring WebFlux에서 MongoDB 데이터베이스와 연결을 설정하고 관리하기 위해서는 ReactiveMongoDatabaseFactory 인터페이스의 구현클래스인 SimpleReactiveMongoDatabaseFactory 클래스를 사용하여, 연결 풀링이나 커넥션 관리 기능 등을 추상화하여 데이터 액세스 작업에 집중할 수 있게 한다.
실행환경 라이브러리 package org.</description></item><item><title>Cassandra</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-cassandra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-cassandra/</guid><description>Cassandra 개요 Cassandra를 위한 Spring 데이터 프로젝트는 핵심 Spring 개념을 Cassandra 컬럼형 데이터 저장소를 사용하는 솔루션 개발에 적용하여 문서를 저장하고 쿼리하기 위한 높은 수준의 추상화 템플릿을 제공한다. Spring 프레임워크에서 제공하는 JDBC 지원과 유사하다는 것을 알 수 있다.
설명 데이터베이스 연동 Spring Data Cassandra와 Spring WebFlux를 함께 사용하여 Cassandra 데이터베이스와의 비동기적인 상호 작용을 지원하기 위해 Spring Data Cassandra에서 제공하는 DefaultBridgedReactiveSession 클래스를 사용한다. 해당 클래스를 사용하여 Cassandra 클러스터에 대한 연결을 설정하고, 세션을 관리하며 비동기 쿼리를 실행하고 결과를 처리할 수 있다.</description></item><item><title>Redis</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-redis/</guid><description>Redis 개요 Spring Data Redis 프로젝트는 키-값 스타일 데이터 저장소를 사용하여 솔루션 개발에 핵심 Spring 개념을 적용하여 메시지를 주고받기 위한 높은 수준의 추상화 템플릿을 제공한다. Spring 프레임워크의 JDBC 지원과 유사하다는 것을 알 수 있다.
설명 데이터베이스 연동 Spring Data Redis와 Spring WebFlux를 함께 사용하여 Redis 데이터베이스와의 비동기적인 상호 작용을 지원하기 위해 Spring Data Redis에서 제공하는 ReactiveRedisConnectionFactory 인터페이스의 구현클래스인 LettuceConnectionFactory 클래스를 사용한다. 해당 클래스를 사용하여 데이터베이스 연결을 설정하고, 세션을 관리하며 비동기 쿼리를 실행하고 결과를 처리할 수 있다.</description></item></channel></rss>