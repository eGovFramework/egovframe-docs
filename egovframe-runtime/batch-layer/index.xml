<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>배치처리 on 표준프레임워크 개발가이드</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/</link><description>Recent content in 배치처리 on 표준프레임워크 개발가이드</description><generator>Hugo -- gohugo.io</generator><language>ko</language><atom:link href="https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/index.xml" rel="self" type="application/rss+xml"/><item><title>배치 실행환경 소개</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/intro/</guid><description>배치 실행환경 소개 개요 전자정부 표준프레임워크에서 대용량 데이터 처리 지원을 위해 작업 수행, 결과 관리, 스케줄링 관리 기능을 제공한다.
목표 배치 실행환경은 대용량 데이터 처리를 위한 기반 환경을 제공함으로써 배치 실행에 필요한 핵심 기능을 제공한다.
배치 실행환경 수행 과정 전자정부 표준프레임워크 실행환경에 추가된 배치 실행환경은 3-Tier(Run, Job, Application Tier)로 구성되며, 대용량 데이터 처리를 위한 기반 환경을 제공한다.
Run Tier Run Tier는 배치 응용 프로그램의 실행을 담당한다. 실행 방식에 따라 Scheduler, Http/Web service, CommandLine으로 나눌 수 있다.</description></item><item><title>SQLite</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-sqllite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-sqllite/</guid><description>SQLite 개요 배치 처리시 경량화된 Repository를 사용을 위한 SQLite 처리를 지원한다.
설명 SQLite pom.xml 설정 sqlite 라이브러리 사용을 위해 dependency를 추가 한다.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.xerial&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sqlite-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; SQLite 사용 SQLite 사용을 위해 데이터베이스 설정을 하고 repository 생성을 위한 기초데이터를 설정 한다.
&amp;lt;!-- SQLite database 설정 --&amp;gt; &amp;lt;bean id=&amp;#34;dataSource&amp;#34; class=&amp;#34;org.springframework.jdbc.datasource.DriverManagerDataSource&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;org.sqlite.JDBC&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;jdbc:sqlite:repository.sqlite&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;!-- SQLite 기초데이터 설정 --&amp;gt; &amp;lt;jdbc:initialize-database data-source=&amp;#34;dataSource&amp;#34;&amp;gt; &amp;lt;jdbc:script location=&amp;#34;org/springframework/batch/core/schema-drop-sqlite.</description></item><item><title>Logback logging</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-support-logback_logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-support-logback_logging/</guid><description>Logback logging 개요 배치 처리시 로깅 처리를 위해 log4j2를 지원하고 있지만 경량화된 로깅 처리를 위해 Logback 로깅 처리를 지원한다
설명 Logback pom.xml 설정 log4j, commons-logging 관련 라이브러리를 exclusion 처리하고, Logback 라이브러리를 등록한다.
&amp;lt;!-- log4j 관련 exclusion --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;egovframework.rte&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;egovframework.rte.bat.core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${egovframework.rte.version}&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;log4j-core&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;log4j-slf4j-impl&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;log4j-over-slf4j&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;commons-logging&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;commons-logging&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- commons-logging 관련 exclusion --&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;commons-logging&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;commons-logging&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;!-- logback 관련 라이브러리 등록 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;ch.</description></item><item><title>Job</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job/</guid><description>Job 개요 Job은 배치작업 전체의 중심 개념으로 배치작업 자체를 의미한다. Job은 실제 프로세스가 진행되는 Step 들을 최상단에서 포함하고 있으며, Job의 실행은 배치작업 전체의 실행을 의미한다.
설명 Job은 배치작업 과정 전체를 캡슐화하는 개념이며, 전체 계층 구조의 최상단이다. 특정 Job은 각각의 JobParameters에 따라 JobInstance를 생성하며, 한번의 Job 시도마다 JobExecution을 생성한다. Job은 반드시 한개 이상의 Step으로 구성된다. 아래 그림을 보면, &amp;lsquo;EndOfDay&amp;rsquo;라는 Job이 있고 &amp;lsquo;2012/10/01&amp;rsquo;이라는 JobParameter를 통해 JobInstance가 생성되었다. 그리고 &amp;lsquo;EndOfDay&amp;rsquo; Job의 첫번째 시도를 의미하는 JobExecution이 생성되는 것을 볼 수 있다.</description></item><item><title>Job Variable</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job_variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job_variable/</guid><description>Job Variable 개요 변수 선언 후 Job Listeners를 통해서 모든 Job에서 사용자 정의 변수를 사용할 수 있도록 EgovJobVariableListener를 통해서 지원한다.
사용자가 변수를 정의하여 여러 job에서 해당 변수를 공유하여 사용 가능한 기능으로 이루어져있다.
설명 Job Variable 설정 배치실행환경에서 제공하는 EgovJobVariableListener 사용하여 사용자 정의 변수를 설정한다.
&amp;lt;bean id=&amp;#34;egovJobVariableListener&amp;#34; class=&amp;#34;egovframework.rte.bat.support.EgovJobVariableListener&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;pros&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;JobVariableKey1&amp;#34;&amp;gt;JobVariableValue1&amp;lt;/prop&amp;gt; &amp;lt;prop key=&amp;#34;JobVariableKey2&amp;#34;&amp;gt;JobVariableValue2&amp;lt;/prop&amp;gt; &amp;lt;prop key=&amp;#34;JobVariableKey3&amp;#34;&amp;gt;JobVariableValue3&amp;lt;/prop&amp;gt; &amp;lt;/props&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; job 설정 job 설정시 listener를 사용하여 공유변수 서비스를 설정한다.
&amp;lt;job id=&amp;#34;delimitedToDelimitedJob-JobVariable&amp;#34; parent=&amp;#34;eGovBaseJob&amp;#34; xmlns=&amp;#34;http://www.</description></item><item><title>Step</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-step/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-step/</guid><description>Step 개요 Step은 Job 내부에 구성되어 실제 배치작업 수행을 위해 작업을 정의하고 제어한다. 즉, Step에서는 입력 자원을 설정하고 어떤 방법으로 어떤 과정을 통해 처리할지 그리고 어떻게 출력 자원을 만들 것인지에 대한 모든 설정을 포함한다.
설명 Step은 Job의 독립적이고 순차적 단계를 캡슐화하는 도메인 객체다. 그러므로 모든 Job은 적어도 하나 이상의 Step으로 구성되며 Step에 실제 배치작업을 처리하고 제어하기 위해 필요한 모든 정보가 포함된다. 여러개의 Step 중 하나의 Step은 순차적으로 실행되는 과정 중 하나의 흐름으로 생각할 수 있다.</description></item><item><title>Step Variable</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-step_variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-step_variable/</guid><description>Step Variable 개요 변수 선언 후 Listeners를 통해서 모든 Setp에서 사용자 정의 변수를 사용할 수 있도록 EgovStepVariableListener를 통해서 지원한다. 사용자가 변수를 정의하여 여러 step에서 해당 변수를 공유하여 사용 가능한 기능으로 이루어져있다.
설명 Step Variable 설정 배치실행환경에서 제공하는 EgovJobVariableListener 사용하여 사용자 정의 변수를 설정한다.
&amp;lt;bean id=&amp;#34;egovStepVariableListener&amp;#34; class=&amp;#34;egovframework.rte.bat.support.EgovStepVariableListener&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;pros&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;StepVariableKey1&amp;#34;&amp;gt;StepVariableValue1&amp;lt;/prop&amp;gt; &amp;lt;prop key=&amp;#34;StepVariableKey2&amp;#34;&amp;gt;StepVariableValue2&amp;lt;/prop&amp;gt; &amp;lt;prop key=&amp;#34;StepVariableKey3&amp;#34;&amp;gt;StepVariableValue3&amp;lt;/prop&amp;gt; &amp;lt;/props&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; job, step 설정 step 설정시 listener를 사용하여 공유변수 서비스를 설정한다.
&amp;lt;job id=&amp;#34;delimitedToDelimitedJob-StepVariable&amp;#34; parent=&amp;#34;eGovBaseJob&amp;#34; xmlns=&amp;#34;http://www.</description></item><item><title>ItemReader</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-item_reader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-item_reader/</guid><description>ItemReader 개요 ItemReader는 읽기 대상의 타입에 관계없이 한번에 한 항목을 읽으며 읽을 항목이 모두 소진되면 Null을 반환하는 인터페이스이다.
설명 ItemReader는 여러 종류의 데이터 타입을 입력 받을 수 있다. 가장 일반적인 데이터 타입으로 플랫 파일, XML, 데이터베이스가 있다.
플랫 파일 : 플랫 파일 ItemReader는 일반적으로 고정 위치로 정의된 데이터 필드나 특수 문자에 의해 구별된 데이터의 행을 읽는다. XML : XML ItemReader는 파싱, 매핑, 유효성 검증을 XML에서 독립적으로 작업할 수 있도록 처리해준다. 입력 데이터는 XSD 스키마에 대해 XML 파일의 유효성 검증이 가능하다.</description></item><item><title>ItemWriter</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-item_writer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-item_writer/</guid><description>ItemWriter 개요 ItemWriter는 대상 타입에 관계없이 한번에 항목의 묶음(Chunk)을 쓰는 동작의 인터페이스이다.
설명 ItemWriter의 기능은 ItemReader와 유사하지만 정반대의 동작을 한다. 기본적인 ItemWriter 인터페이스는 아래와 같다.
public interface ItemWriter&amp;lt;T&amp;gt; { void write(List&amp;lt;? extends T&amp;gt; items) throws Exception; } write() 메소드는 ItemWriter의 필수적인 메소드이며 인자로 건넨 객체가 열려 있는 동안 쓰기 작업을 시도한다.
FlatFile ItemWriter FlatFileItemWriter는 Resource, LineAggregator에 기본적으로 의존성을 갖으며, LineAggregator에 따라 구분자(Delimited)와 고정길이(Fixed Length) 방식으로 쓸 수 있다.
구분 데이터 형태 설명 LineAggregator Item → String ItemReader, ItemProcessor 과정을 거친 Item을 1 라인의 String으로 변환하는 총 과정(FieldExtractor 과정을 포함한다.</description></item><item><title>Resource Variable</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-resource_variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-resource_variable/</guid><description>Resource Variable 개요 사용자 정의 리소스 변수 선언 후 Setp에서 ItemReader, ItemWriter에서 사용자 정의 리소스를 사용할 수 있도록 EgovResourceVariable를 통해서 지원한다.
설명 EgovResourceVariable 설정 배치실행환경에서 제공하는 EgovResourceVariable 사용하여 사용자 정의 리소스를 설정한다.
&amp;lt;bean id=&amp;#34;egovResourceVariable&amp;#34; class=&amp;#34;egovframework.rte.bat.support.EgovResourceVariable&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;pros&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;input.resource&amp;#34;&amp;gt;file:./src/main/resources/egovframework/batch/data/inputs/csvData.csv&amp;lt;/prop&amp;gt; &amp;lt;prop key=&amp;#34;writer.resource&amp;#34;&amp;gt;file:./target/test-outputs/csvOutput_ResourceVariable_#{new java.text.SimpleDateFormat(&amp;#39;yyyyMMddHHmmssSS&amp;#39;).format(new java.util.Date())}.csv&amp;lt;/prop&amp;gt; &amp;lt;/props&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; step 정의 시 리소스 사용 Setp에서 ItemReader, ItemWriter 사용시 사용자 정의 리소스 변수를 사용하여 resource 설정이 가능하다.
&amp;lt;bean id=&amp;#34;delimitedToDelimitedJob-ResourceVariable.delimitedToDelimitedStep.delimitedItemReader&amp;#34; class=&amp;#34;org.springframework.batch.item.file.FlatFileItemReader&amp;#34; scope=&amp;#34;step&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;resource&amp;#34; value=&amp;#34;#{egovResourceVariable.</description></item><item><title>JobRepository</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-job_repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-job_repository/</guid><description>JobRepository 개요 JobRepository는 배치 작업 중의 정보를 저장하는 역할을 한다. 어떠한 Job이 언제 수행되었고, 언제 끝났으며, 몇 번이 실행되었고 실행에 대한 결과가 어떤지 등의 배치 작업의 수행과 관련된 모든 meta data가 저장되어 있다.
설명 JobRepository은 수행되는 Job에 대한 정보를 담고 있는 저장소로 배치작업의 지속성 메커니즘이다. JobRepository는 Spring Batch에서 JobExecution와 StepExecution 등과 같은 지속성을 가진 정보의 기본 CRUD작업에 사용된다. 배치작업이 처음 실행되면 JobRepository에서 JobExecution이 생성되고 배치작업이 실행되는 동안 StepExecution 및 JobExecution의 정보들이 JobRepository에 저장되고 갱신되어 지속된다.</description></item><item><title>JobLauncher</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-job_launcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-job_launcher/</guid><description>JobLauncher 개요 JobLauncher는 배치작업을 실행시키는 역할을 한다. Job과 Job Parameters를 이용하여 요청된 배치 작업을 수행한 후 JobExecution을 반환한다.
설명 JobLauncher 인터페이스를 보면 Job과 Job Parameter를 이용하여 요청된 Job을 수행한 후 JobExecution을 반환되는 run메소드가 정의되어 있다.
public interface JobLauncher { public JobExecution run(Job job, JobParameters jobParameters) throws JobExecutionAlreadyRunningException, JobRestartException, JobInstanceAlreadyCompleteException, JobParametersInvalidException; } JobLauncher 인터페이스의 기본 구현 클래스로는 SimpleJobLauncher이 제공된다. SimpleJobLauncher클래스는 JobName과 JobParameter를 이용하여 JobRepository에서 Job의 실행시도를 나타내는 JobExecution을 획득하고 작업을 수행한다.</description></item><item><title>Remote JobLauncher</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-remote_job_launcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-remote_job_launcher/</guid><description>Remote JobLauncher 개요 Remote JobLauncher는 온라인 상에서 별도의 배치 서버의 Batch Job작업을 실행시키는 역할을 한다. 온라인 상의 Client와 Server를 이용하여 요청된 배치 작업을 수행한다.
구성 온라인상의 Remote JobLauncher를 구현하기 위하여 Hessian Binary Web Service를 사용한다. Hessian 웹서비스는 별도의 대형 프레임워크를 설치하지 않고도 간편하게 사용할 수 있은 웹서비스이며, HTTP기반의 경량 바이러리 프로토콜로 별도의 확장없이 바이너리 데이터를 전송하는데 적합하다. 또한, 스피링의 HessianProxyFactoryBean과 HessianServiceExporter를 사용하여 편리한 Integration을 지원한다.
Hessian을 사용하기 위하여 아래와 같이 라이브러리 디펜던시를 설정한다.</description></item><item><title>JobRunner</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-job_runner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-job_runner/</guid><description>JobRunner 개요 JobRunner는 외부 실행 모듈과 JobLauncher를 연결해주는 모듈로, 용도에 맞게 구현이 필요하다. 전자정부 표준프레임워크에서는 작업실행 유형에 따라 미리 JobRunner를 미리 구현한 표준 Batch Runner를 제공한다.
설명 배치작업의 실행 유형에 따라 아래와 같이 3가지의 Batch Runner를 제공한다.
EgovBatchRunner: Web, Java Application 등을 이용하여 범용적으로 실행되는 일괄처리 작업에 사용한다. EgovCommandLineRunner: 외부 프로그램(Windows: / Unix/Linux: crontab 등)이나 명령 프롬프트(Windows: bat / Unix/Linux: Shell)에서 독립적으로 실행되는 배치작업에 사용한다. EgovSchedulerRunner: 주기적으로 실행되어야 하는 일괄처리 작업에 사용한다.</description></item><item><title>JobRegistry</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job_registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job_registry/</guid><description>JobRegistry 개요 JobRegistry는 생성된 Job을 자동으로 Map형태로 저장하여 관리(추가, 삭제 등)한다.
설명 JobRegistry는 필수는 아니지만 context에서 Job을 추적하거나 다른 곳에서 생성된 Job을 application context의 중앙에 모을 때 유용하다. 등록된 Job의 이름과 속성들을 조작할 수 있으며 job name과 job instance의 Map의 형태로 이루워져 있다.
&amp;lt;bean id=&amp;#34;jobRegistry&amp;#34; class=&amp;#34;org.springframework.batch.core.configuration.support.MapJobRegistry&amp;#34; /&amp;gt; JobRegistry에 Job을 자동으로 등록하는 방법은 두 가지가 있다.
JobRegistryBeanPostProcessor 사용 AutomaticJobRegistrar 사용 JobRegistryBeanPostProcessor 이것은 Bean post-processor으로 Application Context가 올라가면서 bean 등록 시, 자동으로 JobRegistry에 Job을 등록 시켜준다.</description></item><item><title>JobExplorer</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job_explorer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job_explorer/</guid><description/></item><item><title>JobOperator</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/barch-core-job_operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/barch-core-job_operator/</guid><description/></item><item><title>Skip/Retry/Repeat</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-skip_repeat_retry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-skip_repeat_retry/</guid><description>Skip/Retry/Repeat 개요 Skip, Retry, Repeat은 효율적인 배치수행을 위해 필요한 기능들이다. Repeat 정책에 따라 Step과 Chunk가 반복적으로 수행되면서 데이터 Read, Process, Write 과정이 일어나는데, 여기서 Skip과 Retry 이용해 배치작업을 효율적으로 수행할 수 있다. 각 기능이 쓰이는 위치는 다음 그림을 참고한다.
설명 Skip Skip은 데이터를 처리하는 동안 설정된 Exception이 발생했을 경우, 해당 데이터 처리를 건너뛰는 기능이다. 데이터의 사소한 오류에 대해 Step의 실패처리 대신 Skip을 함으로써, 배치수행의 빈번한 실패를 줄일 수 있게 한다.</description></item><item><title>MultiDataProcessing</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-multidata_process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-multidata_process/</guid><description>MultiDataProcessing 개요 배치 수행시 다수의 리소스를 처리하고자 할 경우에는 일반적인 Job설정으로 처리할 수 없다. 전자정부 배치프레임워크에서는 MultiData Processing을 통해 다수의 리소스를 읽어 다수의 결과로 처리하거나 다수의 리소스를 읽어 하나의 결과로 처리하는 기능을 제공한다.
설명 다수(N개)의 리소스를 처리하는 방식은 N→1, N→N으로 구분된다.
MultiResourceItem처리: N개의 대상을 읽은 후, 읽은 개수만큼의 결과물을 만들어낸다. CompositeItem처리: N개의 대상을 읽은 후, 하나의 결과물을 만들어낸다. 두 방식을 개념적으로 비교하면 아래와 같다.
MultiResourceItem 처리 다수의 파일을 대상으로 동일한 유형의 Batch처리를 하고자 할 경우 MultiResourceItemReader를 사용하면 편리하다.</description></item><item><title>History Management</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-history_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-history_management/</guid><description>History Management 개요 배치작업 처리 중의 정보는 JobRepository의 JobInstance, JobParams, JobExecution, StepExecution, key-value 쌍으로 값을 보관할 수 있는 공간인 ExecutionContext에 저장 및 갱신되어 history를 관리한다.
설명 JobInstance, JobParams, JobExecution, StepExecution, ExecutionContext 의 각각의 속성에 대해서 정리하였다.
BATCH_JOB_INSTANCE JobInstance 속성 설명 jobInstanceId JobInstance를 식별하는 ID version JobInstance 의 수정 횟수 jobName Job의 이름 jobKey JobInstance를 구분 짓는 JobParameters의 serialization BATCH_JOB_EXECUTION JobExecution 속성 설명 status BatchStatus는 실행 상태를 나타내는 객체이다, 실행하는 동안에는 BatchStatus,STARTED, 실행이 실패한 경우 BatchStatus.</description></item><item><title>동기/비동기 처리 예제</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-example-sync_async_v3.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-example-sync_async_v3.7/</guid><description>동기/비동기 처리 예제 개요 일괄(배치)처리 작업 수행 시, 작업처리가 종료될 때까지 대기하는 동기방식 처리와 작업처리의 종료를 Callback매커니즘을 이용하여 전달받는 비동기처리에 대한 예제를 보여준다.
설명 설정 Launcher 설정 동기/비동기 처리 예제의 Launcher 설정파일인 skipSample-job-launcher-context.xml 을 확인한다. Job 수행시, 동기와 비동기 방식으로 데이터를 처리할 수 있으며, 이 예제에서는 동기 처리가 기본값으로 설정되어 있다. 설정위치는 Launcher 설정파일의 jobLauncher 빈에서 taskExecutor 프로퍼티이며, 참조하는 값으로 다음 두 가지를 설정할 수 있다.
sync : 동기처리시 사용할 클래스 설정 async : 비동기처리시 사용할 클래스 설정 &amp;lt;bean id=&amp;#34;jobLauncher&amp;#34; class=&amp;#34;org.</description></item><item><title>Listener (Pre/Post Processing)</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-listener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-listener/</guid><description>Listener (Pre/Post Processing) 개요 배치 수행시 Job을 구성하는 각 단계(Job, Step, Chunk, Read, Process, Write)에서 이벤트설정을 통해 다양한 추가구성을 할 수 있다. 이벤트는 Listener를 활용하여 설정하고, 배치 수행중 설정한 Listener를 접하게 되면 관련된 이벤트를 수행하게 된다.
설명 JobListener(Intercepting Job Execution) Job 실행 과정에서, 사용자가 정의한 코드가 실행 될 수 있도록 Job의 라이프사이클에서 다양한 이벤트로 알려주는 것은 유용하다.SimpleJob는 적절한 시간에 JobListener를 호출하도록 한다.
public interface JobExecutionListener { void beforeJob(JobExecution jobExecution); void afterJob(JobExecution jobExecution); } JobListeners는 Job의 리스너들을 통해 SimpleJob에 추가 될 수 있다.</description></item><item><title>병행처리</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-parallel_process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-parallel_process/</guid><description>병행처리 개요 대용량 데이터를 처리하는 배치수행에서 병렬처리를 이용하면, Job의 구성요소들이 여러 쓰레드 분산수행되어 빠른 시간 내에 효율적으로 작업을 완료할 수 있다. 스프링 배치에서 병렬처리 방식은 실행 유형별로 멀티쓰레드 방식, Parallel 방식, 파티셔닝 방식 등이 있다.
설명 멀티쓰레드(Multi-threaded Step) 병렬처리를 시작하는 간단한 방법은 Step 구성요소중 &amp;lt;tasklet&amp;gt; 속성에 TaskExecutor를 추가하는 것이다.
&amp;lt;step id=&amp;#34;loading&amp;#34;&amp;gt; &amp;lt;tasklet task-executor=&amp;#34;taskExecutor&amp;#34;&amp;gt;...&amp;lt;/tasklet&amp;gt; &amp;lt;/step&amp;gt; TaskExecutor 예제에서 TaskExecutor 인터페이스를 구현하기 위해 빈을 정의한다. TaskExecutor 는 스프링 인터페이스 표준이므로 상세한 내용은 스프링 가이드를 참고한다.</description></item><item><title>Code Base Exception</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-code_base_exception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-code_base_exception/</guid><description>Code Base Exception 개요 배치 처리시 Code 기반으로 에러를 처리 할 수 있도록 EgovBatchException를 통해서 지원한다. 데이터베이스 에러코드관리 테이블을 등록과 에러코드 데이터를 등록이 선행 되야지만 해당 서비스를 사용가능하다.
설명 Code Base Exception 데이터베이스 설정 C REATE TABLE BATCH_EXCEPTION_MESSAGE ( EX_ID BIGINT NOT NULL PRIMARY KEY, EX_KEY VARCHAR(255) NOT NULL, EX_MESSAGE VARCHAR(2500) NOT NULL ); I NSERT INTO BATCH_EXCEPTION_MESSAGE VALUES(1,&amp;#39;EGOVBATCH000001&amp;#39;,&amp;#39;배치실행 중 업무 관련 에러가 발생 하였습니다.&amp;#39;); I NSERT INTO BATCH_EXCEPTION_MESSAGE VALUES(2,&amp;#39;EGOVBATCH000002&amp;#39;,&amp;#39;배치실행 중 알수 없는 오류가 발생 하였습니다.</description></item><item><title>센터 컷(CenterCut)</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-centercut-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-centercut-intro/</guid><description>센터 컷(CenterCut) 소개 개요 전자정부 표준프레임워크에서의 큐(Queue)를 사용하여 대용량 데이터 처리를 위해 센터 컷 방식의 배치 작업수행을 위한 가이드를 제공한다.
센터컷 가이드 구조 Unordered List Item기본적으로 센터컷의 구조는 큐(Queue)를 이용하는 부분을 제외하고는 배치 프로그램과 유사하다.
Unordered List Item처음 ItemReader를 사용하여 데이터를 읽고 큐에 넣은 Center-Cut Reading Step과, 읽어온 데이터를 가공 후 QueueSender를 통해 Queue에 넣는 구조이다.
Center-Cut Process Step은 큐에서 들어온 데이터를 읽고 처리 모듈(Busineess Proc)를 활용하여 데이터를 처리하는 구조이다.</description></item><item><title>이벤트알림 템플릿 관리</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-event_notice_template_mgmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-event_notice_template_mgmt/</guid><description>이벤트알림 템플릿 관리 개요 전자정부 표준프레임워크의 배치 수행중 특정시점에 이벤트가 발생하는 경우 EventNoticeTrigger 인터페이스를 활용하여 SMS, Email 등을 통해 정보를 전달할 수 있는 추상화된 외부알림 access 관리기능이다.
설명 EventNoticeTrigger EventNoticeTrigger 는 이벤트 알림 기능을 사용하도록 추상화된 인터페이스이다.
메소드는 트리거를 호출하는 invoke 메소드를 파라메터 타입별로 구성하였고, 모든 메소드의 리턴타입은 void 이다.
메소드 파라메터 설명 invoke() 없음 파라메터 없이 이벤트호출 ‌로직 구현 invoke(StepExecution) StepExecution 파라메터인 StepExecution 정보를 활용하는 로직 구현 invoke(JobExecution) JobExecution 파라메터인 JobExecution 정보를 활용하는 로직 구현 invoke(Exception) Exception 파라메터인 Execption 정보를 활용하는 로직 구현 EgovEventNoticeTrigger EgovEventNoticeTrigger 클래스는 EventNoticeTrigger 인터페이스를 상속받은 형태로, 파라메터 타입별로 이벤트 알림 기능(Email전송, SMS전송)을 호출하기 위한 invoke 메소드를 갖고 있다.</description></item><item><title>Flow Control</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-flow_control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-flow_control/</guid><description>Flow Control 개요 Job 내부에는 여러 Step 들이 존재할 수 있고, 각 Step 사이의 흐름을 관리할 필요가 있다. Step 내의 next 설정과 Desision 설정으로 Job을 수행하다 한 Step의 처리결과에 따라 다른 Step을 선택하여 수행할 수 있고, 특정 Step의 실패가 Job 전체의 실패로 이어지지 않도록 구성할 수 있다.
설명 흐름 처리(Controlling Step Flow) Sequential Flow 가장 간단한 시나리오의 Job은 모든 Step을 순서대로 실행 하는 것이다.
위와 같은 Job의 실행은 Step 엘리먼트의 &amp;rsquo;next&amp;rsquo; 어트리뷰트를 이용해서 설정할 수 있다.</description></item></channel></rss>