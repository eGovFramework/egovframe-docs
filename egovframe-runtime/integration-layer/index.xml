<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>연계통합 on 표준프레임워크 개발가이드</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/</link><description>Recent content in 연계통합 on 표준프레임워크 개발가이드</description><generator>Hugo -- gohugo.io</generator><language>ko</language><atom:link href="https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/index.xml" rel="self" type="application/rss+xml"/><item><title>Naming 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/naming-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/naming-service/</guid><description>Naming Service 개요 Naming 서비스는 Java Naming and Directory Interface(JNDI) API를 이용하여 자원(Resource)를 찾을 수 있도록 도와주는 서비스이다. Naming 서비스를 지원하는 Naming 서버에 자원을 등록하여 다른 어플리케이션에서 사용할 수 있도록 공개하고, Naming 서버에 등록되어 있는 자원을 찾아와서 이용할 수 있게 한다.
주요 개념 Java Naming and Directory Interface(JNDI) Java Naming and Directory Interface(JNDI)는 Java 소프트웨어 클라이언트가 이름(name)을 이용하여 데이터 및 객체를 찾을 수 있도록 도와주는 디렉토리 서비스에 대한 Java API이다.</description></item><item><title>Integration 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/integration-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/integration-service/</guid><description>Integration 서비스 개요 Integration 서비스는 전자정부 개발프레임워크 기반의 시스템이 타 시스템과의 연계를 위해 사용하는 Interface의 표준을 정의한 것이다.
설명 목적 기존의 전자정부 시스템은 타 시스템과의 연계를 위해 연계 솔루션을 사용하거나 자체 개발한 연계 모듈을 사용해왔다. 기존에 사용된 연계 솔루션 및 자체 연계 모듈은 각각 고유한 설정 및 사용 방식을 가지고 있어, 동일한 연계 서비스라 할지라도 사용하는 연계 모듈에 따라 각기 다른 방식으로 개발되어 왔다. 본 Integration 서비스는 이러한 중복 개발을 없애고, 표준화된 설정 및 사용 방식을 정의하여 개발 효율성을 제고한다.</description></item><item><title>Integration 서비스 Metadata</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/integration-service-metadata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/integration-service-metadata/</guid><description>Metadata 개요 Integration 서비스 Metadata는 연계에 필요한 정보를 정의하고 있다. 본 장은 실제 Integration 서비스로 구현된 연계 Adaptor를 사용하는 방식에 직접적인 도움을 주지는 않는다. 실제 사용법은 연계 서비스 API에서 설명하고 있다. 단, 연계 서비스 API의 핵심 Interface인 EgovIntegrationService의 단위에 해당하는 연계등록정보와, 이와 관련된 기관, 시스템, 서비스 등의 Metadata를 이해하는 것은 API 사용에 도움이 될 수 있다.
설명 논리모델 Integration 서비스 Metadata의 논리모델은 연계를 위해 필요한 논리적인 정보를 정의한다.
논리ERD Integration 서비스 Metadata의 논리ERD 및 Entity 설명은 다음과 같다.</description></item><item><title>연계 서비스 API</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/integration-service-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/integration-service-api/</guid><description>연계 서비스 API 개요 연계 서비스 API는 연계 서비스를 사용 및 제공하기 위한 interface를 제공한다.
설명 구성 연계 서비스 API는 다음과 같이 구성된다.
구성요소 설명 EgovIntegrationContext 연계 서비스에 대한 설정 및 EgovIntegrationService 객체를 관리한다. EgovIntegrationMessage 연계 서비스를 통해 주고받는 표준 메시지를 정의한다. EgovIntegrationMessageHeader 연계 서비스를 통해 주고받는 표준 메시지 헤더를 정의한다. EgovIntegrationMessageHeader::ResultCode 연계 서비스 결과 코드를 담고 있는 enumeration이다. EgovIntegrationService 연계 서비스를 호출하기 위해 사용한다. EgovIntegrationResponse 연계 서비스를 비동기 방식으로 호출한 경우, 응답 메시지를 받기 위해 사용한다.</description></item><item><title>WebService</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/webservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/webservice/</guid><description>WebService 개요 WebService는 전자정부 개발프레임워크 Integration 서비스 표준에 따라 WebService를 요청하고 제공하기 위한 Library이다.
주요 개념 Web Services W3C는 Web Service를 “네트워크 상에서 발생하는 컴퓨터 간의 상호작용을 지원하기 위한 소프트웨어 시스템”으로 정의하고 있다. 일반적으로 Web Service는 인터넷과 같은 네트워크 상에서 접근되고, 요청된 서비스를 제공하는 원격 시스템에서 수행되는 Web APIs이다.
참조 : https://en.wikipedia.org/wiki/Web_service 사용 오픈소스 Apache CXF WebService는 Web Service 구현하기 위해서 Apache CXF를 사용한다.
설명 WebService는 Integration Service 표준에 따라 구현한 Library이므로, 본 장에서는 API 등의 사용 방식은 설명하지 않는다.</description></item><item><title>Restful</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/restful/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/restful/</guid><description>Restful 개요 Spring MVC를 통해 구현한 RESTful은 리소스에 대한 접근을 URI를 이용하며, HTTP의 PUT, GET, POST, DELETE 등과 같은 메소드의 의미를 그대로 사용하므로, 단순하게 접근 할 수 있다.
설명 web.xml 설정 &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;*.html&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;*.xml&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;*.json&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt;httpMethodFilter&amp;lt;/filter-name&amp;gt; &amp;lt;filter-class&amp;gt;org.springframework.web.filter.HiddenHttpMethodFilter&amp;lt;/filter-class&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;filter-mapping&amp;gt; &amp;lt;filter-name&amp;gt;httpMethodFilter&amp;lt;/filter-name&amp;gt; &amp;lt;url-pattern&amp;gt;/springrest/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/filter-mapping&amp;gt; 자세한 설명은 아래에 있다.
Request Mapping 설정
REST 스타일의 URL은 &amp;lsquo;/cgr’, &amp;lsquo;/cgr/CATEGORY-00000000001&amp;rsquo; 처럼 계층 구조로 사용가능하도록 설계되었다. 따라서 web.xml에 DispatcherServlet을 정의하고 매핑할 URL 패턴을 &amp;lsquo;/&amp;lsquo;로 지정해야한다.</description></item><item><title>Cloud Data Stream</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/cloud-data-stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/cloud-data-stream/</guid><description>Cloud Data Stream 개요 Spring Cloud Stream은 공유 메시징 시스템과 연결된 확장성이 뛰어난 이벤트 기반 마이크로서비스를 구축하기 위한 프레임워크이다.
Spring Cloud Stream의 핵심 구성 요소는 다음과 같다.
대상 바인더 : 외부 메시징 시스템과의 통합을 담당하는 구성 요소이다. 대상 바인딩 : 외부 메시징 시스템과 최종 사용자가 제공하는 애플리케이션 코드(생산자/소비자) 사이를 연결한다. 메시지 : 생산자와 소비자가 대상 바인더(및 외부 메시징 시스템을 통한 다른 응용 프로그램)와 통신하는 데 사용하는 표준 데이터 구조이다. Spring Cloud Stream은 Spring Integration의 메시지 처리 핵심 기능을 기반으로 사용한다.</description></item><item><title>Swagger</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/swagger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/swagger/</guid><description>Swagger 개요 Swagger는 Restful 서비스 사용시 구현된 서비스에 대한 문서화를 지원하는 도구이다.
설명 목적 Restful 서비스를 구현한 경우 해당 API서버가 어떤 스펙을 가지고 있고 어떤 데이터를 주고 받는지에 대한 문서작업은 꼭 필요하다. 하지만 이런 문서작업은 상당한 시간을 사용하여 작성하여야 하고 API서버의 스펙이 변경되면 문서도 수정해 주어야 하기 때문에 관리가 여간 어려운게 아니다. 따라서 API 서버의 서비스를 작성하는것외에 문서의 작성과 유지보수를 위해 많은 시간과 비용이 발생한다. Swagger는 이러한 Restful서비스의 문서작성과 유지보수에 대한 효율성을 높일수 있다.</description></item></channel></rss>