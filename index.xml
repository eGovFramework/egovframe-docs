<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>표준프레임워크 개발가이드</title><link>https://eGovFramework.github.io/egovframe-docs/</link><description>Recent content on 표준프레임워크 개발가이드</description><generator>Hugo -- gohugo.io</generator><language>ko</language><atom:link href="https://eGovFramework.github.io/egovframe-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>DataSource 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/data-source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/data-source/</guid><description>DataSource 서비스 개요 데이터베이스에 대한 연결을 제공하는 서비스이다. 다양한 방식의 데이터베이스 연결을 제공하고,이에 대한 추상화계층을 제공함으로써, 업무 로직과 데이터베이스 연결 방식 간의 종속성을 배제한다.
설명 Connection Provider 별 DataSource implementions Connection Provider별 Connection 객체를 얻기 위한 로직을 구현한 DataSource 구현체를 사용한다.
JDBCDataSource JDBC driver를 이용하여 Database Connection을 생성한다.
Configuration &amp;lt;bean id=&amp;#34;dataSource&amp;#34; class=&amp;#34;org.springframework.jdbc.datasource.DriverManagerDataSource&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;${driver}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;${dburl}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;${username}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;${password}&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; PROPERTIES 설 명 driverClassName JDBC driver class name설정 url Database에 접근하기 위한 JDBC URL username Database 접근하기 위한 사용자명 password Database 접근하기 위한 암호 Sample Source @Resource(name = &amp;#34;dataSource&amp;#34;) DataSource dataSource; @Resource(name = &amp;#34;jdbcProperties&amp;#34;) Properties jdbcProperties; boolean isHsql = true; @Test public void testJdbcDataSource() throws Exception { assertNotNull(dataSource); assertEquals(&amp;#34;org.</description></item><item><title>Exception Handling 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/exception-handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/exception-handling/</guid><description>Exception Handling 서비스 개요 전자정부 표준프레임워크 기반의 시스템 개발 시 Exception 처리, 정확히는 Exception별 특정 로직(후처리 로직이라고 부르기도 함)이 흐를 수 있도록 하여 Exception에 따른 적절한 대응이 가능하도록 하고자 하는데 목적이 있다. AOP의 도움을 받아 비즈니스 POJO와 분리되어 After throwing advice로 정의하였다. AOP 관련 내용은 AOP 모듈을 참조하길 바란다.
Exception에 대해 이야기 하겠다. Exception 발생 시 Exception 발생 클래스 정보와 Exception 종류가 중요하다. Exception 발생 클래스 정보와 Exception 종류는 모두 후처리 로직의 대상일지 아닐지를 결정하는 데 사용된다.</description></item><item><title>IoC Container</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container/</guid><description>IoC Container 개요 프레임워크의 기본적인 기능인 Inversion of Control(IoC) Container 기능을 제공하는 서비스이다.
객체의 생성 시, 객체가 참조하고 있는 타 객체에 대한 종속성을 소스 코드 내부에서 하드 코딩하는 것이 아닌, 소스 코드 외부에서 설정하게 함으로써, 유연성 및 확장성을 향상시킨다.
주요 개념 Inversion of Control(IoC) IoC는 Inversion of Control의 약자이다. 우리나라 말로 직역해 보면 &amp;ldquo;역제어&amp;quot;라고 할 수 있다. 제어의 역전 현상이 무엇인지 살펴본다.
기존에 자바 기반으로 어플리케이션을 개발할 때 자바 객체를 생성하고 서로간의 의존 관계를 연결시키는 작업에 대한 제어권은 보통 개발되는 어플리케이션에 있었다.</description></item><item><title>Naming 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/naming-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/naming-service/</guid><description>Naming Service 개요 Naming 서비스는 Java Naming and Directory Interface(JNDI) API를 이용하여 자원(Resource)를 찾을 수 있도록 도와주는 서비스이다. Naming 서비스를 지원하는 Naming 서버에 자원을 등록하여 다른 어플리케이션에서 사용할 수 있도록 공개하고, Naming 서버에 등록되어 있는 자원을 찾아와서 이용할 수 있게 한다.
주요 개념 Java Naming and Directory Interface(JNDI) Java Naming and Directory Interface(JNDI)는 Java 소프트웨어 클라이언트가 이름(name)을 이용하여 데이터 및 객체를 찾을 수 있도록 도와주는 디렉토리 서비스에 대한 Java API이다.</description></item><item><title>배치 실행환경 소개</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/intro/</guid><description>배치 실행환경 소개 개요 전자정부 표준프레임워크에서 대용량 데이터 처리 지원을 위해 작업 수행, 결과 관리, 스케줄링 관리 기능을 제공한다.
목표 배치 실행환경은 대용량 데이터 처리를 위한 기반 환경을 제공함으로써 배치 실행에 필요한 핵심 기능을 제공한다.
배치 실행환경 수행 과정 전자정부 표준프레임워크 실행환경에 추가된 배치 실행환경은 3-Tier(Run, Job, Application Tier)로 구성되며, 대용량 데이터 처리를 위한 기반 환경을 제공한다.
Run Tier Run Tier는 배치 응용 프로그램의 실행을 담당한다. 실행 방식에 따라 Scheduler, Http/Web service, CommandLine으로 나눌 수 있다.</description></item><item><title>Overview</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/intro/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/intro/overview/</guid><description>표준프레임워크 실행환경 소개 개요 표준프레임워크 실행환경은 응용SW의 구성기반으로서, 응용SW 실행 시 필요한 기본 기능을 제공하는 환경을 의미한다.
즉, 전자정부 업무 구현을 목적으로 개발된 프로그램이 사용자가 의도하는 대로 정상적으로 실행될 수 있도록 지원하는 재사용 가능한 서버 실행 모듈, SW구조의 집합을 의미 한다.
목표 전자정부 표준프레임워크 실행환경은 ‘전자정부 서비스의 품질향상 및 정보화 투자 효율성 향상’을 위해 개발프레임워크 실행환경 표준을 정립하고, 개발프레임워크 표준 적용을 통한 응용 SW의 표준화 및 품질과 재사용성 향상을 목표로 한다.</description></item><item><title>Restful 웹서비스 예제(Restful Web Service Example)</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/integration-layer/restful-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/integration-layer/restful-example/</guid><description>Restful 웹서비스 예제(Restful Web Service Example) 개요 Spring 3.0에서 새롭게 추가된 Restful 웹서비스 지원기능을 이용하여 주어진 데이터를 Restful 요청/응답을 통하여 화면 또는 각 파일 양식으로 출력시켜주는 기능의 예제이다. URL을 통하여 각 카테고리의 목록 또는 상세정보를 요청할 수 있으며, HTML, JSON, XML 형태의 출력을 지원한다.
설명 1. 해당 예제를 실행하면 Restful 웹서비스기능을 이용한 카테고리 관리페이지를 볼 수 있다. 2. [등록] 버튼을 누르면 카테고리 등록페이지를 호출하고 카테고리 등록이 가능하다. 3. 카테고리 관리페이지에서 [json으로 내보내기]버튼을 누르면 JSON형태로 카테고리목록을 출력한다.</description></item><item><title>Server Security Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/server-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/server-security/</guid><description>Server Security Service 개요 웹을 통해 데이터를 주고받는 업무를 진행할 경우, 보안상의 문제가 발생하기 쉽다.
Security Service는 웹을 통한 서비스 이용 시 발생할 수 있는 다양한 보안상의 취약점들을 사전에 인지하고 대응함으로써, 서비스의 안정성을 확보한다.
Security Service는 사용자 정보를 DB에서 관리하여 인증을 거쳐야만 접근할 수 있는 Authentication과 사용자 권한 정보를 계층화시켜서 화면 및 페이지, 또는 메소드에 접근할 수 있는 Authorization이 포함된다.
설명 Server Security Service는 Spring Framework의 Spring Security를 확장하여 구현하였으며, 사용자 인증정보 및 권한정보를 DB에서 관리하고, Spring Security의 UserDetails 인터페이스를 확장하여 세션정보를 담을 수 있다.</description></item><item><title>배치실행환경 예제 설치법</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-setup/</guid><description>배치실행환경 예제 설치법 설치 순서 기본순서 전자정부 표준프레임워크 홈페이지에서 배치실행환경 소스파일을 다운 받아 압축을 풀고, m2 이클립스가 설치되어 있다는 가정하에 설명한다.
실행환경 예제 다운로드
Package Explorer에서 오른쪽 마우스를 클릭하여 소스를 임포트한다. General&amp;gt;Existing Projects into Workspace를 선택하여 압축을 풀어놓은 폴더를 선택한다. 배치실행예제에서는 HSQL DB를 제공하고 있으며 runHsqlDB.cmd 파일을 실행시켜 DB를 기동시킨다. egovframework.brte.example\database\db 폴더에서 오른쪽 마우스를 클릭하여 Path Tools&amp;gt;Commands Line Shell을 선택한다. 명령프롬프트 창에 runHsqlDB를 입력하여 runHsqlDB.cmd 파일을 실행시킨다. ✔ Path Tools&amp;gt;Commands Line Shell을 선택할 수 없을 경우, 해당 프로젝트의 폴더에서 \database\db아래에 있는 runHsqlDB 파일을 클릭한다.</description></item><item><title>SpEL 예제(Spring Expression Language Example)</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer-core/spel-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer-core/spel-example/</guid><description>SpEL 예제(Spring Expression Language Example) 개요 Spring 3.0에 새롭게 추가된 SPeL 지원기능을 이용하여, JSP 파일상에서 Spring Expression Language를 사용하는 기능에 대한 예제를 제공한다. 이 예제에서는 입력된 데이터 값에 대하여 SPeL의 출력값 포맷팅 기능을 활용하여 출력값을 형식에 맞게 화면에 표시해주는 기능을 제공한다.
설명 1. 해당 예제를 실행하면 아래와 같은 예제페이지가 호출된다. 2. 이름란과 통장 잔액란에 각각 이름과 잔액을 입력하고 [확인]을 누른다. 3. SpEL을 적용하여 포맷팅을 적용한 값이 출력된다. 참고자료 SpEL 가이드</description></item><item><title>스프링 시큐리티 예제(Spring Security Example)</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer/spring-security-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer/spring-security-example/</guid><description>스프링 시큐리티 예제(Spring Security Example) 개요 Spring Security를 이용하여 로그인, 보안, 권한관리를 수행하는 기능에 대한 예제이다. 사용자의 로그인 및 권한 관리, 각 페이지에 대한 접근 및 출력 내용에 대한 통제등을 Spring Security 2.0.4를 이용하여 수행하며, 이에 대한 예제 기능을 제공한다.
설명 해당 예제를 실행하면 로그인이 가능한 페이지가 호출된다. [로그인] 버튼을 누르고 메인에 표시된 관리자 아이디와 패스워드를 이용하여 로그인한다. 환영메세지가 출력되고 게시판과 카테고리 관리에 접근이 가능하다. 로그인 하지않았거나 일반사용자 아이디로 로그인한 후 카테고리 관리에 접근하게 되면 미리 정의한 에러 페이지가 출력된다.</description></item><item><title>MVC 패턴의 구조와 장점</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet/</guid><description>Web Servlet 개요 MVC(Model-View-Controller) 패턴은 코드를 기능(역할)에 따라 Model, View, Controller 3가지 요소로 분리한다.
Model : 애플리케이션의 데이터와 비즈니스 로직을 담는 객체이다. View : Model의 정보를 사용자에게 표시한다. 하나의 Model을 다양한 View에서 사용할 수 있다. Controller : Model과 View의 중계 역할을 한다. 사용자의 요청을 받아 Model에 변경된 상태를 반영하고, 응답을 위한 View를 선택한다. MVC 패턴은 UI 코드와 비즈니스 코드를 분리함으로써 종속성을 줄이고, 재사용성을 높이고, 보다 쉬운 변경이 가능하도록 한다.
MVC 패턴이 Web Framework에만 사용되는 단어는 아니지만, 표준프레임워크에서 “MVC 서비스”란 MVC 패턴을 활용한 Web MVC Framework를 의미한다.</description></item><item><title>데이터 엑세스 예제(Data Access Example)</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/persistence-layer/dataaccess-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/persistence-layer/dataaccess-example/</guid><description>데이터 엑세스 예제(Data Access Example) 개요 iBatis를 사용하여 Database에 데이터를 조회, 생성, 수정, 삭제하는 기능에 대한 예제를 제공한다. SQL Mapping을 통하여 쿼리 및 데이터 매핑을 정의하고, 스프링의 Data Source를 사용하여 Connection을 획득한 뒤, DAO 클래스에서 주어진 메소드를 사용하여 CRUD 작업을 수행한다. 조회 결과를 화면에 출력하거나 화면에서 작성된 입력 내용을 데이터베이스에 반영하는 기능의 예제를 제공한다.
설명 해당 예제를 설치하고 실행하면 iBatis로 구현한 공시게시판이 나타난다. [등록] 버튼을 눌러 공시 등록페이지를 호출하고, 내용을 작성한다.</description></item><item><title>Architecture</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/server-security-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/server-security-architecture/</guid><description>Architecture 개요 전자정부 개발프레임워크의 Spring Security 기본구조와 기본 환경 설정을 설명한다.
전자정부 개발프레임워크의 Server Security는 컨테이너 기동시 적용되는 XML기반 인증이 아닌 실시간 적용되는 DB기반의 JDBC 인증을 사용한다.
설명 Spring Security 아키텍처 웹어플리케이션 인증절차 리소스 요청
요청에 대해 보호되고 있는 자원인지 판단
아직 인증이 안되었으므로 HTTP 응답코드(오류) 또는 특정 페이지로 redirect
인증 메커니즘에 따라 웹 페이지 로그인 폼 또는 X509 인증서
입력 폼의 내용을 HTTP post 또는 인증 세부사항을 포함하는 HTTP 헤더를 서버로 요청</description></item><item><title>IoC Container Basics</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-basics/</guid><description>Basics 개요 Spring Framework에서 객체가 생성자 인수, 팩토리 메서드에 대한 인수 또는 객체 인스턴스가 생성되거나 팩토리 메서드에서 반환된 후 객체 인스턴스에 설정된 속성을 통해서만 종속성(함께 작업하는 다른 객체)을 정의하는 프로세스를 제어의 역전(Inversion of Control, IoC)라고 한다. 의존성 주입(Dependency Injection, DI)은 모듈간의 의존성을 모듈의 외부 컨테이너 에서 주입시켜주는 기능으로 IoC의 한 종류이다.
설명 Spring Framework에서 Bean은 어플리케이션을 구성하고, IoC Container에 의해 관리되어지는 객체로 간단히 말해 IoC Container에 의해 객체화되고, 조립되고, 또는 관리되는 객체를 의미한다.</description></item><item><title>Spring MVC Architecture</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-spring-mvc-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-spring-mvc-architecture/</guid><description>Spring MVC Architecture 개요 Spring Framework은 간단한 설정만으로 Struts나 Webwork같은 Web Framework을 사용할 수 있지만, 자체적으로 MVC Web Framework을 가지고 있다. Spring MVC는 기본요소인 Model, View, Controller 외에도, 아래와 같은 특성을 가지고 있다.
DispatcherServlet, HandlerMapping, Controller, Interceptor, ViewResolver, View등 각 컴포넌트들의 역할이 명확하게 분리되어 있다. HandlerMapping, Controller, View등 컴포넌트들에 다양한 인터페이스 및 구현 클래스를 제공함으로써 경우에 따라 선택하여 사용할 수 있다. Controller(@MVC)나 폼 클래스(커맨드 클래스) 작성시에 특정 클래스를 상속받거나 참조할 필요 없이 POJO 나 POJO-style의 클래스를 작성함으로써 비지니스 로직에 집중한 코드를 작성할 수 있다.</description></item><item><title>SQLite</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-sqllite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-sqllite/</guid><description>SQLite 개요 배치 처리시 경량화된 Repository를 사용을 위한 SQLite 처리를 지원한다.
설명 SQLite pom.xml 설정 sqlite 라이브러리 사용을 위해 dependency를 추가 한다.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.xerial&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sqlite-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; SQLite 사용 SQLite 사용을 위해 데이터베이스 설정을 하고 repository 생성을 위한 기초데이터를 설정 한다.
&amp;lt;!-- SQLite database 설정 --&amp;gt; &amp;lt;bean id=&amp;#34;dataSource&amp;#34; class=&amp;#34;org.springframework.jdbc.datasource.DriverManagerDataSource&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;org.sqlite.JDBC&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;jdbc:sqlite:repository.sqlite&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;!-- SQLite 기초데이터 설정 --&amp;gt; &amp;lt;jdbc:initialize-database data-source=&amp;#34;dataSource&amp;#34;&amp;gt; &amp;lt;jdbc:script location=&amp;#34;org/springframework/batch/core/schema-drop-sqlite.</description></item><item><title>Data Access 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-ibatis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-ibatis/</guid><description>Data Access 서비스 개요 Data Access 서비스는 다양한 데이터베이스 솔루션 및 데이터베이스 접근 기술에 일관된 방식으로 대응하기 위한 서비스로서,데이터를 조회하거나 입력, 수정, 삭제하는 기능을 수행하는 메커니즘을 단순화한다. 또한 데이터베이스 솔루션이나 접근 기술이 변경될 경우에도 데이터를 다루는 시스템 영역의 변경을 최소화할 수 있도록 데이터베이스와의 접점을 추상화하며, 추상화된 데이터 접근 방식을 템플릿(Template)으로 제공함으로써, 개발자들의 업무 효율을 향상시킨다.
iBATIS 프레임워크 전자정부 프레임워크에서는 JDBC 를 사용한 Data Access 를 추상화하여 간편하고 쉽게 사용할 수 있는 Data Mapper framework 인 iBATIS 를 Data Access 기능의 기반 오픈 소스로 채택하였다.</description></item><item><title>Integration 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/integration-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/integration-service/</guid><description>Integration 서비스 개요 Integration 서비스는 전자정부 개발프레임워크 기반의 시스템이 타 시스템과의 연계를 위해 사용하는 Interface의 표준을 정의한 것이다.
설명 목적 기존의 전자정부 시스템은 타 시스템과의 연계를 위해 연계 솔루션을 사용하거나 자체 개발한 연계 모듈을 사용해왔다. 기존에 사용된 연계 솔루션 및 자체 연계 모듈은 각각 고유한 설정 및 사용 방식을 가지고 있어, 동일한 연계 서비스라 할지라도 사용하는 연계 모듈에 따라 각기 다른 방식으로 개발되어 왔다. 본 Integration 서비스는 이러한 중복 개발을 없애고, 표준화된 설정 및 사용 방식을 정의하여 개발 효율성을 제고한다.</description></item><item><title>ORM 예제(ORM Example)</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/persistence-layer/orm-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/persistence-layer/orm-example/</guid><description>ORM 예제(ORM Example) 개요 Hibernate를 사용한 ORM 기능의 예제를 제공한다. 별도의 쿼리문을 정의하지 않고, 객체와 테이블간의 Mapping을 정의하여 순수 자바 코드를 사용하여 자료의 조회, 생성, 수정, 삭제를 수행하는 기능을 제공한다. 일반적인 게시판 형식의 예제이지만 Hibernate를 활용하여 데이터의 입출력이 어떻게 이루어지는지 확인할 수 있다.
설명 해당 예제를 설치하고 실행하면 Hibernate를 사용한 카테고리관리 페이지가 나타난다. [등록] 버튼을 눌러 카테고리 등록 페이지를 호출하여 카테고리를 등록 할 수 있다. 등록된 카테고리코드를 클릭하여 카테고리를 수정하거나 삭제할 수 있다.</description></item><item><title>OXM 예제(OXM Example)</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer/marshalling-unmarshalling-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer/marshalling-unmarshalling-example/</guid><description>OXM 예제(OXM Example) 개요 객체와 XML간의 Mapping을 이용하는 Object-XML Mapping (OXM) 기능에 대한 예제를 제공한다. 이 예제는 주어진 데이터를 XML으로 변화하여 사용자에게 제공하며, 사용자는 브라우저를 통하여 해당하는 XML 파일을 확인할 수 있다.
설명 해당 예제를 설치하고 실행하면 상품목록 페이지가 호출된다. [xml] 버튼을 누르면 상품목록을 XML파일로 다운받을 수 있다. 참고자료 Marshalling/Unmarshalling 가이드</description></item><item><title>배치 Runner 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-batch_runner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-batch_runner/</guid><description>배치 Runner 예제 개요 배치 수행에 사용되는 EgovBatchRunner의 사용법을 보여주는 예제이다. 비동기 방식으로 실행하는 Job의 시작, 정지, 재시작 방법을 보여준다.
설명 설정 EgovBatchRunner 설정 EgovBatchRunner의 설정 방법은 배치 Runner를 참고한다.
Launcher 설정 배치 Runner 예제의 Job 설정 파일인 batchRunnerTest.xml을 확인한다.
본 예제에서는 비동기 방식으로 Job을 수행한다. 이를 위해 JobLauncher의 TaskExecutor에 SimpleAsyncTaskExecutor 클래스를 지정한다.
&amp;lt;bean id=&amp;#34;jobLauncher&amp;#34; class=&amp;#34;org.springframework.batch.core.launch.support.SimpleJobLauncher&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;jobRepository&amp;#34; ref=&amp;#34;jobRepository&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;taskExecutor&amp;#34;&amp;gt; &amp;lt;bean class=&amp;#34;org.springframework.core.task.SimpleAsyncTaskExecutor&amp;#34;/&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; Job 설정 배치 Runner 예제의 Job 설정 파일인 batchRunnerTest.</description></item><item><title>Spring Web Flow(SWF) 개요</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/spring-web-flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/spring-web-flow/</guid><description>Spring Web Flow 개요 Spring Web Flow(SWF)는 웹 애플리케이션 내 페이지 흐름(flow)의 정의와 수행에 집중하는 Spring 프레임워크 웹 스택의 컴포넌트이다.
시스템은 다른 위치에서 재사용될 수 있는 자족적 모듈처럼 웹 애플리케이션의 논리적 흐름(flow)을 획득하는 것을 허용한다.
이러한 흐름(flow)은 비즈니스 프로세스의 구현을 통해 단일 사용자를 안내하고 단일 사용자 대화를 표현한다.
흐름(flow)은 종종 HTTP 요청을 처리하고 상태를 가지며, 트랜잭션 특성을 보이고 동적이고/이거나 장시간 구동될 수 있다.
Spring Web Flow는 추상화의 좀 더 높은 레벨에 존재하고 Struts, Spring MVC, Portlet MVC, 그리고 JSF와 같은 기본 프레임워크 내에서 자족적인 페이지 흐름(flow) 엔진(page flow engine)처럼 통합된다.</description></item><item><title>Authentication</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/server-security-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/server-security-authentication/</guid><description>Authentication 개요 허락된 사용자에게만 공개되는 컨텐츠(정보 또는 기능)에 접근하기 위해 반드시 아이디와 암호를 입력하는 로그인 과정을 거치는데 이러한 과정이 인증(authentication)이다.
즉, 인증은 특정 사용자가 유효한 사용자인지를 판단하는 과정을 의미한다.
본 가이드에서는 인증을 위한 기본적인 환경 및 전자정부 표준프레임워크에서 사용된 인증 방법을 설명한다.
설명 전자정부 표준프레임워크의 인증은 XML기반의 인증이 아닌 DB기반의 JDBC인증을 사용한다.
기본적인 인증 메커니즘은 인증 주체가 인증을 시도하는 초기에 오직 한 번만 인증 메커니즘이 사용되며 그 이후로는 인증 메커니즘이 정보를 필터에 유지하여 요구되는 요청을 필터 체인상의 다음 필터로 전달하기만 한다.</description></item><item><title>Dependencies</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-dependencies/</guid><description>Dependencies 개요 일반적인 엔터프라이즈 애플리케이션은 단일 객체(또는 Spring 용어로 빈)로만 이루어지지 않고 간단한 애플리케이션도 최종 사용자에게 일관된 사용자 경험을 제공하기 위해 여러 객체가 함께 작동한다. 이러한 객체들은 독립적으로 존재하며, Spring 프레임워크를 사용하여 각각의 빈으로 정의된다. 여기서는 독립적으로 정의된 여러 빈들이 협업하여 목표를 달성하는 방법에 대해 설명한다.
설명 종속성 삽입(Injecting dependencies) 종속성 삽입(Dependency Injection(DI))의 기본적인 원칙은 객체는 단지 생성자나 set 메소드를 통해서만 종속성(필요로 하는 객체)를 정의한다는 것이다.
그러면 Container는 Bean 객체를 생성할 때, Bean이 정의한 종속성을 추가하게 되는데 이는 Bean이 스스로 필요한 객체를 생성하거나 찾는 등의 제어를 가지는 것과는 반대의 개념으로 Inversion of Control(IoC)라고 부른다.</description></item><item><title>DispatcherServlet</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-dispatcherservlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-dispatcherservlet/</guid><description>DispatcherServlet 개요 Spring MVC Framework의 유일한 Front Controller인 DispatcherServlet은 Spring MVC의 핵심 요소이다. DispatcherServlet은 Controller로 향하는 모든 웹요청의 진입점이며, 웹요청을 처리하며, 결과 데이터를 Client에게 응답 한다. DispatcherServlet은 Spring MVC의 웹요청 Life Cycle을 주관한다 할 수 있다.
설명 DispatcherServlet에서의 웹요청 흐름 Client의 웹요청시에 DispatcherServlet에서 이루어지는 처리 흐름은 아래와 같다. 좀더 자세한 처리 흐름을 알고 싶다면 디버깅모드로 과정을 추적해 보는 것을 권장한다.
doService 메소드에서부터 웹요청의 처리가 시작된다. DispatcherServlet에서 사용되는 몇몇 정보를 request 객체에 담는 작업을 한 후 doDispatch 메소드를 호출한다.</description></item><item><title>iBATIS Configuration</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-ibatis_configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-ibatis_configuration/</guid><description>iBATIS Configuration iBATIS 의 메인 설정 파일인 SQL Map XML Configuration 파일(이하 sql-map-config.xml 설정 파일) 작성과 상세한 옵션 설정에 대해 알아본다.
sql-map-config.xml SqlMapClient 설정관련 상세 내역을 제어할 수 있는 메인 설정 파일로 주로 transaction 관리 관련 설정 및 다양한 옵션 설정, Sql Mapping 파일들에 대한 path 설정 등을 포함한다.
Sample Configuration &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE sqlMapConfig PUBLIC &amp;#34;-//ibatis.apache.org//DTD SQL Map Config 2.0//EN&amp;#34; &amp;#34;http://ibatis.apache.org/dtd/sql-map-config-2.dtd&amp;#34;&amp;gt; &amp;lt;sqlMapConfig&amp;gt; &amp;lt;properties resource=&amp;#34;META-INF/spring/jdbc.properties&amp;#34; /&amp;gt; &amp;lt;settings cacheModelsEnabled=&amp;#34;true&amp;#34; enhancementEnabled=&amp;#34;true&amp;#34; lazyLoadingEnabled=&amp;#34;true&amp;#34; maxRequests=&amp;#34;128&amp;#34; maxSessions=&amp;#34;10&amp;#34; maxTransactions=&amp;#34;5&amp;#34; useStatementNamespaces=&amp;#34;false&amp;#34; defaultStatementTimeout=&amp;#34;1&amp;#34; /&amp;gt; &amp;lt;typeHandler javaType=&amp;#34;java.</description></item><item><title>Logback logging</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-support-logback_logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-support-logback_logging/</guid><description>Logback logging 개요 배치 처리시 로깅 처리를 위해 log4j2를 지원하고 있지만 경량화된 로깅 처리를 위해 Logback 로깅 처리를 지원한다
설명 Logback pom.xml 설정 log4j, commons-logging 관련 라이브러리를 exclusion 처리하고, Logback 라이브러리를 등록한다.
&amp;lt;!-- log4j 관련 exclusion --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;egovframework.rte&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;egovframework.rte.bat.core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${egovframework.rte.version}&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;log4j-core&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;log4j-slf4j-impl&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;log4j-over-slf4j&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;commons-logging&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;commons-logging&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- commons-logging 관련 exclusion --&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;commons-logging&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;commons-logging&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;!-- logback 관련 라이브러리 등록 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;ch.</description></item><item><title>Integration 서비스 Metadata</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/integration-service-metadata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/integration-service-metadata/</guid><description>Metadata 개요 Integration 서비스 Metadata는 연계에 필요한 정보를 정의하고 있다. 본 장은 실제 Integration 서비스로 구현된 연계 Adaptor를 사용하는 방식에 직접적인 도움을 주지는 않는다. 실제 사용법은 연계 서비스 API에서 설명하고 있다. 단, 연계 서비스 API의 핵심 Interface인 EgovIntegrationService의 단위에 해당하는 연계등록정보와, 이와 관련된 기관, 시스템, 서비스 등의 Metadata를 이해하는 것은 API 사용에 도움이 될 수 있다.
설명 논리모델 Integration 서비스 Metadata의 논리모델은 연계를 위해 필요한 논리적인 정보를 정의한다.
논리ERD Integration 서비스 Metadata의 논리ERD 및 Entity 설명은 다음과 같다.</description></item><item><title/><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-getting-started/</guid><description/></item><item><title>이벤트알림 템플릿(Template) 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-event_notice_template_mgmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-event_notice_template_mgmt/</guid><description>이벤트알림 템플릿(Template) 예제 개요 전자정부 표준프레임워크의 배치 수행중 특정시점에 이벤트가 발생하는 경우 EventNoticeTrigger를 활용하여 SMS, Email 등을 통해 사용자가 설정한 관련정보를 발신하는 과정을 보여주는 예제이다. EgovEventNoticeTriggerFunctionalTests 예제는 일반 파일을 처리하는 과정에서 특정시점(Step 수행 시)에 배치수행과 관련한 내용을 Email로 보내주는 과정을 보여주는 과정을 보여준다.
설명 설정 Job 설정 이벤트알림 템플릿(Template) 예제의 Job 설정 파일인 eventNoticeTriggerJob.xml을 확인한다.
Job 의 구성을 보면 기본적인 설정 외에 를 통해 EgovEventNoticeCallListener를 호출하도록 설정되어 있고, 관련 클래스인 EgovEventNoticeCallProcessor와 EgovEmailEventNoticeTrigger는 빈으로 등록되어 있다.</description></item><item><title>Mail 서비스 예제(Mail Service Example)</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer/mail-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer/mail-example/</guid><description>메일 서비스 예제(Mail Service Example) 개요 전자정부 표준프레임워크를 이용하여 메일을 발송하는 기능에 대한 예제이다. 사전에 정의된 property를 이용하여 메일 서버를 정의하고, 자바 코드를 이용하여 예제 메일을 발송한다.
설명 해당 예제를 설치하고 실행하면 다음과 같은 메일보내기가 가능한 페이지가 호출된다. 이름과 이메일란을 작성하고 [메일보내기]를 클릭한다. 성공적으로 메일이 발송되면 성공 메세지를 출력한다. 참고 자료 Mail 서비스 Property 서비스</description></item><item><title>Spring Web Flow의 Hello World 예제</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-getting-started-hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-getting-started-hello-world/</guid><description>Hello, World 개요 처음으로 접하므로 여기서는 Hello World를 찍어 보면서 실행하는 것을 살펴보도록 하겠다. Hello World는 두 가지 버전으로 입력되는 값이 없이 단지 Hello, Web Flow 화면을 호출하는 것과 입력값을 가지고 분기 처리 등 서비스 메소드를 실행 후 결과를 화면으로 보여주는 버젼으로 나누어 설명하겠다. 실행하여 보고자 하는 화면 결과는 아래와 같다.
설명 Spring Web Flow는 사용자와 Service를 제공하는 서버 간의 대화하듯한 화면의 이동을 정의하는 것이다. SWF(Spring Web Flow)는 사용자와 화면 간의 대화 형태로 웹 대화형 시나리오를 중심으로 접근한다.</description></item><item><title>연계 서비스 API</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/integration-service-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/integration-service-api/</guid><description>연계 서비스 API 개요 연계 서비스 API는 연계 서비스를 사용 및 제공하기 위한 interface를 제공한다.
설명 구성 연계 서비스 API는 다음과 같이 구성된다.
구성요소 설명 EgovIntegrationContext 연계 서비스에 대한 설정 및 EgovIntegrationService 객체를 관리한다. EgovIntegrationMessage 연계 서비스를 통해 주고받는 표준 메시지를 정의한다. EgovIntegrationMessageHeader 연계 서비스를 통해 주고받는 표준 메시지 헤더를 정의한다. EgovIntegrationMessageHeader::ResultCode 연계 서비스 결과 코드를 담고 있는 enumeration이다. EgovIntegrationService 연계 서비스를 호출하기 위해 사용한다. EgovIntegrationResponse 연계 서비스를 비동기 방식으로 호출한 경우, 응답 메시지를 받기 위해 사용한다.</description></item><item><title>Authorization</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/server-security-authorization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/server-security-authorization/</guid><description>Authorization 개요 웹 사이트에 존재하는 모든 사용자들은 사이트 정책에 따라 그 부류 별로 컨텐츠에 대한 접근이 제한 되는데 이것을 권한 부여(authorization)라 한다. 즉, 권한은 특정 사용자가 웹 사이트에서 제공하는 컨텐츠(정보 또는 기능)에 접근 가능한지를 판단하는 과정을 의미한다.
설명 Authorization은 XML 또는 DB에서 권한을 관리하며 계층적 권한을 지원한다.
Server Security에서는 Filter Security Interceptor에 의해 처리되며, DB로부터 권한 정보를 처리하기 위해 다음과 같이 설정된다.
&amp;lt;http ...&amp;gt; ... &amp;lt;!-- for authorization --&amp;gt; &amp;lt;custom-filter before=&amp;#34;FILTER_SECURITY_INTERCEPTOR&amp;#34; ref=&amp;#34;filterSecurityInterceptor&amp;#34;/&amp;gt; &amp;lt;/http&amp;gt; &amp;lt;beans:bean id=&amp;#34;filterSecurityInterceptor&amp;#34; class=&amp;#34;org.</description></item><item><title>Bean Scopes</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-bean_scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-bean_scope/</guid><description>Bean scope 개요 Bean 정의는 실제 Bean 객체를 생성하는 방식을 정의하는 것으로 Class와 마찬가지로 하나의 Bean 정의에 해당하는 다수의 객체가 생성될 수 있다.
Bean 정의를 통해 객체에 다양한 종속성 및 설정값을 주입할 수 있을 뿐 아니라, 객체의 범위(Scope)를 정의할 수 있다.
설명 Spring 프레임워크는 6개의 Scope를 지원하며, 이 중 4개의 Scope는 Web-aware ApplicationContext를 사용하는 경우에만 사용할 수 있다. 또한, 사용자 정의 범위를 생성할 수도 있다.
Scope 설명 singleton 하나의 Bean 정의에 대해서 Spring IoC Container 내에 단 하나의 객체만 존재한다.</description></item><item><title>HandlerMapping</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-handlermapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-handlermapping/</guid><description>HandlerMapping 개요 DispatcherServlet에 Client로부터 Http Request가 들어 오면 HandlerMapping은 요청처리를 담당할 Controller를 mapping한다. Spring MVC는 interface인 HandlerMapping의 구현 클래스도 가지고 있는데, 용도에 따라 여러 개의 HandlerMapping을 사용하는 것도 가능하다. 빈 정의 파일에 HandlerMapping에 대한 정의가 없다면 Spring MVC는 기본(default) HandlerMapping을 사용한다.
기본 HandlerMapping은 BeanNameUrlHandlerMapping이며, jdk1.5 이상의 실행환경일 때, Spring 3.1이후 버전이면(egov 3.0부터) RequestMappingHandlerMapping가 기본 HandlerMapping이며, Spring 3.1이전 버전이면(egov 3.0이전 버전) DefaultAnnotationHandlerMapping가 기본 HandlerMapping이다. (DefaultAnnotationHAndlerMapping은 3.1부터 deprecated되고 RequestMappingHandlerMapping으로 대체됨)
설명 BeanNameUrlHandlerMapping, SimpleUrlHandlerMapping 등 주요 HandlerMapping 구현 클래스는 상위 추상 클래스인 AbstractHandlerMapping과 AbstractUrlHandlerMapping을 확장하기 때문에 이 추상클래스들의 프로퍼티를 사용한다.</description></item><item><title>Spring-iBATIS Integration</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-spring_ibatis_integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-spring_ibatis_integration/</guid><description>Spring-iBATIS Integration Spring 프레임워크는 iBATIS SQL Map 을 이미 잘 통합하고 있으며, JDBC/Hibernate 에 대한 연동과 동일하게 template 스타일 프로그래밍이 가능토록 지원한다. 이러한 지원으로 Spring 의 특징인 IoC 의 장점과 Exception 계층 구조의 처리가 iBATIS 통합 환경에서도 쉽게 사용되고 있으며, iBATIS 단독 사용 시에 트랜잭션 관리 및 DataSource 에 대한 설정 및 관리가 별도로 필요했던 것에 비해 Spring-iBATIS 통합 환경에서는 Spring 의 유연한 트랜잭션 처리와 dataSource 를 그대로 사용할 수 있다.</description></item><item><title>배치 템플릿을 이용한 EgovCommandLineRunner 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-core-egov_commandline_runner_template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-core-egov_commandline_runner_template/</guid><description>배치 템플릿을 이용한 EgovCommandLineRunner 예제 개요 CommandLine 배치 템플릿 프로젝트를 이용하여 EgovCommandLineRunner의 사용법을 보여주는 예제이다.
설명 설정 CommandLine 배치 템플릿 프로젝트 생성 아래를 참고하여 File(SAM) / DB 타입의 CommandLine 배치 템플릿 프로젝트 를 생성한다.
File(SAM)타입 DB타입 CommandLine 배치 템플릿 전체 설정 CommandLine 배치 템플릿 설정 파일인 context-commandline.xml을 확인한다.
✔ CommandLine 배치 템플릿 실행에 필요한 xml 정보가 기술되어 있다.
✔ Job 관련 xml의 경우 특정 폴더 밑에 Job당 하나의 xml 파일로 나누어져 있다.</description></item><item><title>Job</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job/</guid><description>Job 개요 Job은 배치작업 전체의 중심 개념으로 배치작업 자체를 의미한다. Job은 실제 프로세스가 진행되는 Step 들을 최상단에서 포함하고 있으며, Job의 실행은 배치작업 전체의 실행을 의미한다.
설명 Job은 배치작업 과정 전체를 캡슐화하는 개념이며, 전체 계층 구조의 최상단이다. 특정 Job은 각각의 JobParameters에 따라 JobInstance를 생성하며, 한번의 Job 시도마다 JobExecution을 생성한다. Job은 반드시 한개 이상의 Step으로 구성된다. 아래 그림을 보면, &amp;lsquo;EndOfDay&amp;rsquo;라는 Job이 있고 &amp;lsquo;2012/10/01&amp;rsquo;이라는 JobParameter를 통해 JobInstance가 생성되었다. 그리고 &amp;lsquo;EndOfDay&amp;rsquo; Job의 첫번째 시도를 의미하는 JobExecution이 생성되는 것을 볼 수 있다.</description></item><item><title>압축/압축해제 예제(Compress/Decompress Example)</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer/compress-decompress-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer/compress-decompress-example/</guid><description>압축/압축해제 예제(Compress/Decompress Example) 개요 전자정부 표준프레임워크 상에서 서버상에 존재하는 특정 파일을 압축하거나 압축 해제하는 기능에 대한 예제를 제공한다. 서버상에서 지정된 파일을 zip 파일로 압축하고, 이를 다시 압축 해제하는 기능을 controller 상에서 수행하는 기능을 제공한다.
설명 해당 예제를 실행하고 성공메세지를 확인한다. 실행에 성공하면 테스트파일을 압축해 C:\egovCompressSample.zip 형태로 압축된다. [압축해제]를 누르고 성공메세지를 확인한다. 압축해제가 성공하면 C:\egovCompressSample폴더에 압축해제된 파일이 생성되어 있다. 참고자료 Compress/Decompress 서비스</description></item><item><title>Customizing the nature of a Bean</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-customizing_the_nature_of_a_bean/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-customizing_the_nature_of_a_bean/</guid><description>Customizing the nature of a bean 개요 컨테이너의 빈 라이프사이클 관리와 상호 작용하기 위해 Spring InitializingBean 및 DisposableBean 인터페이스를 구현할 수 있는데, 컨테이너는 전자의 경우 afterPropertiesSet()을 호출하고 후자의 경우 destroy()를 호출하여 빈이 초기화 및 소멸될 때 특정 작업을 수행하도록 한다.
설명 Lifecycle callbacks Spring Framework는 Container 내부의 bean의 행동을 변화시길 수 있는 다양한 callback interface를 제공한다.
객체화 callbacks(Initialization callbacks) org.springframework.beans.factory.InitializingBean interface를 구현하면 bean에 필요한 모든 property를 설정한 후, 초기화 작업을 수행한다.</description></item><item><title>iBATIS에서의 Data Type 매핑</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-data_type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-data_type/</guid><description>Data Type 어플리케이션을 작성할 때 Data Type 에 대한 올바른 사용과 관련 처리는 매우 중요하다. 특히 데이터베이스를 이용하여 데이터를 저장하고 조회할 때 Java 어플리케이션에서의 Type 과 DBMS 에서 지원하는 관련 매핑 jdbc Type 의 정확한 사용이 필요하며, 여기에서는 iBATIS 환경에서 javaType 과 특정 DBMS 의 jdbcType 의 적절한 매핑 사용예를 중심으로 일반적인 Data Type 의 사용 가이드를 참고할 수 있도록 한다.
기본 Data Type 사용 방법 iBATIS SQL Mapper 프레임워크는 Java 어플리케이션 영역의 표준 JavaBeans 객체(또는 Map 등)의 각 Attribute 에 대한 Java Type 과 JDBC 드라이버에서 지원하는 각 DBMS의 테이블 칼럼에 대한 Data Type 의 매핑을 기반으로 parameter / result 객체에 대한 바인딩/매핑 을 처리한다.</description></item><item><title>Job Variable</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job_variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job_variable/</guid><description>Job Variable 개요 변수 선언 후 Job Listeners를 통해서 모든 Job에서 사용자 정의 변수를 사용할 수 있도록 EgovJobVariableListener를 통해서 지원한다.
사용자가 변수를 정의하여 여러 job에서 해당 변수를 공유하여 사용 가능한 기능으로 이루어져있다.
설명 Job Variable 설정 배치실행환경에서 제공하는 EgovJobVariableListener 사용하여 사용자 정의 변수를 설정한다.
&amp;lt;bean id=&amp;#34;egovJobVariableListener&amp;#34; class=&amp;#34;egovframework.rte.bat.support.EgovJobVariableListener&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;pros&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;JobVariableKey1&amp;#34;&amp;gt;JobVariableValue1&amp;lt;/prop&amp;gt; &amp;lt;prop key=&amp;#34;JobVariableKey2&amp;#34;&amp;gt;JobVariableValue2&amp;lt;/prop&amp;gt; &amp;lt;prop key=&amp;#34;JobVariableKey3&amp;#34;&amp;gt;JobVariableValue3&amp;lt;/prop&amp;gt; &amp;lt;/props&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; job 설정 job 설정시 listener를 사용하여 공유변수 서비스를 설정한다.
&amp;lt;job id=&amp;#34;delimitedToDelimitedJob-JobVariable&amp;#34; parent=&amp;#34;eGovBaseJob&amp;#34; xmlns=&amp;#34;http://www.</description></item><item><title/><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-configuration/</guid><description/></item><item><title>Spring MVC Tag Configuration</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-spring-mvc-tag-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-spring-mvc-tag-configuration/</guid><description>Spring MVC Tag Configuration 개요 Spring 3부터 mvc태그를 통하여 Controller처리를 위한 설정을 쉽게 하도록 Spring mvc 네임스페이스를 제공한다.
mvc:annotation-driven mvc:interceptors mvc:view-controller 설명 mvc:annotation-driven Spring 3.0부터 제공하는 mvc 태그 설정이다. Annotation기반의 Controller호출 설정과 필요한 bean설정을 편리하게 하도록 만들어졌다. 그러나 내부 수정이 어렵기 때문에 mvc:annotation-driven에서 제공하는 기능에 대하여 잘 숙지하고 변경이 불가능 한 경우에는 mvc:annotation-driven을 쓰지 않고 필요한 bean을 수동으로 넣어줘야하는 경우도 있다. mvc:annotation-driven에서 쓰는 bean설정을 중복으로 쓰지 않도록 주의한다.
mvc:annotation-driven에서 제공하는 기능 RequestMappingHandlerMapping bean등록(기존 DefaultAnnotationHandlerMapping) RequestMappingHandlerAdapter bean등록(기존 AnnotationMethodHandlerAdapter) customArgumentResolvers, customReturnValueHandlers 추가 가능 JSR-303의 검증용 어노테이션(@Valid)를 사용할 수 있도록 LocalValidatorFactoryBean bean설정 (JSR-303지원 라이브러리 존재 시) RequestMappingHandlerAdapter의 messageConverters프로퍼티로 메시지 컨버터들 등록 (다음 설정과 동일한 동작을 한다.</description></item><item><title>설정 간소화</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/server-security-simplifying-settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/server-security-simplifying-settings/</guid><description>설정 간소화 개요 표준프레임워크 3.0부터 Server security에 대하여 설정을 간소화 할 수 있는 방법을 제공한다. 내부적으로 필요한 설정을 가지고 있고, XML Schema를 통해 필요한 설정만을 추가할 수 있도록 제공한다.
XML namespace 및 schema 설정 설정 간소화 기능을 사용하기 위해서는 다음과 같은 xml 선언이 필요하다. 4.1 &amp;gt; 4.2 업그레이드 시 xsd 변경(egov-security-4.1.0.xsd &amp;gt; egov-security-4.2.0.xsd)
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:egov-security=&amp;#34;http://maven.egovframe.go.kr/schema/egov-security&amp;#34; xmlns:security=&amp;#34;http://www.springframework.org/schema/security&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://maven.egovframe.go.kr/schema/egov-security http://maven.egovframe.go.kr/schema/egov-security/egov-security-4.2.0.xsd&amp;#34;&amp;gt; Security Config 설정 Security에 대한 기본 설정 정보를 제공한다.</description></item><item><title>배치 템플릿을 이용한 EgovSchedulerRunner 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-core-egov_scheduler_runner_template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-core-egov_scheduler_runner_template/</guid><description>배치 템플릿을 이용한 EgovSchedulerRunner 예제 개요 Scheduler 기반의 배치 템플릿 프로젝트를 이용하여 EgovSchedulerRunner의 사용법을 보여주는 예제이다.
설명 설정 Scheduler 배치 템플릿 프로젝트 생성 아래를 참고하여 File(SAM) / DB 타입의 Scheduler 배치 템플릿 프로젝트 를 생성한다.
File(SAM)타입 DB타입 Scheduler 배치 템플릿 전체 설정 Scheduler 배치 템플릿 설정 파일인 context-scheduler.xml을 확인한다.
✔ Scheduler 배치 템플릿 실행에 필요한 xml 정보와 Scheduler의 Trigger 정보가 기술되어 있다.
✔ Trigger에 jobDetail(JobDetailBean)과 cronExpression를 설정한다. 기본적으로 매 10초 주기로 jobDetail을 실행하도록 설정되어 있다.</description></item><item><title>UI 어댑터 예제(UI Adapter Example)</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/presentation-layer/ui-adaptor-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/presentation-layer/ui-adaptor-example/</guid><description>UI 어댑터 예제(UI Adapter Example) 개요 외부 UI 도구를 표준프레임워크에 활용하기 위하여 데이터를 주고 받기 위한 UI 어댑터에 대한 예제이다. 이 예제는 MiPlatform을 이용하여 화면을 구성하고 전자정부 표준프레임워크를 활용하여 해당 화면을 연결하여 기초적인 CRUD 작업을 수행하는 기능을 제공한다.
설명 참고자료</description></item><item><title>WebService</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/webservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/webservice/</guid><description>WebService 개요 WebService는 전자정부 개발프레임워크 Integration 서비스 표준에 따라 WebService를 요청하고 제공하기 위한 Library이다.
주요 개념 Web Services W3C는 Web Service를 “네트워크 상에서 발생하는 컴퓨터 간의 상호작용을 지원하기 위한 소프트웨어 시스템”으로 정의하고 있다. 일반적으로 Web Service는 인터넷과 같은 네트워크 상에서 접근되고, 요청된 서비스를 제공하는 원격 시스템에서 수행되는 Web APIs이다.
참조 : https://en.wikipedia.org/wiki/Web_service 사용 오픈소스 Apache CXF WebService는 Web Service 구현하기 위해서 Apache CXF를 사용한다.
설명 WebService는 Integration Service 표준에 따라 구현한 Library이므로, 본 장에서는 API 등의 사용 방식은 설명하지 않는다.</description></item><item><title>파일업로드 예제(File upload example)</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer/file-upload-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer/file-upload-example/</guid><description>파일업로드 예제(File upload example) 개요 Apache Commens FileUpload에서 제공하는 CommonsMultipartResolver를 사용한 예제이다.
설명 해당 예제를 실행하면 간단한 파일업로드 페이지가 호출된다. 선택버튼을 눌러 업로드할 이미지파일을 선택한다. 업로드버튼을 누르면 예제의 루트디렉토리에 있는 image폴더에 파일이 업로드되고 화면에 표시된다. 참고자료 File Upload/Downlowd 서비스 File Upload 서비스</description></item><item><title>Spring Web Flow 환경 설정</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-configuration-setting-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-configuration-setting-system/</guid><description>Spring Web Flow 환경 구성하기 Spring Web Flow를 사용하기 위한 Web 개발 환경에 대한 세팅을 설명한다.
설정 Spring Web Flow의 Flow 정의를 위한 XML 문서는 아래와 같은 Schema를 갖는다.
&amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:webflow=&amp;#34;http://www.springframework.org/schema/webflow-config&amp;#34; xsi:schemaLocation=&amp;#34; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/webflow-config http://www.springframework.org/schema/webflow-config/spring-webflow-config-2.0.xsd&amp;#34;&amp;gt; &amp;lt;!-- Setup Web Flow here --&amp;gt; &amp;lt;/beans&amp;gt; 기본적인 설정 Spring Web Flow를 사용하려면 FlowRegistry FlowExecutor를 설정해야 한다.
FlowRegistry는 등록될 시나리오에 따라 작성된 flow xml 을 가져오는 역할[1]을 수행한다. FlowExecutor는 등록된 flow 설정 xml을 실행[2]한다.</description></item><item><title>Controller</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-controller/</guid><description>Controller 개요 DispatcherServlet은 HandlerMapping를 이용해서 해당 요청을 처리할 Controller를 결정한다. 이 Controller는 요청에 대해서 처리를 하고 데이터를 Model 객체에 반영한다. Spring MVC는 다양한 종류의 Controller를 제공하는데, 데이터 바인딩이나 폼 처리 또는 멀티 액션등의 편의 기능을 제공한다. 이 Controller들은 org.springframework.web.servlet.mvc.Controller 인터페이스를 구현한 클래스들이다.(@Controller는 예외다. 여기서는 @Controller에 대한 설명은 제외한다.) eclipse에서 인터페이스 Controller를 Hierarchy View에서 열어보면 아래와 같은 구조를 보여준다.
이 중 주요 Controller의 용도 및 특징을 표로 나타내면 아래와 같다.
클래스 용도 및 특징 Controller 기본적인 Controller 인터페이스이다.</description></item><item><title>iBATIS parameterMap</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-parametermap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-parametermap/</guid><description>parameterMap parameterMap 은 해당 요소로 SQL 문 외부에 정의한 입력 객체의 속성에 대한 name 및 javaType, jdbcType 을 비롯한 옵션을 설정할 수 있는 매핑 요소이다. 이를 통해 JavaBeans 객체(또는 Map 등)에 대한 prepared statement 에 대한 바인드 변수 매핑을 처리할 수 있다. 유사한 기능을 처리하는 parameterClass 나 Inline Parameter 에 비해 많이 사용되지 않지만 더 기술적인(descriptive) parameterMap(예를 들어 stored procedure 를 위한) 이 필요하거나, XML 의 일관된 사용과 순수성을 지키고자 할때 좋은 접근법이 될 수도 있다.</description></item><item><title>Bean Definition Profiles</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-bean-definition-profiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-bean-definition-profiles/</guid><description>Bean Definition Profiles 개요 Bean의 Profile은 Spring f/w ver. 3.1부터 추가되었으며 동일한 id의 bean을 여러 개 정의하여 사용자의 설정으로 활성화시킨 Profile의 해당 bean이 Runtime시에 동작하도록 하는 기능이다. 보통 개발시점과 운영시점에 bean의 Profile설정 변경만으로 Spring Container에서 Bean적용이 달리 적용되도록 하는데 쓰인다.
Profile설정 시, 반드시 Profile을 활성화해야만 사용가능하다. 만약 Profile만 설정하고 활성화하지 않으면 Exeption(NoSuchBeanDefinitionException)이 발생한다.
설명 아래에서 Profile을 설정하는 방법과 Profile을 활성화(Active Profile)하는 방법에 대하여 알아본다.
Profile 설정 방법 Profile의 설정방법에는 XML설정과 Annotation설정으로 나뉜다.</description></item><item><title>Server Security 업그레이드</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/server-security-upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/server-security-upgrade/</guid><description>Server Security 업그레이드 개요 표준프레임워크 2.7(Spring Security 2.0.4)에서 3.0(Spring Security 3.2.3)로 업그레이드 Server security의 경우 설정 변경뿐만 아니라 소스 상의 변경 작업이 필요하다.
주요 변경내용 (Spring Security 부분) dependencies 및 패키지 변경 spring-security-core (org.springframework.security.core, org.springframework.security.access, etc.) spring-security-web (org.springframework.security.web) spring-security-config (org.springframework.security.config) API 변경 SpringSecurityException 삭제 ConfigAttributeDefinition ⇒ Collection SavedRequest : class ⇒ interface (DefaultSavedRequest 대체) 기타 다중 http elements 지원 stateless 인증 지원 DebugFilter 추가 (debugging용) hasPermission 표현식 지원 (authorize JSP tag) 등등 실행환경 부분 업그레이드 절차 1.</description></item><item><title>easycompany 예제 실행하기</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/presentation-layer/easycompany-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/presentation-layer/easycompany-example/</guid><description>easycompany 예제 실행하기 개요 EasyCompany 예제는 MVC와 Ajax Support, Security의 예제 코드로서, JDK 1.8, Eclipse 4.8.0, Tomcat 8.0, HSQLDB 2.3.2 환경에서 실행된다. 사원 리스트 페이지 확인은 SVN에서 프로젝트를 다운받아 DBMS(runHsqlDB.cmd)와 Tomcat을 실행 후 http://localhost:8080/easycompany 에 접속해 id/pwd: 1/1로 로그인하면 가능하다.
개발환경 JDK : JDK 1.8 Eclipse : 4.8.0 Web Container : Tomcat 8.0 DBMS : HSQLDB 2.3.2 설치 SVN에서 예제 코드 easycompany 프로젝트를 다운 받습니다.
이클립스에서 해당 프로젝트를 보면 아래와 같은 구조를 가지고 있습니다.</description></item><item><title>작업 전후처리 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-pre_post_process_mgmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-pre_post_process_mgmt/</guid><description>작업 전후처리 예제 개요 전자정부 표준프레임워크에서 배치 수행시, Core에서 제공하는 Processor 클래스를 이용하여 Job과 그 하위 구성요소인 Step, Chunk 전후에 적절한 선행/후행 처리 과정을 보여주는 예제이다.
설명 예제는 작업 전처리 과정을 보여주는 EgovPreProcessorFunctionalTests 와 작업 후처리 과정을 보여주는 EgovPostProcessorFunctionalTests로 구성되어 있다. 전처리, 후처리에 따른 일부 메소드명을 제외한 대부분의 설정과 내용이 같으므로 작업 전처리 예제(EgovPreProcessorFunctionalTests)위주로 설명한다.
설정 Job 설정 작업 전처리 예제의 Job 설정 파일인 preProcessorJob.xml을 확인한다.
작업 전처리 예제, 작업 후처리 예제에서는 &amp;lt;listener&amp;gt;를 적절히 이용하여 Pre/PostProcessor를 사용한다.</description></item><item><title>Restful</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/restful/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/restful/</guid><description>Restful 개요 Spring MVC를 통해 구현한 RESTful은 리소스에 대한 접근을 URI를 이용하며, HTTP의 PUT, GET, POST, DELETE 등과 같은 메소드의 의미를 그대로 사용하므로, 단순하게 접근 할 수 있다.
설명 web.xml 설정 &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;*.html&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;*.xml&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;*.json&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt;httpMethodFilter&amp;lt;/filter-name&amp;gt; &amp;lt;filter-class&amp;gt;org.springframework.web.filter.HiddenHttpMethodFilter&amp;lt;/filter-class&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;filter-mapping&amp;gt; &amp;lt;filter-name&amp;gt;httpMethodFilter&amp;lt;/filter-name&amp;gt; &amp;lt;url-pattern&amp;gt;/springrest/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/filter-mapping&amp;gt; 자세한 설명은 아래에 있다.
Request Mapping 설정
REST 스타일의 URL은 &amp;lsquo;/cgr’, &amp;lsquo;/cgr/CATEGORY-00000000001&amp;rsquo; 처럼 계층 구조로 사용가능하도록 설계되었다. 따라서 web.xml에 DispatcherServlet을 정의하고 매핑할 URL 패턴을 &amp;lsquo;/&amp;lsquo;로 지정해야한다.</description></item><item><title>Step</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-step/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-step/</guid><description>Step 개요 Step은 Job 내부에 구성되어 실제 배치작업 수행을 위해 작업을 정의하고 제어한다. 즉, Step에서는 입력 자원을 설정하고 어떤 방법으로 어떤 과정을 통해 처리할지 그리고 어떻게 출력 자원을 만들 것인지에 대한 모든 설정을 포함한다.
설명 Step은 Job의 독립적이고 순차적 단계를 캡슐화하는 도메인 객체다. 그러므로 모든 Job은 적어도 하나 이상의 Step으로 구성되며 Step에 실제 배치작업을 처리하고 제어하기 위해 필요한 모든 정보가 포함된다. 여러개의 Step 중 하나의 Step은 순차적으로 실행되는 과정 중 하나의 흐름으로 생각할 수 있다.</description></item><item><title>엑셀 예제(Excel Example)</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer/excel-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/foundation-layer/excel-example/</guid><description>엑셀 예제(Excel Example) 개요 데이터베이스에 저장된 내용을 화면에 출력하고, 해당 내용을 엑셀 파일로 내보내는 기능에 대한 예제이다. 사용자는 주어진 목록을 엑셀파일 형태로 다운로드 받을 수 있으며, 개발자는 엑셀 템플릿 형태로 양식을 정의하고 이에 맞추어서 데이터를 추가할 수 있다.
설명 해당 예제를 설치하고 실행하면 상품목록 페이지가 호출된다. [excel] 버튼을 누르면 상품목록을 excel파일로 다운받을 수 있다. 참고자료 Excel 서비스</description></item><item><title>Spring Web Flow와 Spring MVC 연동</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-configuration-with-spring-mvc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-configuration-with-spring-mvc/</guid><description>Spring Web Flow 와 MVC 연동 Spring Web Flow를 사용하여 웹을 개발할 때 Spring MVC와 연동하여 개발할 수 있다. 이를 위해 Spring MVC 연동 모듈 등을 설정해야 한다. 여기서는 booking-mvc sample( 실행데모(faces이지만 시나리오는 같음) )을 기준으로 설정하겠다.
설명 Spring MVC 와의 연동을 위해 우리는 web.xml 안에 있는 DispatcherServlet 설정을 보도록 하겠다.
web.xml 환경 구성 Spring MVC를 구성하는 첫 단계는 web.xml에 DispatcherServlet을 구성하는 것이다. DispatcherServlet은 웹 애플리케이션별 하나를 등록한다.
이 예제에서는 /spring/으로 시작하는 모든 요청을 받도록 설정하고 있다.</description></item><item><title>Annotation 기반 Controller</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-annotation-based-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-annotation-based-controller/</guid><description>Annotation-based Controller 개요 스프링 프레임워크는 2.5 버젼 부터 Java 5+ 이상이면 @Controller(Annotation-based Controller)를 개발할 수 있는 환경을 제공한다. 인터페이스 Controller를 구현한 SimpleFormController, MultiActionController 같은 기존의 계층형(Hierarchy) Controller와의 주요 차이점 및 개선점은 아래와 같다.
어노테이션을 이용한 설정 XML 기반으로 설정하던 정보들을 어노테이션을 사용해서 정의한다. 유연해진 메소드 시그니쳐 Controller 메소드의 파라미터와 리턴 타입을 좀 더 다양하게 필요에 따라 선택할 수 있다. POJO-Style의 Controller Controller 개발시에 특정 인터페이스를 구현 하거나 특정 클래스를 상속해야할 필요가 없다.</description></item><item><title>Bean Definition Inheritance</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-bean_definition_inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-bean_definition_inheritance/</guid><description>Bean definition inheritance 개요 Bean 정의는 많은 양의 설정 정보를 포함하고 있다. 자식 bean 정의는 부모 bean 정의로부터 설정 정보를 상속받은 bean 정의를 의미한다. 자식 bean 정의는 필요에 따라 부모 bean 정의로부터 상속받은 설정 정보를 덮어쓰거나 추가할 수 있다.
설명 XML 기반 설정에서는 자식 bean 정의에 &amp;lsquo;parent&amp;rsquo; attribute를 사용하여 상속관계를 정의할 수 있다.
&amp;lt;bean id=&amp;#34;inheritedTestBean&amp;#34; abstract=&amp;#34;true&amp;#34; class=&amp;#34;org.springframework.beans.TestBean&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;name&amp;#34; value=&amp;#34;parent&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;age&amp;#34; value=&amp;#34;1&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;inheritsWithDifferentClass&amp;#34; class=&amp;#34;org.springframework.beans.DerivedTestBean&amp;#34; parent=&amp;#34;inheritedTestBean&amp;#34; init-method=&amp;#34;initialize&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;name&amp;#34; value=&amp;#34;override&amp;#34;/&amp;gt; &amp;lt;!</description></item><item><title>Inline Parameters</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-inline_parameters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-inline_parameters/</guid><description>Inline Parameters 이전에 살펴본 prepared statement 에 대한 바인드 변수 매핑 처리를 위한 parameterMap 요소(SQL 문 외부에 정의한 입력 객체 property name 및 javaType, jdbcType 을 비롯한 옵션을 설정 매핑 요소) 와 동일한 기능을 처리하는 간편한 방법을 Inline Parameters 방법으로 제공한다. 보통 parameterClass 로 명시된 입력 객체에 대해 바인드 변수 영역을 간단한 #property# 노테이션으로 나타내는 Inline Parameter 방법은 기존 parameterMap 에서의 ? 와 이의 순서를 맞춘 외부 parameterMap 선언으로 처리하는 방법에 비해 많이 사용되고 일반적으로 추천하는 방법이다.</description></item><item><title>Step Variable</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-step_variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-step_variable/</guid><description>Step Variable 개요 변수 선언 후 Listeners를 통해서 모든 Setp에서 사용자 정의 변수를 사용할 수 있도록 EgovStepVariableListener를 통해서 지원한다. 사용자가 변수를 정의하여 여러 step에서 해당 변수를 공유하여 사용 가능한 기능으로 이루어져있다.
설명 Step Variable 설정 배치실행환경에서 제공하는 EgovJobVariableListener 사용하여 사용자 정의 변수를 설정한다.
&amp;lt;bean id=&amp;#34;egovStepVariableListener&amp;#34; class=&amp;#34;egovframework.rte.bat.support.EgovStepVariableListener&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;pros&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;StepVariableKey1&amp;#34;&amp;gt;StepVariableValue1&amp;lt;/prop&amp;gt; &amp;lt;prop key=&amp;#34;StepVariableKey2&amp;#34;&amp;gt;StepVariableValue2&amp;lt;/prop&amp;gt; &amp;lt;prop key=&amp;#34;StepVariableKey3&amp;#34;&amp;gt;StepVariableValue3&amp;lt;/prop&amp;gt; &amp;lt;/props&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; job, step 설정 step 설정시 listener를 사용하여 공유변수 서비스를 설정한다.
&amp;lt;job id=&amp;#34;delimitedToDelimitedJob-StepVariable&amp;#34; parent=&amp;#34;eGovBaseJob&amp;#34; xmlns=&amp;#34;http://www.</description></item><item><title>Session 방식 접근제어 권한설정</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/session-based-access-control-permission-settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/session-based-access-control-permission-settings/</guid><description>Session 방식 접근제어 권한설정 개요 표준프레임워크 3.9부터 Session 방식으로 접근제어 권한관리를 설정 할 수 있는 방법을 제공한다. 내부적으로 필요한 설정을 가지고 있고, XML Schema를 통해 필요한 설정만을 추가할 수 있도록 제공한다. 이 기능을 사용하기 위해서는 globals.properties 파일에서 Globals.Auth = session 로 설정한다.
환경설정 pom.xml (dependency추가) Session 방식의 접근제어 권한관리를 사용하기 위해서는 표준프레임워크 실행환경 구성요소중 org.egovframe.rte.fdl.access 라이브러리가 설치되어야 한다.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.egovframe.rte&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;org.egovframe.rte.fdl.access&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${org.egovframe.rte.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; XML namespace 및 schema 설정 접근제어를 설정하기 위해서는 다음과 같은 xml 선언이 필요하다.</description></item><item><title>Cloud Data Stream</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/cloud-data-stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/cloud-data-stream/</guid><description>Cloud Data Stream 개요 Spring Cloud Stream은 공유 메시징 시스템과 연결된 확장성이 뛰어난 이벤트 기반 마이크로서비스를 구축하기 위한 프레임워크이다.
Spring Cloud Stream의 핵심 구성 요소는 다음과 같다.
대상 바인더 : 외부 메시징 시스템과의 통합을 담당하는 구성 요소이다. 대상 바인딩 : 외부 메시징 시스템과 최종 사용자가 제공하는 애플리케이션 코드(생산자/소비자) 사이를 연결한다. 메시지 : 생산자와 소비자가 대상 바인더(및 외부 메시징 시스템을 통한 다른 응용 프로그램)와 통신하는 데 사용하는 표준 데이터 구조이다. Spring Cloud Stream은 Spring Integration의 메시지 처리 핵심 기능을 기반으로 사용한다.</description></item><item><title>Spring Web Flow에서 보안 적용</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-configuration-securing-flows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-configuration-securing-flows/</guid><description>Flow에 보안 적용하기(Securing Flows) 개요 보안은 어플리케이션 에서 매우 중요한 이슈이다. Spring Security는 어플리케이션과 결합하여 여러 수준에서 보안을 책임지는 플랫폼의 기능을 수행한다. 여기서는 Web Flow에 적용되는 Spring Security에 대해 알아보겠다.
어떻게 Flow를 안전하게 할 수 있을까? Flow 실행에 보안을 적용시키고 싶다면 다음 단계에 따르자.
Spring Security에서 인증(authentication)과 권한(authorization) 규칙을 설정한다. secured 구성요소로 Flow 정의에 보안 규칙을 추가한다. 보안 규칙을 처리해주는 SecurityFlowExecutionListener 추가한다. secured 구성요소 secured 구성 요소는 접근하기 전에 권한 확인을 적용해 주며, Flow 실행 단계마다 한 번 이상은 나올 수 없다.</description></item><item><title>Container Extension Points</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-container_extension_points/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-container_extension_points/</guid><description>Container extension points 개요 Spring Framework의 IoC 컴포넌트는 확장을 고려하여 설계되었다. 일반적으로 어플리케이션 개발자가 다양한 BeanFactory 또는 ApplicationContext 구현 클래스를 상속받을 필요는 없다.
Spring IoC Container는 특별한 통합 interface의 구현체를 삽입하여 확장할 수 있다.
설명 BeanPostProcessors를 사용한 확장(Customizing beans using BeanPostProcessors) BeanPostProcessors interface는 다수의 callback 메소드를 정의하고 있는데, 어플리케이션 개발자는 이들 메소드를 구현함으로써 자신만의 객체화 로직(instantiation logic), 종속성 해결 로직(dependency-resolution logic) 등을 제공할 수 있다.
org.springframework.beans.factory.config.BeanPostProcessor interface는 두개의 callback 메소드로 구성되어 있다.</description></item><item><title>resultMap</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-resultmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-resultmap/</guid><description>resultMap resultMap 은 SQL 문 외부에 정의한 매핑 요소로, result set 으로부터 어떻게 데이터를 뽑아낼지, 어떤 칼럼을 어떤 property로 매핑할지에 대한 상세한 제어를 가능케 해준다. resultMap 은 일반적으로 가장 많이 사용되는 중요한 매핑 요소로 resultClass 속성을 이용한 자동 매핑 접근법에 비교하여 칼럼 타입의 지시, null value 대체값, typeHandler 처리, complex property 매핑(다른 JavaBean, Collections 등을 포함하는 복합 객체) 등을 허용한다.
기본 resultMap 사용 방법 아래의 샘플 resultMap 정의를 참고하라.
Sample resultMap .</description></item><item><title>Spring의 Validator 인터페이스와 유효성 검증</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-validation/</guid><description>Validation 개요 객체의 유효성 검증을 위해 스프링 프레임워크는 org.springframework.validation.Validator라는 인터페이스를 제공한다. Validator는 특정 계층에 종속적인 구조가 아니라서, web이나 data-access등 어떤 계층의 객체라도 유효성 검증이 가능하게 한다. Jakarta Commons Validator나 Valang 같은 외부 Validator들도 Spring 프레임워크에서 사용할 수 있다. Spring Modules를 이용한 Jakarta Commons Validator 사용 방법에 대해서는 Spring Framework에서 Commons Validator 사용 을 참고하라.
설명 부서 정보를 수정하는 페이지에서 커맨드 객체인 부서 정보 클래스를 유효성 검증하는 코드를 작성해 보자. 부서 클래스인 Department 클래스는 아래와 같다.</description></item><item><title>ItemReader</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-item_reader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-item_reader/</guid><description>ItemReader 개요 ItemReader는 읽기 대상의 타입에 관계없이 한번에 한 항목을 읽으며 읽을 항목이 모두 소진되면 Null을 반환하는 인터페이스이다.
설명 ItemReader는 여러 종류의 데이터 타입을 입력 받을 수 있다. 가장 일반적인 데이터 타입으로 플랫 파일, XML, 데이터베이스가 있다.
플랫 파일 : 플랫 파일 ItemReader는 일반적으로 고정 위치로 정의된 데이터 필드나 특수 문자에 의해 구별된 데이터의 행을 읽는다. XML : XML ItemReader는 파싱, 매핑, 유효성 검증을 XML에서 독립적으로 작업할 수 있도록 처리해준다. 입력 데이터는 XSD 스키마에 대해 XML 파일의 유효성 검증이 가능하다.</description></item><item><title>재시도(Retry) 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-retry_mgmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-retry_mgmt/</guid><description>재시도(Retry) 예제 개요 배치 수행 시, 데이터를 처리하는 과정에서 실패한 데이터처리를 재시도하는 과정을 보여주는 예제이다. EgovRetrySampleFunctionalTests 예제는 ItemProcessing, ItemWriting 에서 발생한 예외상황에 대해 정해진 설정대로 Retry를 수행하는 과정을 보여준다. 설정된 retry-limit 만큼 재시도를 허용함으로써 Job 전체의 실패를 줄일 수 있다.
설명 설정 Job 설정 재시도(Retry) 예제의 Job 설정 파일인 retrySample.xml을 확인한다.
Job 의 구성을 보면 Chunk 설정에 아래와 같은 설정이 있다.
retry-limit : Retry 할 수 있는 최대 횟수를 지정한다. &amp;lt;retryable-exception-classes&amp;gt; : Exception 범위를 지정한다.</description></item><item><title>Scheduling 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/scheduling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/scheduling/</guid><description>Scheduling 서비스 개요 Scheduling 서비스는 어플리케이션 서버 내에서 주기적으로 발생하거나 반복적으로 발생하는 작업을 지원하는 기능으로서 유닉스의 크론(Cron) 명령어와 유사한 기능을 제공한다.
실행환경 Scheduling 서비스는 오픈소스 소프트웨어로 Quartz 스케쥴러를 사용한다. 본 장에서는 Quartz 스케쥴러의 기본 개념을 살펴본 후, IoC 서비스를 제공하는 Spring과 Quartz 스케쥴러를 통합하여 사용하는 방법을 살펴본다.
설명 Quartz 스케쥴러 Quartz 스케쥴러 실행과 관계된 주요 요소는 Scheduler, Job, JobDetail, Trigger 가 있다.
Scheduler 는 Quartz 실행 환경을 관리하는 핵심 개체이다. Job 은 사용자가 수행할 작업을 정의하는 인터페이스로서 Trigger 개체를 이용하여 스케쥴할 수 있다.</description></item><item><title>Swagger</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/swagger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/integration-layer/swagger/</guid><description>Swagger 개요 Swagger는 Restful 서비스 사용시 구현된 서비스에 대한 문서화를 지원하는 도구이다.
설명 목적 Restful 서비스를 구현한 경우 해당 API서버가 어떤 스펙을 가지고 있고 어떤 데이터를 주고 받는지에 대한 문서작업은 꼭 필요하다. 하지만 이런 문서작업은 상당한 시간을 사용하여 작성하여야 하고 API서버의 스펙이 변경되면 문서도 수정해 주어야 하기 때문에 관리가 여간 어려운게 아니다. 따라서 API 서버의 서비스를 작성하는것외에 문서의 작성과 유지보수를 위해 많은 시간과 비용이 발생한다. Swagger는 이러한 Restful서비스의 문서작성과 유지보수에 대한 효율성을 높일수 있다.</description></item><item><title>Flow가 관리하는 영속성(Flow Managed Persistence)</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-configuration-flow-managed-persistence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-configuration-flow-managed-persistence/</guid><description>Flow가 관리하는 영속성(Flow Managed Persistence) 개요 대부분의 애플리케이션은 여러 방법으로 데이터에 접근한다. 여러 사용자가 공유하는 데이터를 동시에 수정한다. 따라서 트랜잭션 데이터 접근 속성이 필요하다. 관계형 데이터 집합을 도메인 객체로 변환하여 애플리케이션 처리를 도와준다. Web Flow는 “Flow가 관리하는 영속성”(flow managed persistence)을 제공하여 Flow가 객체 영속성 문맥을 만들고, commit 하고, 닫을 수 있도록 한다. Web Flow는 하이버네이트와 JPA 객체 영속화 기술과 연동한다.
Flow-관리 영속성과 별도로 PesistenceContext 관리를 애플리케이션의 서비스 계층에서 완전히 캡슐화하는 패턴이 있다.</description></item><item><title>The ApplicationContext</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-the_applicationcontext/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-the_applicationcontext/</guid><description>The ApplicationContext 개요 org.springframework.context 패키지는 BeanFactory 인터페이스를 확장하는 ApplicationContext 인터페이스를 추가하고, 다른 인터페이스를 확장하여 보다 애플리케이션 프레임워크 지향적인 스타일로 추가 기능을 제공한다.
많은 사람들이 ApplicationContext를 완전히 선언적인 방식으로 사용하며, 프로그래밍 방식으로 생성하지 않고 ContextLoader와 같은 지원 클래스에 의존하여 Java EE 웹 애플리케이션의 정상적인 시작 프로세스의 일부로 ApplicationContext를 자동으로 인스턴스화한다.
설명 ApplicationContext는 BeanFactory를 확장한 것으로 BeanFactory의 기능 외에 아래와 같은 기능을 제공한다.
MessageSource : i18n-sytle로 메시지를 access할 수 있도록 지원한다. Access to resources : URL, File 등과 같은 자원을 쉽게 access할 수 있도록 지원하다.</description></item><item><title>iBATIS Dynamic SQL 사용</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-dynamic_sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-dynamic_sql/</guid><description>Dynamic SQL 일반적으로 JDBC API 를 사용한 코딩에서 한번 정의한 쿼리문을 최대한 재사용하고자 하나 단순 파라메터 변수의 값만 변경하는 것으로 해결하기 어렵고 다양한 조건에 따라 조금씩 다른 쿼리의 실행이 필요한 경우 많은 if~else 조건 분기의 연결이 필요한 문제가 있다. 여기에서는 SQL 문의 동적인 변경에 대한 상대적으로 유연한 방법을 제공하는 iBATIS 의 Dynamic 요소에 대해 알아본다.
기본 Dynamic 요소 사용 방법 아래의 샘플 Dynamic 요소 사용예를 참고하라.
Sample Dynamic SQL mapping xml .</description></item><item><title>Bean Validation (JSR-303)</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-declarative-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-declarative-validation/</guid><description>Bean Validation (JSR-303) 개요 화면처리: validation을 통해 검증방법을 알아보았다. 이전과는 다르게 JSR-303(Bean Validation) 스펙은 자동 검증 방식을 제공한다. @javax.validation.Valid애노테이션을 사용하여 내부적으로(자동으로) 검증이 수행된다.
또한, 최근에 표준 스펙으로 인증받은 JSR-303 빈 검증방식을 이용하여 모델 오브젝트 필드에서 애노테이션을 이용해 검증을 진행할 수 있다.
설명 @Valid를 이용한 자동검증 기존의 검증 방식을 자동 검증 방식으로 변경하였으며, 방법은 컨트롤러 메소드의 @ModelAttribute 파라미터에 @Valid 애노테이션을 추가한다. 그러면 validate() 메소드를 실행하는 대신 바인딩 과정에서 자동으로 검증이 진행된다.</description></item><item><title>ItemWriter</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-item_writer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-item_writer/</guid><description>ItemWriter 개요 ItemWriter는 대상 타입에 관계없이 한번에 항목의 묶음(Chunk)을 쓰는 동작의 인터페이스이다.
설명 ItemWriter의 기능은 ItemReader와 유사하지만 정반대의 동작을 한다. 기본적인 ItemWriter 인터페이스는 아래와 같다.
public interface ItemWriter&amp;lt;T&amp;gt; { void write(List&amp;lt;? extends T&amp;gt; items) throws Exception; } write() 메소드는 ItemWriter의 필수적인 메소드이며 인자로 건넨 객체가 열려 있는 동안 쓰기 작업을 시도한다.
FlatFile ItemWriter FlatFileItemWriter는 Resource, LineAggregator에 기본적으로 의존성을 갖으며, LineAggregator에 따라 구분자(Delimited)와 고정길이(Fixed Length) 방식으로 쓸 수 있다.
구분 데이터 형태 설명 LineAggregator Item → String ItemReader, ItemProcessor 과정을 거친 Item을 1 라인의 String으로 변환하는 총 과정(FieldExtractor 과정을 포함한다.</description></item><item><title>Logging</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/logging/</guid><description>Logging 서비스 개요 전자정부 표준프레임워크 3.0부터는 다양한 Logging Framework와 연계할 수 있도록 SLF4J를 도입하였고,
Logging 구현체는 Log4j 2를 이용하여 Logging을 수행한다.
Logging 서비스는 시스템의 개발이나 운용시 발생할 수 있는 사항에 대해서,
시스템의 외부 저장소에 기록하여 시스템의 상황을 쉽게 파악할 수 있도록 도와준다.
뿐만 아니라 테스팅 코드와 운영 코드를 동일하게 가져가면서 로깅을 선언적으로 관리할 수 있다.
과도한 Logging은 운영시 성능 오버헤드를 발생시킬 수 있으므로, 최소화할 수 있는 메커니즘이 필요하다.
많은 개발자가 Log을 출력하기 위해 일반적으로 사용하는 방식은 System.</description></item><item><title>저장소(Repository) 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-repository-mgmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-repository-mgmt/</guid><description>저장소(Repository) 예제 개요 배치 수행 시, 데이터 처리 대상(DB,File등)에 대한 설정을 보여주는 예제이다. EgovRepositoryFunctionalTests 예제는 리소스가 DB 인 jdbcCursorIoJob 과 리소스가 File인 delimitedIoJob의 수행과정을 보여주면서, 데이터가 DB에서 DB로 File 에서 File로 처리 된다.
설명 설정 Job 설정 저장소(Repository) 예제의 Job 설정 파일인 repositoryJob.xml 을 확인한다.
Job 의 구성을 보면 리소스 타입에 따라 두 개의 Job으로 구성되어 있고, 각 타입에 따른 Reader와 Writer를 사용하게 된다.
jdbcCursorIoJob : 리소스가 DB인 Job delimitedIoJob : 리소스가 파일인 Job &amp;lt;!</description></item><item><title>Annotation-based Configuration</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-annotation-based_configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-annotation-based_configuration/</guid><description>Annotation-based configuration 개요 Spring Framework는 Spring의 종속성 삽입을 위해 annotation을 사용할 수 있다. Spring 2.0에서는 @Required 어노테이션으로 필수 속성을 강제할 수 있는 기능이 도입되었고 Spring 2.5에서는 이와 동일한 일반적인 접근 방식을 따라 Spring의 의존성 주입을 구동할 수 있게 되었으며, Spring 3.0부터 @Inject 및 @Named와 같이 javax.inject 패키지에 포함된 JSR-330(Java용 의존성 주입) 어노테이션에 대한 지원이 추가되었다.
설명 Spring @Autowired annotation은 자동 엮음과 같은 기능을 제공하지만, 좀 더 세밀한 제어와 넓은 사용성을 제공한다.</description></item><item><title>SLF4J</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/logging-slf4j/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/logging-slf4j/</guid><description>SLF4J Getting Started SLF4J(Simple Logging Facade For Java)는 특정 Logging 서비스 구현체에 종속되지 않도록 추상화 계층을 제공하며,
Jakarta Commons Logging(JCL), Log4j, Logback 등과 함께 사용할 수 있다.
다음은 SLF4J 샘플 예제이다.
import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class Slf4JLoggerTest { // SLF4J를 이용한 Logger 오브젝트 생성 private static final Logger LOGGER = LoggerFactory.getLogger(Slf4JLoggerTest.class); // Parameterized logging - String 타입 String message = &amp;#34;Hello, eGovFrame 3.0&amp;#34;; String message2 = &amp;#34;Welcome to eGovFrame 3.</description></item><item><title/><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-elements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-elements/</guid><description/></item><item><title>View</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-view/</guid><description>View 개요 Controller가 요청에 대한 처리를 하고, View 이름과 데이터(Model)를 ModelAndView에 저장해 DispatcherServlet에 반환(return)하면, DispatcherServlet은 View 이름을 가지고 ViewResolver에게서 실제 View 객체를 얻고, 이 View는 Controller가 저장한 Model 객체의 정보를 출력한다. 여기서는 View와 ViewResolver, 그리고 JSP에서 편리한 데이터 출력을 위해 스프링이 제공하는 Spring form tag library에 대해서 설명한다.
View 개요 설명 ViewResolver InternalResourceViewResolver/UrlBasedViewResolver View Spring Tag Library meassage tag(&amp;lt;spring:message&amp;gt;) form tag(&amp;lt;form:form&amp;gt;,&amp;lt;form:input&amp;gt;,...) 전자정부프레임워크 Tag Library 참고자료 설명 ViewResolver Controller는 코드내에서 실제 View 객체를 생성하지 않고 View 이름만을 결정할 수 있는데, 이로써 Controller와 View의 분리(decoupling)를 가능하게 한다.</description></item><item><title>작업그룹 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-job_group_mgmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-job_group_mgmt/</guid><description>작업그룹 예제 개요 배치 수행 시, 업무에 따라 필요한 일련의 Job들을 구분하기 위해서 이를 카테고리화 하여 관리 하는 기능을 보여주는 예제이다.
설명 설정 Job 설정 작업그룹 예제에서는 다른 예제에서 사용되는 delegatingJob 을 사용한다.
Job 의 구성은 일반적인 Chunk 설정이 있다.
&amp;lt;job id=&amp;#34;delegateJob&amp;#34; xmlns=&amp;#34;http://www.springframework.org/schema/batch&amp;#34;&amp;gt; &amp;lt;step id=&amp;#34;delegateStep1&amp;#34;&amp;gt; &amp;lt;tasklet&amp;gt; &amp;lt;chunk reader=&amp;#34;reader&amp;#34; writer=&amp;#34;writer&amp;#34; commit-interval=&amp;#34;3&amp;#34;/&amp;gt; &amp;lt;/tasklet&amp;gt; &amp;lt;/step&amp;gt; &amp;lt;/job&amp;gt; Launcher 설정 작업그룹 예제의 Launcher 설정 파일인 group-job-launcher-context 를 확인한다.
✔ Job 그룹기능을 사용하기 위해서는 JobRegistryBeanPostProcessor 클래스와 관련한 빈에 ‘groupName’ 이라는 프로퍼티로 그룹명을 추가하면 된다.</description></item><item><title>MyBatis</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mybatis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mybatis/</guid><description>MyBatis
주요 변경 사항 Getting Started Configuration XML Mapper XML Files Dynamic SQL 표준프레임워크 기반 적용 가이드</description></item><item><title>Resource Variable</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-resource_variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-resource_variable/</guid><description>Resource Variable 개요 사용자 정의 리소스 변수 선언 후 Setp에서 ItemReader, ItemWriter에서 사용자 정의 리소스를 사용할 수 있도록 EgovResourceVariable를 통해서 지원한다.
설명 EgovResourceVariable 설정 배치실행환경에서 제공하는 EgovResourceVariable 사용하여 사용자 정의 리소스를 설정한다.
&amp;lt;bean id=&amp;#34;egovResourceVariable&amp;#34; class=&amp;#34;egovframework.rte.bat.support.EgovResourceVariable&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;pros&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;input.resource&amp;#34;&amp;gt;file:./src/main/resources/egovframework/batch/data/inputs/csvData.csv&amp;lt;/prop&amp;gt; &amp;lt;prop key=&amp;#34;writer.resource&amp;#34;&amp;gt;file:./target/test-outputs/csvOutput_ResourceVariable_#{new java.text.SimpleDateFormat(&amp;#39;yyyyMMddHHmmssSS&amp;#39;).format(new java.util.Date())}.csv&amp;lt;/prop&amp;gt; &amp;lt;/props&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; step 정의 시 리소스 사용 Setp에서 ItemReader, ItemWriter 사용시 사용자 정의 리소스 변수를 사용하여 resource 설정이 가능하다.
&amp;lt;bean id=&amp;#34;delimitedToDelimitedJob-ResourceVariable.delimitedToDelimitedStep.delimitedItemReader&amp;#34; class=&amp;#34;org.springframework.batch.item.file.FlatFileItemReader&amp;#34; scope=&amp;#34;step&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;resource&amp;#34; value=&amp;#34;#{egovResourceVariable.</description></item><item><title>Flow 정의</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-elements-flow-definiton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-elements-flow-definiton/</guid><description>Flow 정의 개요 Flow Flow란 상이한 상황(context)에서 실행될 수 있는 재사용이 가능한 여러 단계들의 흐름을 캡슐화한 것을 의미한다. 모든 Flow는 아래와 같은 Root로 시작한다.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;flow xmlns=&amp;#34;http://www.springframework.org/schema/webflow&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd&amp;#34;&amp;gt; &amp;lt;/flow&amp;gt; Flow의 구성 SWF에서 Flow는 “Sate(state)“로 부르는 일련의 단계들로 구성된다. Flow로 진입하게 되는 Sate는 일반적으로 사용자에게 보여지는 뷰가 된다. 이 뷰에서는 Sate를 제어하게 되는 이벤트가 발생한다. 이들 이벤트는 결과적으로 다른 뷰로 이동하게 되는 Transition(transition)을 일으키게 된다. 모든 state는 &amp;lt;flow/&amp;gt; 안에 정의하게 된다.</description></item><item><title>Map 객체를 통한 입력값 처리 방법</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-annotationcommandmapargumentresolver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-servlet-annotationcommandmapargumentresolver/</guid><description>AnnotationCommandmapArgumentResolver 개요 Controller에서 화면(JSP) 입력값을 받기 위해서 일반적으로 Command(Form Class) 객체를 사용하지만, Map 객체를 사용하는걸 선호할 수 있다. 전자정부프레임워크 버전 3.0이전에서는 CommandMapArgumentResolver를 통해 Map객체를 사용할 수 있었다. 그러나 3.0부터는 @CommandMap과 AnnotationCommandmapArgumentResolver를 통해 Map객체를 사용할 수 있다. org.springframework.web.method.support.HandlerMethodArgumentResolver의 구현클래스인 AnnotationCommandMapArgumentResolver은 HTTP request 객체에 있는 파라미터이름과 값을 Map 객체에 담아 Controller에서 사용도록 제공한다.
설명 HandlerMethodArgumentResolver Sping MVC의 @Controller의 메소드의 argument로 사용할 수 있는 유형(이에 관한 정보는 이곳을 참조하라.)은 기존의 계층형 Controller보다 다양해 졌지만, 필요에 따라 기본 유형외의 custom argument를 사용해야 할때가 있을 것이다.</description></item><item><title>Classpath Scanning for Managed Components</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-classpath_scanning_for_managed_components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-classpath_scanning_for_managed_components/</guid><description>Classpath scanning for managed components 개요 본 장의 앞선 대부분의 예제들은 Spring Container 안에서 BeanDefinition을 생성하기 위한 설정 메타데이터를 명기하기 위해서 XML을 사용해왔다. 이전 section Annotaion-based configuration은 source-level annotation을 사용하여 많은 양의 설정 메타데이터를 제공할 수 있음을 보였다. 이들 예제에서도 어쨌든, “base” bean 정의가 XML 파일 안에 명시적으로 정의되었다. 이번 section은 classpath를 검색하고, filter를 통해 검사함으로써, 대상 컴퍼넌트(candidate component) 를 검출하는 방법을 소개한다.
설명 @Component and further stereotype annotations Spring 2.</description></item><item><title>Log4j2</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/logging-log4j2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/logging-log4j2/</guid><description>설명 Log4j 2 변경사항 Java 6 이상 필요 XML 환경설정 단순화 (Log4j 1.x 와 호환되지 않음) Property 파일을 통한 환경설정을 지원하지 않음 JSON을 통한 환경설정 지원 파라미터 방식으로 Log Message 출력 환경설정 변경시 서버 재기동 없이 자동 재호출 필터링 기능 향상 NoSQLAppender 등의 다양한 Appender 제공 Log4j 2 추가기능 1. Substituting Parameters 로그 메시지를 구성하는 방법으로, 기존 문자열 결합 방식과 달리 {} 안에 파라미터를 대입하여 로그 메시지를 생성하는 방법이다.
아래 코드는 출력할 로그 메시지를 완성하기 전에 Log Level을 체크하고, isDebugEnabled인 경우에만 메서드를 수행한다.</description></item><item><title>MyBatis 주요 변경점</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-ibatis_vs_mybatis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-ibatis_vs_mybatis/</guid><description>MyBatis 주요 변경점 본 가이드는 MyBatis와 iBatis의 차이점을 설명한다.
변경된 용어(종합) iBatis MyBatis 비고 com.ibatis.* org.apache.ibatis.* 패키지 구조 변경 SqlMapConfig Configration 용어변경 sqlMap mapper 용어변경 sqlMapClient sqlSession 구문대체 rowHandler resultHandler 구문대체 resultHandler SqlSessionFactory 구문대체 parameterMap, parameterClass parameterType 속성 통합 resultClass resultType 용어변경 #var# #{var} 구문대체 $var$ ${var} 구문대체 , 구문대체 변경사항 패키지 구조 변경 iBatis MyBatis com.ibatis.* org.apache.ibatis.* 패키지 구조는 변경되었으나 기존에 iBatis 패키지명은 그대로 사용한다.
MyBatis library 별도 제공 Maven Dependency Information 예시</description></item><item><title>JobRepository</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-job_repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-job_repository/</guid><description>JobRepository 개요 JobRepository는 배치 작업 중의 정보를 저장하는 역할을 한다. 어떠한 Job이 언제 수행되었고, 언제 끝났으며, 몇 번이 실행되었고 실행에 대한 결과가 어떤지 등의 배치 작업의 수행과 관련된 모든 meta data가 저장되어 있다.
설명 JobRepository은 수행되는 Job에 대한 정보를 담고 있는 저장소로 배치작업의 지속성 메커니즘이다. JobRepository는 Spring Batch에서 JobExecution와 StepExecution 등과 같은 지속성을 가진 정보의 기본 CRUD작업에 사용된다. 배치작업이 처음 실행되면 JobRepository에서 JobExecution이 생성되고 배치작업이 실행되는 동안 StepExecution 및 JobExecution의 정보들이 JobRepository에 저장되고 갱신되어 지속된다.</description></item><item><title>단순처리(Tasklet) 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-tasklet_mgmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-tasklet_mgmt/</guid><description>단순처리(Tasklet) 예제 개요 배치 수행 시, Job의 실행중 itemReader와 ItemWriter 등의 인터페이스 사용이 필요없는 단순처리되는 작업(파일이동 등)을 보여주는 예제이다.
설명 설정 Job 설정 단순처리(Tasklet) 예제의 Job 설정 파일인 taskletJob.xml 을 확인한다.
Job 의 구성을 보면 다른 Job과 달리 Chunk 설정이 없고, &amp;lt;tasklet&amp;gt;에서 참조하는 adapter 빈에서 jobParameters로 설정된 값을 targetObject 프로퍼티 값으로 넘겨주는 것을 확인할 수 있다.
&amp;lt;job id=&amp;#34;loopJob&amp;#34; xmlns=&amp;#34;http://www.springframework.org/schema/batch&amp;#34;&amp;gt; &amp;lt;step id=&amp;#34;step1&amp;#34;&amp;gt; &amp;lt;tasklet ref=&amp;#34;adapter&amp;#34;&amp;gt; &amp;lt;transaction-attributes propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;/tasklet&amp;gt; &amp;lt;/step&amp;gt; &amp;lt;/job&amp;gt; &amp;lt;bean id=&amp;#34;adapter&amp;#34; class=&amp;#34;org.</description></item><item><title>Web Flow에서 Expression Language (EL) 사용</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-elements-expression-language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-elements-expression-language/</guid><description>Expression Language 개요 Web Flow는 데이터 모델 및 action 실행을 위해 EL을 이용한다. 우리는 EL에 대해 알아보면서 flow 정의를 해보도록 하겠다.
설명 지원하는 EL 구현체 Unified EL 기본으로는 Unified EL을 사용한다. jboss-el이 기본 구현체로 되어 있다.
참고 : web 컨테이너에서는 대게 el-api 를 지원해준다. 톰캣 6의 경우처럼 말이다. OGNL OGNL은 SWF2에서 제공하는 또 다른 EL이다. 클래스패스에만 추가하면 자동으로 찾아서 사용한다.
EL 호환성 Unified EL과 OGNL은 비슷한 문법을 가지고 있다. 가능하면 Unified EL만 사용하자.</description></item><item><title>Log4j 2 환경설정 (코드 내에서 직접 설정 시)</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/logging-log4j2-configuration_code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/logging-log4j2-configuration_code/</guid><description>Log4j 2 환경설정 (코드 내에서 직접 설정 시) 개요 Log4j 2 환경 설정(Appender, Layout, Log Level 등)을 코드 내에서 직접 제어할 수 있다.
아래는 별도의 외부 설정파일 없이도 로깅할 수 있는 방법을 설명한다.
설명 사용 방법 별도의 Log4j 2 설정파일 없이도 코드 내에서 Logger 객체를 획득하여 로깅이 가능하다.
LogManager.getLogger() 메서드를 통해 Logger 객체를 생성하며, Log4j 2는 디폴트로 설정된 Logger 객체를 반환한다.
디폴트 Logger 객체의 기본적인 디폴트 설정은 다음과 같다.
Log Level : ERROR Appender : ConsoleAppender Layout : PatternLayout pattern : %d{HH:mm:ss.</description></item><item><title>JSR 330 표준 어노테이션 사용하기</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-jsr_330_standard_annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-jsr_330_standard_annotations/</guid><description>JSR 330 표준 어노테이션 사용하기 개요 스프링 3.0부터 JSR-330 표준 어노테이션(의존성 주입)을 지원한다. 이 어노테이션들은 스프링 어노테이션들과 같은 방법으로 스캔된다. 이 어노테이션들을 사용하기 위해서는 클래스패스에 관련 jar 파일들을 가지고 있어야 한다.
Maven을 사용한다면 Maven Repository(https://mvnrepository.com/artifact/javax.inject/javax.inject/1)에서 javax.inject라는 아티펙트가 제공된다. pom.xml 파일에 아래의 의존성을 추가하여 사용할 수 있다.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.inject&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.inject&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 설명 1. @Inject 와 @Named 를 이용한 의존성 주입 @Autowired를 대신하여 @javax.inject.Inject를 아래와 같이 사용할 수 있다.
import javax.inject.Inject; public class SimpleMovieLister { private MovieFinder movieFinder; @Inject public void setMovieFinder(MovieFinder movieFinder) { this.</description></item><item><title>MyBatis 시작하기</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-getting_started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-getting_started/</guid><description>시작하기 모든 MyBatis 애플리케이션은 SqlSessionFactory 인스턴스를 사용한다. SqlSessionFactory 인스턴스는 SqlSessionFactoryBuilder 를 사용하여 만들 수 있다. SqlSessionFactoryBuilder 는 XML 설정파일에서 SqlSessionFactory 인스턴스를 빌드할 수 있다;
XML에서 SqlSessionFactory 빌드하기 XML 파일에서 SqlSessionFactory 인스턴스를 빌드하는 것은 매우 간단하다. 설정을 위해 클래스패스 자원을 사용하는 것을 추천하나, 파일 경로나 file URL 로부터 만들어진 InputStream 인스턴스를 사용할 수도 있다. MyBatis 는 클래스패스와 다른 위치에서 자원을 로드하는 것으로 좀더 쉽게 해주는 Resources 라는 유틸성 클래스를 가지고 있다.</description></item><item><title>JobLauncher</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-job_launcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-job_launcher/</guid><description>JobLauncher 개요 JobLauncher는 배치작업을 실행시키는 역할을 한다. Job과 Job Parameters를 이용하여 요청된 배치 작업을 수행한 후 JobExecution을 반환한다.
설명 JobLauncher 인터페이스를 보면 Job과 Job Parameter를 이용하여 요청된 Job을 수행한 후 JobExecution을 반환되는 run메소드가 정의되어 있다.
public interface JobLauncher { public JobExecution run(Job job, JobParameters jobParameters) throws JobExecutionAlreadyRunningException, JobRestartException, JobInstanceAlreadyCompleteException, JobParametersInvalidException; } JobLauncher 인터페이스의 기본 구현 클래스로는 SimpleJobLauncher이 제공된다. SimpleJobLauncher클래스는 JobName과 JobParameter를 이용하여 JobRepository에서 Job의 실행시도를 나타내는 JobExecution을 획득하고 작업을 수행한다.</description></item><item><title>배치 실행로그 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-batch_exec_mgmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-batch_exec_mgmt/</guid><description>배치 실행로그 예제 개요 배치 수행 시, 처리되는 배치관련 정보들에 대한 기록(Log)을 Registry 와 DB에 저장되고 이를 확인하는 과정을 보여주는 예제이다.
설명 설정 Job 설정 배치 실행로그 예제의 Job 설정 파일인 logManagementJob.xml을 확인한다.
배치 실행로그 예제를 위해 특별히 Job을 설정하는 내용은 없다. 이 예제에서 제공하는 Job의 상세 내용은 건너뛰기(Skip)기능 예제의 Job 설정과 같으므로 이를 참고한다.
&amp;lt;job id=&amp;#34;logManagementJob&amp;#34; incrementer=&amp;#34;incrementer&amp;#34; xmlns=&amp;#34;http://www.springframework.org/schema/batch&amp;#34;&amp;gt; &amp;lt;step id=&amp;#34;step1&amp;#34; parent=&amp;#34;baseStep&amp;#34;&amp;gt; &amp;lt;tasklet&amp;gt; &amp;lt;chunk reader=&amp;#34;fileItemReader&amp;#34; processor=&amp;#34;tradeProcessor&amp;#34; writer=&amp;#34;tradeWriter&amp;#34; commit-interval=&amp;#34;3&amp;#34; skip-limit=&amp;#34;10&amp;#34;&amp;gt; &amp;lt;skippable-exception-classes&amp;gt; &amp;lt;include class=&amp;#34;org.</description></item><item><title>스프링 WebFlux와 기존 스프링 웹 프레임워크 비교</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-reactive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-reactive/</guid><description>Web Reactive 개요 스프링 프레임워크, 스프링 웹 MVC를 포함한 기존 웹 프레임워크는 서블릿 API와 서블릿 컨테이너를 위해 개발되었다. 스프링 WebFlux는 5.0 버전부터 추가된 리액티브 스택 웹 프레임워크로서, 서블릿 API와 서블릿 컨테이너를 개발하기 위한 스프링 프레임워크이다. 스프링 웹 MVC를 포함한 기존의 웹 프레임워크와 달리 완전한 논블로킹으로 동작하며 Reactive Streams back pressure를 지원하고 Netty, Undertow, 서블릿 3.1+ 컨테이너 서버에서 실행된다. 웹 프레임워크 모두 스프링 프레임워크에 포함되어 있으며, 원하는 모듈을 선택하여 개발할 수 있다.</description></item><item><title>Spring Web Flow의 뷰(View) 보여주기</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-elements-rendering-views/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-elements-rendering-views/</guid><description>뷰(View) 보여주기 개요 view-state는 flow 내에서 화면을 생성하는 요소이다. 여기서는 view-state 에 대해서 알아보도록 하자.
설명 뷰 상태(view state) 정의하기 view-state는 기본적으로 해당 뷰를 생성하여 보여준 후, 사용자가 화면을 통해 응답을 하는 것을 기다린다. 아래는 view-state는 enterBookingDetails라는 ID 를 가지고 있으며 또한 별도의 view 설정이 없기 때문에 ID 가 곧 view를 뜻한다
&amp;lt;view-state id=&amp;#34;enterBookingDetails&amp;#34;&amp;gt; &amp;lt;transition on=&amp;#34;submit&amp;#34; to=&amp;#34;reviewBooking&amp;#34; /&amp;gt; &amp;lt;/view-state&amp;gt; 따라서. 디렉토리 상의
booking.xml(or booking-flow.xml) 이 존재하는 디렉토리에 있는 enterBookingDetails.jsp 이 자동으로 view로 동작한다.</description></item><item><title>Log4j 2 환경설정 (설정 파일 사용 시)</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/logging-log4j2-configuration_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/logging-log4j2-configuration_file/</guid><description>Log4j 2 환경설정 (설정 파일 사용 시) 개요 Log4j 2는 기존 Properties 파일 형식의 환경 설정을 지원하지 않으며,
XML (log4j2.xml) 혹은 JSON (log4j2.json or log4j2.jsn) 파일 형식의 환경 설정만 가능하다.
아래는 XML 파일을 이용한 환경 설정에 대해서만 다루며, JOSN 방식은 Log4j 2 매뉴얼을 참고하도록 한다.
설명 Log4j 2 XML Configuration XML 파일 위치 XML 파일(log4j2.xml)을 작성하고, WEB-INF/classes 하위에 포함될 수 있도록 위치시킨다.
Log4j 2가 초기화될 때 자동으로 위 설정 파일을 읽어들인다.</description></item><item><title>MyBatis Configuration XML File</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-configuration_xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-configuration_xml/</guid><description>MyBatis Configuration XML File MyBatis XML 설정파일은 다양한 셋팅과 프로퍼티를 가진다 해당 파일의 작성과 상세한 옵션 설정에 대해 알아본다.
Configuration XML MyBatis XML 설정파일의 일반적인 구조 및 구성은 properties, settings, typeAliases, typeHandlers, objectFactory, plugins, environments, databaseIdProvider, mappers 등의 내용으로 구성이 되어 있으며 주요 내용은 아래와 같다.
Sample Configuration &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE configuration PUBLIC &amp;#34;-//mybatis.org//DTD Config 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;#34;&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;properties resource=&amp;#34;org/mybatis/example/config.properties&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;dev_user&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;F2Fa3!33TYyg&amp;#34;/&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;settings&amp;gt; &amp;lt;setting name=&amp;#34;cacheEnabled&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;setting name=&amp;#34;lazyLoadingEnabled&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;setting name=&amp;#34;multipleResultSetsEnabled&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;/settings&amp;gt; &amp;lt;typeHandlers&amp;gt; &amp;lt;typeHandler handler=&amp;#34;egovframework.</description></item><item><title>Java-based Configuration</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-java-based_configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-java-based_configuration/</guid><description>Java-based configuration 개요 Java 코드에서 주석을 사용하여 스프링 컨테이너를 구성하는 방법에 대해 알아본다.
설명 기본 개념 : @Bean, @Configurationl 스프링의 자바 기반 설정에서는 @Configuration 어노테이션 클래스와 @Bean 어노테이션 메소드를 지원한다.
@Bean 어노테이션은 Spring IoC 컨테이너가 관리할 새로운 객체를 인스턴스화하고, 초기화하는데 사용되며, Spring의 XML 설정에서의 &amp;lt;bean/&amp;gt;과 같은 역할을 한다.
@Bean 어노테이션은 붙인 메소드는 스프링 @Component와 함께 사용할 수 있지만, 대체로 @Configuration Bean과 사용한다.
@Configuration 어노테이션은 해당 클래스의 목적이 Bean 설정을 위한 소스임을 나타내며, @Configuration 클래스는 같은 클래스 안에 있는 @Bean 메소드들끼리 서로를 호출하여 Bean 사이의 의존성을 정의할 수 있게 한다.</description></item><item><title>Reactive Core</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-reactive-reactive-core/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-reactive-reactive-core/</guid><description>Reactive Core 설명 스프링-웹 모듈에는 반응형 웹 애플리케이션을 위한 다음과 같은 기본 지원이 포함되어 있다.
서버 요청 처리에는 두 가지 수준을 지원한다. HttpHandler: 논블로킹 I/O 및 리액티브 스트림 Back Pressure을 사용하는 HTTP 요청을 처리하며, Reactor Netty, Undertow, Tomcat, Jetty 및 모든 Servlet 3.1+ 컨테이너용 어댑터와 함께 사용한다. WebHandler API: 요청 처리를 위한 약간 더 높은 수준의 범용 웹 API로, 주석이 달린 컨트롤러 및 기능적 엔드포인트와 같은 구체적인 프로그래밍 모델로 작성되어 있다.</description></item><item><title>Remote JobLauncher</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-remote_job_launcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-remote_job_launcher/</guid><description>Remote JobLauncher 개요 Remote JobLauncher는 온라인 상에서 별도의 배치 서버의 Batch Job작업을 실행시키는 역할을 한다. 온라인 상의 Client와 Server를 이용하여 요청된 배치 작업을 수행한다.
구성 온라인상의 Remote JobLauncher를 구현하기 위하여 Hessian Binary Web Service를 사용한다. Hessian 웹서비스는 별도의 대형 프레임워크를 설치하지 않고도 간편하게 사용할 수 있은 웹서비스이며, HTTP기반의 경량 바이러리 프로토콜로 별도의 확장없이 바이너리 데이터를 전송하는데 적합하다. 또한, 스피링의 HessianProxyFactoryBean과 HessianServiceExporter를 사용하여 편리한 Integration을 지원한다.
Hessian을 사용하기 위하여 아래와 같이 라이브러리 디펜던시를 설정한다.</description></item><item><title>대용량 처리를 위한 멀티스레드 기반의 병행처리 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-multi_process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-multi_process/</guid><description>대용량 처리를 위한 멀티스레드 기반의 병행처리 예제 개요 배치 수행 시, 대용량 처리를 위해 Job을 멀티스레드 기반으로 병행처리하는 과정을 보여준다. 실행 유형별로 멀티쓰레드 방식, Parallel 방식, 파티셔닝 방식 등이 있다.
설명 멀티쓰레드(Multi-threaded Step) 예제 병행처리멀티스레드(Multi-threaded Step)은 하나의 step을 멀티쓰레드로 처리하는 방식이다. chunk단위로 각 쓰레드에서 병행으로 처리한다.
Job설정 병행처리멀티스레드 예제의 Job 설정파일인 parallelJob.xml을 확인한다.
멀티스레드 처리를 원하는 step의 tasklet에 비동기 설정을 한다.
&amp;lt;job id=&amp;#34;parallelJob&amp;#34; xmlns=&amp;#34;http://www.springframework.org/schema/batch&amp;#34;&amp;gt; &amp;lt;step id=&amp;#34;staging&amp;#34; next=&amp;#34;loading&amp;#34;&amp;gt; &amp;lt;tasklet&amp;gt; &amp;lt;chunk reader=&amp;#34;fileItemReader&amp;#34; processor=&amp;#34;validatingProcessor&amp;#34; writer=&amp;#34;stagingItemWriter&amp;#34; commit-interval=&amp;#34;2&amp;#34;/&amp;gt; &amp;lt;/tasklet&amp;gt; &amp;lt;/step&amp;gt; &amp;lt;step id=&amp;#34;loading&amp;#34;&amp;gt; &amp;lt;tasklet task-executor=&amp;#34;taskExecutor&amp;#34;&amp;gt; &amp;lt;chunk reader=&amp;#34;stagingReader&amp;#34; processor=&amp;#34;stagingProcessor&amp;#34; writer=&amp;#34;tradeWriter&amp;#34; commit-interval=&amp;#34;3&amp;#34;/&amp;gt; &amp;lt;/tasklet&amp;gt; &amp;lt;/step&amp;gt; &amp;lt;/job&amp;gt; &amp;lt;bean id=&amp;#34;taskExecutor&amp;#34; class=&amp;#34;org.</description></item><item><title>Action 실행</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-elements-executing-actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-elements-executing-actions/</guid><description>Action 실행 개요 action-state는 flow 내에서 action 실행을 제어하기 위한 요소이다.
decision-state를 이용하여 if-else와 같은 흐름 제어를 할 수 있다. 좀 더 자세히 알아보도록 하자.
설명 액션 상태 정의하기 특정 액션을 호출한 다음에, 그 결과에 따라서 다른 상태로 전이하고 싶은 경우에는 action-state 구성 요소를 사용하자.
직관적으로 봤을 때 아래 코드는 interview.moreAnswersNeeded()의 결과값에 의해 transition이 실행될 것을 예상할 수 있다.
&amp;lt;action-state id=&amp;#34;moreAnswersNeeded&amp;#34;&amp;gt; &amp;lt;evaluate expression=&amp;#34;interview.moreAnswersNeeded()&amp;#34; /&amp;gt; &amp;lt;transition on=&amp;#34;yes&amp;#34; to=&amp;#34;answerQuestions&amp;#34; /&amp;gt; &amp;lt;transition on=&amp;#34;no&amp;#34; to=&amp;#34;finish&amp;#34; /&amp;gt; &amp;lt;/action-state&amp;gt; 좀더 완전한 예를 살펴보자.</description></item><item><title>DB 파티셔닝 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-db_partition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-db_partition/</guid><description>DB 파티셔닝 예제 설명 설정 Job 설정 DB 파티셔닝 예제의 Job 설정 파일인 partitionJdbcJob.xml을 확인한다.
partitioner : gridSize 수 만큼 Master Step을 파티셔닝하는 EgovColumnRangePartitioner grid-size : 생성할 Context 수 fileNameListener : 입력 리소스명과 같은 이름의 출력리소스명을 설정하고, 입력 리소스가 없다면 설정된 기본값을 이용해 출력위치 및 출력파일명을 지정한다. &amp;lt;job id=&amp;#34;partitionJdbcJob&amp;#34; xmlns=&amp;#34;http://www.springframework.org/schema/batch&amp;#34;&amp;gt; &amp;lt;step id=&amp;#34;step&amp;#34;&amp;gt; &amp;lt;partition step=&amp;#34;step1&amp;#34; partitioner=&amp;#34;partitioner&amp;#34;&amp;gt; &amp;lt;handler grid-size=&amp;#34;4&amp;#34; task-executor=&amp;#34;taskExecutor&amp;#34;/&amp;gt; &amp;lt;/partition&amp;gt; &amp;lt;/step&amp;gt; &amp;lt;/job&amp;gt; &amp;lt;bean id=&amp;#34;partitioner&amp;#34; class=&amp;#34;egovframework.brte.sample.example.support.EgovColumnRangePartitioner&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;dataSource&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;table&amp;#34; value=&amp;#34;CUSTOMER&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;column&amp;#34; value=&amp;#34;ID&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;step id=&amp;#34;step1&amp;#34; xmlns=&amp;#34;http://www.</description></item><item><title>스프링 WebFlux의 DispatcherHandler와 요청 처리 흐름</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-reactive-dispatcherhandler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-reactive-dispatcherhandler/</guid><description>DispatcherHandler 설명 스프링 WebFlux도 스프링 MVC와 유사한 프론트 컨트롤러 패턴을 사용한다. 중앙 WebHandler가 받은 요청을 다른 컴포넌트에 위임하는데 DispatcherHandler가 바로 이 중앙 WebHandler다. 이 모델 덕분에 다양한 워크플로우를 지원할 수 있다. DispatcherHandler는 스프링 설정에 따라 그에 맞는 컴포넌트로 위임한다. DispatcherHandler도 스프링 빈이며 ApplicationContextAware 인터페이스를 구현했기 때문에 실행중인 컨텍스트에 접근할 수 있다. DispatcherHandler 빈을 WebHandler 이름으로 정의하면 WebHttpHandlerBuilder가 감지하고 WebHandler API에서 설명했던 체인에 추가한다.
WebFlux 애플리케이션에서 사용하는 일반적인 스프링 설정은 다음과 같다.</description></item><item><title>Environment Abstraction</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-environment_abstraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-environment_abstraction/</guid><description>Environment Abstraction 개요 Environment Abstraction은 환경에 대한 추상화로 Spring에서 제공하는 Environment 인터페이스를 이용한다.
Environment 인터페이스는 애플리케이션 환경의 두 가지 주요 측면을 모델링하는 컨테이너에 통합된 추상화로, profiles 나 properties처럼 프로그램의 환경 변수나 Application의 프로필을 관리할 때 사용하게 된다.
Profile은 지정된 프로파일이 활성화된 경우에만 컨테이너에 등록되는 명명된 빈 정의의 논리적 그룹이다.
Bean은 XML 또는 주석으로 정의된 프로필에 할당될 수 있다. 프로필과 관련된 환경 개체의 역할은 현재 활성화된 Profile(있는 경우)과 기본적으로 활성화되어야 하는 Profile(있는 경우)을 결정하는 것이다.</description></item><item><title>Mapper XML Files</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mapper_xml_files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mapper_xml_files/</guid><description>Mapper XML File MyBatis Mapper XML (SQL Mapping XML) File은 실행할 SQL문을 정의해놓은 파일로서,
SQL문 실행을 위해 Parameter Object를 받아오거나 SQL문 실행 결과를 Result Object에 자동 바인딩하는 기능 등을 제공한다.
Mapper XML (SQL Mapping XML) Mapper XML File에는 다음과 같은 요소들을 사용할 수 있다.
&amp;lt;select&amp;gt;: 매핑된 SELECT 구문 &amp;lt;insert&amp;gt;: 매핑된 INSERT 구문 &amp;lt;update&amp;gt;: 매핑된 UPDATE 구문 &amp;lt;delete&amp;gt;: 매핑된 DELETE 구문 &amp;lt;sql&amp;gt;: 다른 구문에서 재사용하기 위한 SQL 조각 &amp;lt;resultMap&amp;gt;: 데이터베이스 결과 데이터를 객체에 매핑하는 방법을 정의 &amp;lt;cache&amp;gt;: 자신의 namespace를 위한 캐시설정 &amp;lt;cache-ref&amp;gt;: 다른 namespace의 캐시설정을 참조 Sample Configuration &amp;lt;?</description></item><item><title>Id Generation 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/id-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/id-generation/</guid><description>Id Generation 서비스 개요 시스템을 개발할 때 필요한 유일한 ID를 생성하기 위해 사용하도록 서비스한다.
주요 개념 Universally Unique Identifier(UUID) UUID는 OSF(Open Software Foundation)에 의해 제정된 고유식별자(Identifier)에 대한 표준이다. UUID는 16-byte (128-bit)의 숫자로 구성된다.
UUID를 표현하는 방식에 대한 특별한 규정은 없으나, 일반적으로 아래와 같이 16진법으로 8-4-4-4-12 형식으로 표현한다.
550e8400-e29b-41d4-a716-446655440000
UUID 표준은 아래 문서에 기술되어 있다.
ISO/IEC 11578:1996 &amp;ldquo;Information technology &amp;ndash; Open Systems Interconnection &amp;ndash; Remote Procedure Call (RPC)&amp;rdquo; ITU-T Rec. X.667 | ISO/IEC 9834-8:2005 IETF Proposed Standard RFC 4122 UUID는 다음 5개의 Version이 존재한다.</description></item><item><title>JobRunner</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-job_runner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-execution-job_runner/</guid><description>JobRunner 개요 JobRunner는 외부 실행 모듈과 JobLauncher를 연결해주는 모듈로, 용도에 맞게 구현이 필요하다. 전자정부 표준프레임워크에서는 작업실행 유형에 따라 미리 JobRunner를 미리 구현한 표준 Batch Runner를 제공한다.
설명 배치작업의 실행 유형에 따라 아래와 같이 3가지의 Batch Runner를 제공한다.
EgovBatchRunner: Web, Java Application 등을 이용하여 범용적으로 실행되는 일괄처리 작업에 사용한다. EgovCommandLineRunner: 외부 프로그램(Windows: / Unix/Linux: crontab 등)이나 명령 프롬프트(Windows: bat / Unix/Linux: Shell)에서 독립적으로 실행되는 배치작업에 사용한다. EgovSchedulerRunner: 주기적으로 실행되어야 하는 일괄처리 작업에 사용한다.</description></item><item><title>Flow 상속</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-elements-flow-inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/business-logic-layer/swf-elements-flow-inheritance/</guid><description>Flow 상속 개요 Flow 상속은 한 Flow가 다른 Flow 설정을 상속할 수 있게 되어 있다. 상속은 Flow와 State 레벨에서 모두 발생할 수 있다. 가장 흔한 유즈케이스는 상위 Flow로 global transition과 예외 핸들러를 정의하고 하위 Flow로 그 설정을 상속받는 것이다. 상위 Flow를 찾으려면 다른 Flow들처럼 flow-registry에 추가해야 된다.
설명 Flow 상속은 자바 상속과 비슷한가? 상위에 정의한 요소를 하위에서 접근할 수 있다는 측면에서는 자바 상속과 Flow 상속이 비슷하다. 하지만 몇 가지 차이점을 가지고 있다.</description></item><item><title>스프링 WebFlux에서 어노테이션 기반 컨트롤러 활용 방법</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-reactive-annotated-controllers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-reactive-annotated-controllers/</guid><description>Annotated Controllers 설명 스프링 WebFlux는 어노테이션 기반 프로그램밍 모델을 지원하기 때문에 @Controller, @RestController 컴포넌트로 요청을 매핑하고, 입력을 받고, 예외처리를 할수 있다. 컨트롤러는 메소드를 여러가지로 활용할 수 있어서 클래스를 상속하거나 인터페이스를 구현하지 않아도 된다.
@RestController public class HelloController { @GetMapping(&amp;#34;/hello&amp;#34;) public String handle() { return &amp;#34;Hello WebFlux&amp;#34;; } } 위 코드에서는 response body에 쓸 String을 리턴한다.
@Controller 컨트롤러는 표준 스프링 빈으로 정의한다. @Controller 어노테이션을 달면 스프링이 클래스패스 내의 다른 @Component 클래스처럼 자동으로 스캔하고 빈으로 등록한다.</description></item><item><title>Mapper Dynamic SQL</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mybatis-dynamic-sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mybatis-dynamic-sql/</guid><description>Dynamic SQL 일반적으로 JDBC API를 사용한 코딩에서 다양한 조건에 따라 다양한 형태의 쿼리의 실행이 필요한 경우가 존재하며 이에 MyBatis는 강력한 동적 SQL 언어를 제공한다.
MyBatis는 SQL 문의 동적인 변경에 대해 iBatis보다 상대적으로 유연하다.
iBatis도 다양한 Dynamic 요소를 제공하였으나 이해해야 하는 요소들이 많았다.
MyBatis에서 제공하는 동적 SQL 요소들은 JSTL이나 XML 기반의 텍스트 프로세서와 유사한 형태로 제공되며 OGNL 기반의 표현식을 제공함으로써 보다 유연하고 편리하게 Dynamic 요소를 사용할 수 있다.
기본 Dynamic 요소 사용 방법 Sample Dynamic SQL mapper xml MyBatis에서 제공하는 Dynamic 요소의 기본적인 형태에 대해 알아보도록 한다.</description></item><item><title>N:N 파일 Partition 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-file_partition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-file_partition/</guid><description>N:N 파일 Partition 예제 설명 설정 Job 설정 File 파티셔닝 예제의 Job 설정 파일인 partitionFileJob.xml을 확인한다.
ppartitioner : 입력리소스 수 만큼 Master Step을 파티셔닝하는 MultiResourcePartitioner grid-size : 생성할 Context 수 fileNameListener : 입력 리소스명과 같은 이름의 출력리소스명을 설정하고, 입력 리소스가 없다면 설정된 기본값을 이용해 출력위치 및 출력파일명을 지정한다. &amp;lt;job id=&amp;#34;partitionJob&amp;#34; restartable=&amp;#34;true&amp;#34; xmlns=&amp;#34;http://www.springframework.org/schema/batch&amp;#34;&amp;gt; &amp;lt;step id=&amp;#34;step&amp;#34;&amp;gt; &amp;lt;partition step=&amp;#34;step1&amp;#34; partitioner=&amp;#34;partitioner&amp;#34;&amp;gt; &amp;lt;handler grid-size=&amp;#34;4&amp;#34; task-executor=&amp;#34;taskExecutor&amp;#34; /&amp;gt; &amp;lt;/partition&amp;gt; &amp;lt;/step&amp;gt; &amp;lt;/job&amp;gt; &amp;lt;bean id=&amp;#34;partitioner&amp;#34; class=&amp;#34;org.springframework.batch.core.partition.support.MultiResourcePartitioner&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;resources&amp;#34; value=&amp;#34;classpath:egovframework/data/input/delimited*.csv&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;step id=&amp;#34;step1&amp;#34; xmlns=&amp;#34;http://www.</description></item><item><title>Inversion of Control</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-inversion-of-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-inversion-of-control/</guid><description>Inversion of Control 개요 본 문서는 Martin Fowler가 저술한 Inversion of Control 문서를 번역 및 일부 의역한 것이다.
설명 Inversion of Control(IoC)는 당신이 프레임워크를 확장할 때 마주치게 되는 일반적인 사상이다. 또한, 프레임워크를 정의하는 특징이기도 하다.
간단한 예제를 생각해보자. 명령줄의 질문을 통해 사용자로부터 어떠한 정보를 입력받는 프로그램을 작성한다고 생각해보자. 나는 아마 다음과 같은 것을 작성할 것이다.
#ruby puts &amp;#39;What is your name?&amp;#39; name = gets process_name(name) puts &amp;#39;Waht is your quest?&amp;#39; quest = gets process_quest(quest) 위 예제에서, 내가 작성한 코드는 제어권을 가지고 있다 : 질문을 언제 할 것인지, 대답은 언제 읽을 것인지, 그리고 그런 결과들을 언제 처리할 것인지 등을 결정하고 있다.</description></item><item><title>JobRegistry</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job_registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job_registry/</guid><description>JobRegistry 개요 JobRegistry는 생성된 Job을 자동으로 Map형태로 저장하여 관리(추가, 삭제 등)한다.
설명 JobRegistry는 필수는 아니지만 context에서 Job을 추적하거나 다른 곳에서 생성된 Job을 application context의 중앙에 모을 때 유용하다. 등록된 Job의 이름과 속성들을 조작할 수 있으며 job name과 job instance의 Map의 형태로 이루워져 있다.
&amp;lt;bean id=&amp;#34;jobRegistry&amp;#34; class=&amp;#34;org.springframework.batch.core.configuration.support.MapJobRegistry&amp;#34; /&amp;gt; JobRegistry에 Job을 자동으로 등록하는 방법은 두 가지가 있다.
JobRegistryBeanPostProcessor 사용 AutomaticJobRegistrar 사용 JobRegistryBeanPostProcessor 이것은 Bean post-processor으로 Application Context가 올라가면서 bean 등록 시, 자동으로 JobRegistry에 Job을 등록 시켜준다.</description></item><item><title>Property</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/property/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/property/</guid><description>Property Property는 시스템의 설치 환경에 관련된 정보나, 잦은 정보의 변경이 요구되는 경우 외부에서 그 정보를 관리하게 함으로써 시스템의 유연성을 높이기 위해서 제공하는 것으로 Property Service와 Property Source를 제공하고 있다. Property Service와 Property Source는 각각의 특성과 용도에 따라 시스템의 설정 정보를 관리한다. 이와 같은 기능을 통해 전자정부프레임워크는 시스템의 유연성과 확장성을 높여준다.
Property Service 특징: 코드 상에서 key를 통해 해당 값을 가져오는 방식으로, 외부 파일이 변경될 경우 이를 반영하여 값을 갱신할 수 있다.</description></item><item><title>스프링 WebFlux 함수형 프로그래밍 모델(WebFlux.fn)</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-reactive-functional-endpoints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-reactive-functional-endpoints/</guid><description>Functional Endpoints 스프링 WebFlux는 경량화 된 함수형 프로그래밍 모델을 지원한다. WebFlux.fn이라고 하는 이 모델은 함수로 요청을 라우팅하고 핸들링하기 때문에 불변성(immutability)을 보장한다. 함수형 모델과 어노테이션 모델 중 하나를 선택하면 되는데 둘 다 리액티브 코어를 기반으로 한다.
설명 WebFlux.fn에선 HandlerFunction이 HTTP 요청을 처리한다. HandlerFunction은 ServerRequest를 받아 비동기 ServerResponse(예를 들어 Mono)를 리턴하는 함수다. 요청, 응답 객체 모두 불변하기 때문에 JDK 8 방식으로 HTTP 요청, 응답에 접근할 수 있다. HandlerFunction 역할은 어노테이션 프로그래밍 모델로 치면 @RequestMapping 메소드와 동일하다.</description></item><item><title>Generic</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/ioc-container-generic/</guid><description>Generic 개요 Spring4 Generic은 Autowired 및 Qualifired를 보완하여 Generic을 지원합니다.
설명 기존 Autowire 및 Qualifier의 기능에 대하여 확장하여 Spring4에서 추가로 지원하는 Generic 타입의 Autowire기능에 대하여 알아본다.
Autowire 및 Qualifier Autowiring 예제 다음은 Customer 클래스에 Person property로 Autowire하는 예제이다.
package com.egovframe.common; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; public class Customer { @Autowired private Person person; //... } Autowire의 문제점 다음과 같은경우 Person에 Autowire로 주입될수 없다.
&amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&amp;#34;&amp;gt; &amp;lt;bean class =&amp;#34;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&amp;#34;/&amp;gt; &amp;lt;bean id=&amp;#34;customer&amp;#34; class=&amp;#34;com.</description></item><item><title>Property Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/property-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/property-service/</guid><description>Property Service 개요 Property Service 는 시스템의 설치 환경에 관련된 정보나, 잦은 정보의 변경이 요구되는 경우 외부에서 그 정보를 관리하게 함으로써 시스템의 유연성을 높이기 위해서 제공하는 것으로 Spring Bean 설정 파일에 관리하고자 하는 정보를 입력(Bean 설정 파일 사용) 하거나 외부 파일에 정보 입력 후에 Bean 설정 파일에서 그 파일 위치를 입력하여 이용(외부 설정 파일 사용)할 수 있다.
Bean 설정 파일 사용 간단하게 설정하고자 할 때 사용할 수 있는 방법으로 별도의 외부파일을 두지 않고 Spring Bean 설정 파일을 이용할 수 있다.</description></item><item><title>N:1 파일 Partition 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-single_file_partition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-single_file_partition/</guid><description>N:1 파일 Partition 예제 설명 설정 Job 설정 N:1 Partition 예제의 Job 설정 파일인 partitionFileToOneFileJob.xml을 확인한다.
partitioner : 입력리소스 수 만큼 Master Step을 파티셔닝하는 MultiResourcePartitioner grid-size : 생성할 Context 수 writer : scope=“step” 설정 해지로 여러 Slave Step 들이 공유하는 EgovPartitionFlatFileItemWriter 사용(타겟파일이 하나이므로, 다른 파티셔닝과 달리 출력정보를 다루는 EgovOutputFileListener 설정이 필요 없음) ✔ 이 예제는 여러 Slave Step 들이 하나의 Writer를 공유하는 과정에서 Thread Safe 하도록 구성되어 있다
&amp;lt;job id=&amp;#34;partitionJob&amp;#34; restartable=&amp;#34;true&amp;#34; xmlns=&amp;#34;http://www.</description></item><item><title>JobExplorer</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job_explorer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-job_explorer/</guid><description/></item><item><title>JobOperator</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/barch-core-job_operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/barch-core-job_operator/</guid><description/></item><item><title>MyBatis 적용 가이드</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mybatis-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/dataaccess-mybatis-guide/</guid><description>MyBatis 적용 가이드 개요 전자정부 표준프레임워크 기반 MyBatis 적용 가이드이다.
📁 ex-dataaccess-mybatis.zip
Step 1. pom.xml 변경 표준프레임워크 dataaccess artifact version을 다음과 같이 2.7.0으로 변경한다.
&amp;lt;!-- 실행환경 라이브러리 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;egovframework.rte&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;egovframework.rte.psl.dataaccess&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.7.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Step 2. 환경 설정 Step 2.1 XML 설정 Spring XML 설정 파일 상(ex: context-mapper.xml)에 다음과 같은 sqlSession bean을 추가한다.
Ex) context-mapper.xml
&amp;lt;!-- SqlSession setup for MyBatis Database Layer --&amp;gt; &amp;lt;bean id=&amp;#34;sqlSession&amp;#34; class=&amp;#34;org.mybatis.spring.SqlSessionFactoryBean&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;dataSource&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;mapperLocations&amp;#34; value=&amp;#34;classpath:/sqlmap/mappers/**/*.</description></item><item><title>Property Source</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/property-source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/property-source/</guid><description>Property Source 개요 Property Source는 property place-holder를 이용하여 xml의 bean설정에서 key값을 통해 가져올 수 있으며 코드상에서는 Environment를 이용하여 해당값을 가져올 수 있다.
기본적으로 properties파일을 통한 기능을 제공하고 있으며 추가적인 설정을 통해 DB의 테이블에서 property값을 가져오는 PropertySource를 제공하고 있다. 또한 사용자가 추가로 PropertySource를 정의할 수 있다.
Property-placeholder와 PropertySource Property-placeholder bean을 정의할 때 ${…}의 내용을 property placeholder를 이용하여 대체할 수 있었다. 해당 코드는 다음과 같다.
&amp;lt;context:property-placeholder location=&amp;#34;com/bank/config/datasource.properties&amp;#34;/&amp;gt; &amp;lt;bean id=&amp;#34;dataSource&amp;#34; class=&amp;#34;org.apache.commons.dbcp.BasicDataSource&amp;#34; destroy-method=&amp;#34;close&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driverClass&amp;#34; value=&amp;#34;${database.</description></item><item><title>스프링 WebFlux의 WebClient와 논블로킹 처리</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-reactive-webclient/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/web-reactive-webclient/</guid><description>WebClient 스프링 WebFlux는 리액티브, 논블로킹 HTTP 요청을 위한 WebClient를 제공한다. 웹 클라이언트는 리액티브 타입을 사용하는 함수형 API이기 때문에 선언적인(declarative) 프로그래밍이 가능하다. 웹플럭스 클라이언트와 서버는 동일한 논블로킹 코덱으로 요청, 응답을 인코딩, 디코딩한다.
설명 WebClient는 요청을 수행하기 위해 HTTP 클라이언트 라이브러리에 처리를 위임하며 아래와 같은 기능을 기본으로 제공한다.
Reactor Netty Jetty Reactive HttpClient Apache HttpComponents Others can be plugged via ClientHttpConnector. Configuration WebClient는 가장 간단하게는 스태틱 팩토리 메소드로 만들 수 있다.
WebClient.create() WebClient.</description></item><item><title>AOP 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/aop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/aop/</guid><description>AOP 서비스 개요 AOP 서비스는 관점지향 프로그래밍(Aspect Oriented Programming: AOP) 사상을 구현하고 지원한다. 실행환경 AOP 서비스는 Spring AOP를 사용한다. 본 장에서는 AOP의 개요 및 Spring의 AOP 지원을 중심으로 살펴본다.
설명 AOP 개요 개별 프로그래밍 언어는 프로그램 개발을 위해 고유한 관심사 분리(Separation of Concerns) 패러다임을 갖는다. 예를 들면 절차적 프로그래밍은 상태값을 갖지 않는 연속된 함수들의 실행을 프로그램으로 이해하고 모듈을 주요 분리 단위로 정의한다. 객체지향 프로그래밍은 일련의 함수 실행이 아닌 상호작용하는 객체들의 집합으로 보며 클래스를 주요 단위로 한다.</description></item><item><title>건너뛰기(Skip) 기능 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-skip_mgmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-skip_mgmt/</guid><description>건너뛰기(Skip) 기능 예제 개요 배치 수행 중, 데이터를 처리하는 과정에서 에러가 발생한 데이터를 건너뛰고 다음 데이터를 처리하는 기능을 보여주는 예제이다. EgovSkipSampleFunctionalTests 예제는 ItemReading,ItemProcessing, ItemWriting 에서 발생한 예외상황에 대해 정해진 설정대로 Skip을 수행되는 과정을 보여준다.
설명 설정 Job 설정 건너뛰기(Skip) 기능 예제의 Job 설정 파일인 skipSample.xml을 확인한다.
✔ skipSample의 Step 흐름 참고
Job 의 구성을 보면 Chunk 설정에 아래와 같은 설정이 있다.
skip-limit : Skip 할 수 있는 최대 횟수를 지정한다. &amp;lt;skippable-exception-classes&amp;gt; : Exception 범위를 지정한다.</description></item><item><title>Skip/Retry/Repeat</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-skip_repeat_retry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-skip_repeat_retry/</guid><description>Skip/Retry/Repeat 개요 Skip, Retry, Repeat은 효율적인 배치수행을 위해 필요한 기능들이다. Repeat 정책에 따라 Step과 Chunk가 반복적으로 수행되면서 데이터 Read, Process, Write 과정이 일어나는데, 여기서 Skip과 Retry 이용해 배치작업을 효율적으로 수행할 수 있다. 각 기능이 쓰이는 위치는 다음 그림을 참고한다.
설명 Skip Skip은 데이터를 처리하는 동안 설정된 Exception이 발생했을 경우, 해당 데이터 처리를 건너뛰는 기능이다. 데이터의 사소한 오류에 대해 Step의 실패처리 대신 Skip을 함으로써, 배치수행의 빈번한 실패를 줄일 수 있게 한다.</description></item><item><title>Spring Data</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/jpa-spring-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/jpa-spring-data/</guid><description>Spring Data Spring Data는 데이터베이스 관련 많은 하위 프로젝트를 포함하는 오픈 소스 프로젝트로, non-relational databases, map-reduce frameworks, and cloud based data services 등의 새로운 데이터 액세스 기술을 보다 쉽게 사용 할 수 있는 기능을 제공한다. 또한 관계형 데이터베이스 기술에 대한 향상된 지원도 제공한다.
Spring Data Project Category Sub-Project Description Relational Databases JPA Spring Data JPA - Simplifies the development of creating a JPA-based data access layer JDBC Extensions Support for Oracle RAC, Advanced Queuing, and Advanced datatypes.</description></item><item><title>@AspectJ 어노테이션을 이용한 AOP 지원</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/aop-aspectj/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/aop-aspectj/</guid><description>@AspectJ 어노테이션을 이용한 AOP 지원 개요 @AspectJ는 Java 5 어노테이션을 사용한 일반 Java 클래스로 관점(Aspect)를 정의하는 방식이다. @AspectJ 방식은 AspectJ 5 버전에서 소개되었으며, Spring은 2.0 버전부터 AspectJ 5 어노테이션을 지원한다. Spring AOP 실행환경은 AspectJ 컴파일러나 직조기(Weaver)에 대한 의존성이 없이 @AspectJ 어노테이션을 지원한다.
설명 @AspectJ 설정하기 @AspectJ를 사용하기 위해서 다음 코드를 Spring 설정에 추가한다.
&amp;lt;aop:aspectj-autoproxy/&amp;gt; 관점(Aspect) 정의하기 클래스에 @Aspect 어노테이션을 추가하여 Aspect를 생성한다. @Aspect 설정이 되어 있는 경우 Spring은 자동적으로 @Aspect 어노테이션을 포함한 클래스를 검색하여 Spring AOP 설정에 반영한다.</description></item><item><title>Spring Data Repository</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/jpa-repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/jpa-repository/</guid><description>Repository 설명 일반적으로 Data Access Layer를 구현하기 위해서는 상당량의 코드를 작성해야 한다. Spring Data에서는 Repository를 추상화하여 다양한 저장소에 접근하기 위한 Data Access Layer 구현 코드를 최소화함으로써 개발생산성을 높일 수 있도록 한다. 이는 Query Method를 통해 가능한데 Query Method란 메소드명만 가지고 쿼리를 만들 수 있다는 것이다. 특정 규칙에 맞게 메소드를 작성하면 개발자가 따로 Data Access 클래스를 만들지 않아도 Spring Data가 대신하여 해당 Database와 자동으로 매핑하여 결과를 가져다준다.
Repository 인터페이스를 상속받아 CRUD 관련 메소드들을 제공하는 CrudRepository 인터페이스와 Paging 처리 기능이 제공되는 PagingAndSortingRepository 인터페이스를 살펴보도록 하겠다.</description></item><item><title>Ajax 지원 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/ajax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/ajax/</guid><description>Ajax 지원 서비스 개요 일반적으로 Ajax 기능은 javascript 언어로 개발하나, server-side 구현에 익숙한 J2EE 개발자들에게는 쉽지 않은 작업이 될 수 있다. Ajax 지원 서비스에서는 Ajax를 이용해 자주 사용되는 기능을 custom tag형태로 제공한다. 기능은 오픈소스 라이브러리인 AjaxTags를 이용한다.
설명 설치 시스템 환경 및 필요 라이브러리
JDK 1.5 Servlet container running Servlets 2.4+ and JSP 2.0+ (jsp-api 2.0,servlet-api 2.4) AjaxTags 라이브러리 설치 순서
AjaxTags Download 사이트에 가서 해당 라이브러리를 download한 후 WEB-INF/lib에 위치시킨다.</description></item><item><title>Environment</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/environment/</guid><description>Environment 개요 표준프레임워크 3.0부터는 (Spring 3.1부터) Environment interface를 제공한다.
Environment는 다음 기능의 접근을 제공한다.
Profile Property Environment는 ApplicationContext를 통해서 접근이 가능하며 다음과 같이 가져올 수 있다.
ApplicationContext ctx = new GenericApplicationContext(); Environment env = ctx.getEnvironment(); Profile 접근 Profile에 대한 자세한 설명 Profile은 등록할 bean들이 정의되어있는 논리적인 그룹을 말한다. Bean은 XML또는 Annotation을 통해 정의된 Profile값 중 활성화된 Profile로 할당된다. 이 때 현재 사용하는 Profile을 활성화하는 것이 바로 Environment의 역할이다. 또한 Profile은 default값으로 설정이 되어있어야 한다.</description></item><item><title>MultiDataProcessing</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-multidata_process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-multidata_process/</guid><description>MultiDataProcessing 개요 배치 수행시 다수의 리소스를 처리하고자 할 경우에는 일반적인 Job설정으로 처리할 수 없다. 전자정부 배치프레임워크에서는 MultiData Processing을 통해 다수의 리소스를 읽어 다수의 결과로 처리하거나 다수의 리소스를 읽어 하나의 결과로 처리하는 기능을 제공한다.
설명 다수(N개)의 리소스를 처리하는 방식은 N→1, N→N으로 구분된다.
MultiResourceItem처리: N개의 대상을 읽은 후, 읽은 개수만큼의 결과물을 만들어낸다. CompositeItem처리: N개의 대상을 읽은 후, 하나의 결과물을 만들어낸다. 두 방식을 개념적으로 비교하면 아래와 같다.
MultiResourceItem 처리 다수의 파일을 대상으로 동일한 유형의 Batch처리를 하고자 할 경우 MultiResourceItemReader를 사용하면 편리하다.</description></item><item><title>동기/비동기 처리 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-sync_async/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-sync_async/</guid><description>동기/비동기 처리 예제 개요 일괄(배치)처리 작업 수행 시, 작업처리가 종료될 때까지 대기하는 동기방식 처리와 작업처리의 종료를 Callback매커니즘을 이용하여 전달받는 비동기처리에 대한 예제를 보여준다.
설명 설정 Launcher 설정 동기/비동기 처리 예제의 Launcher 설정파일인 skipSample-job-launcher-context.xml 을 확인한다.
sync : 동기처리시 사용할 클래스 설정 async : 비동기처리시 사용할 클래스 설정 &amp;lt;bean id=&amp;#34;jobLauncher&amp;#34; class=&amp;#34;org.springframework.batch.core.launch.support.SimpleJobLauncher&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;jobRepository&amp;#34; ref=&amp;#34;jobRepository&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;taskExecutor&amp;#34; ref=&amp;#34;sync&amp;#34;/&amp;gt; &amp;lt;!-- 비동기시 ref=&amp;#34;async&amp;#34; --&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;!-- 동기 처리시 sync --&amp;gt; &amp;lt;bean id=&amp;#34;sync&amp;#34; class=&amp;#34;org.springframework.core.task.SyncTaskExecutor&amp;#34; /&amp;gt; &amp;lt;!</description></item><item><title>XML 스키마 기반 AOP 지원</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/aop-xmlschema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/aop-xmlschema/</guid><description>XML 스키마 기반 AOP 지원 개요 Java 5 버전을 사용할 수 없거나, XML 기반 설정을 선호한다면, Spring 2.0 이상에서 제공하는 XML 스키마 기반의 AOP를 사용할 수 있다. Spring은 관점(Aspect) 정의를 지원하기 위해 “aop” 네임스페이스를 제공한다. @AspectJ를 이용한 AOP 지원에서 사용된 포인트컷 표현식과 충고(Advice) 유형은 XML 스키마 기반 AOP 지원에도 동일하게 제공된다.
설명 관점(Aspect) 정의하기 Spring 어플리케이션 컨텍스트에서 빈으로 정의된 일반 Java 개체는 관점(Aspect)으로 정의될 수 있다. 관점(Aspect)은 &amp;lt;aop:aspect&amp;gt; 요소를 사용하여 정의한다.</description></item><item><title>Query Method</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/jpa-querymethod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/jpa-querymethod/</guid><description>Query Method 설명 User Guide Query Method JPA 모듈은 문자열로 쿼리를 정의하거나 메서드에서 파생되어진 쿼리를 사용하는 방법을 지원한다.
쿼리생성 스트링으로 쿼리를 정의하는 예시 :
public interface UserRepository extends Repository&amp;lt;User, Long&amp;gt; { List&amp;lt;User&amp;gt; findByEmailAddressAndLastname(String emailAddress, String lastname); JPA표준 API는 위의 스트링으로 정의된 쿼리를 다음 쿼리로 변경한다.
select u from User u where u.emailAddress = ?1 and u.lastname = ?2 지원하는 메서드 명 Keyword Sample JPQL snippet And findByLastnameAndFirstname … where x.lastname = ?</description></item><item><title>Cache Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/cache/</guid><description>Cache Service 개요 전자정부 프레임워크에서 Cache Service는 EhCache를 선정하여 가이드한다.
Spring 버전 3.1 이전에서는 EhCache에서 제공하는 CacheManager를 직접 사용한다. 3.1 이후 버전에서는 CacheManager Abstraction을 제공함으로써 Cache를 유연하게 사용할 수 있게 되었다. 아래에서는 EhCache의 설명과 Spring 3.1 이전의 EhCache 사용법에 대하여 알아본다.
설명 EhCache를 이용하기 위한 기본 설정 및 기본 사용법에 대해서 설명한다.
Bootstrap Source Cache를 사용하기 위해서 Cache Manager를 생성하는 방법을 샘플을 통해서 설명한다.
//클래스 패스를 이용하여 설정파일 읽어서 Cache Manager 생성하기.</description></item><item><title>History Management</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-history_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-history_management/</guid><description>History Management 개요 배치작업 처리 중의 정보는 JobRepository의 JobInstance, JobParams, JobExecution, StepExecution, key-value 쌍으로 값을 보관할 수 있는 공간인 ExecutionContext에 저장 및 갱신되어 history를 관리한다.
설명 JobInstance, JobParams, JobExecution, StepExecution, ExecutionContext 의 각각의 속성에 대해서 정리하였다.
BATCH_JOB_INSTANCE JobInstance 속성 설명 jobInstanceId JobInstance를 식별하는 ID version JobInstance 의 수정 횟수 jobName Job의 이름 jobKey JobInstance를 구분 짓는 JobParameters의 serialization BATCH_JOB_EXECUTION JobExecution 속성 설명 status BatchStatus는 실행 상태를 나타내는 객체이다, 실행하는 동안에는 BatchStatus,STARTED, 실행이 실패한 경우 BatchStatus.</description></item><item><title>Internationalization(국제화)</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/internationalization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/internationalization/</guid><description>Internationalization(국제화) 개요 전자정부 표준 프레임워크에서는 Spring MVC 에서 제공하는 LocaleResolver를 이용한다. 우리는 여기서 LocaleResolver를 알아보고 적용하는 설정과 다국어가 적용된 message resource 를 가져와 활용하는 것을 보도록 하겠다. Spring MVC 는 다국어를 지원하기 위하여 아래와 같은 종류의 LocaleResolver 를 제공하고 있다.
CookieLocaleResolver 쿠키를 이용한 locale정보 사용 SessionLocaleResolver 세션을 이용한 locale정보 사용 AcceptHeaderLocaleResolver 클라이언트의 브라우져에 설정된 locale정보 사용 Bean 설정 파일에 정의하지 않을 경우 AcceptHeaderLocaleResolver 를 default 로 적용된다.
설명 3가지의 LocaleResolver CookieLocaleResolver CookieLocaleResolver 를 설정하는 경우 사용자의 쿠키에 설정된 Locale 을 읽어 들인다.</description></item><item><title>기존 업무 재사용 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-job_reuse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-job_reuse/</guid><description>기존 업무 재사용 예제 개요 기존 업무를 배치의 ItemReader나 ItemWriter로 사용한 예제이다. 스프링 배치에서 제공하는 Item의 Adapter를 사용하면 XML설정만으로도 기존 업무를 손쉽게 사용할 수 있다. 스프링 배치에서 제공하는 Adapter 중에 ItemReaderAdapter와 PropertyExtractingDelegatingItemWriter클래스를 사용하여 기존 업무를 사용하는 기능을 예제로 제공한다.
설명 설정 Job 설정 기존 업무 재사용 예제의 Job 설정파일인 delegatingJob.xml을 확인한다.
아래의 예제에서는 targetObject로 정의된 기존 업무인 PersonService를 재사용한다. read시에는 targetMethod로 정의된 getData 메소드를 실행하고, write시에는 targetMethod로 정의된 processProcessPerson 메소드를 실행한다.</description></item><item><title>실행환경 AOP 가이드라인</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/aop-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/aop-guide/</guid><description>실행환경 AOP 가이드라인 개요 전자정부 실행환경은 XML Schema에 기반한 AOP 방법을 사용하며, 예외처리와 트랜잭션 처리에 적용하였다. XML Schema에 기반한 AOP 방법은 @AspectJ Annotation 기반 방법에 비해 횡단 관심사에 대한 설정관계를 파악하기 유리하다.
설명 예외 처리 실행환경은 DAO에서 발생한 Exception을 받아 Service단에서 처리할 수 있다. 실행환경에서 추가로 제공하는 Exception은 다음과 같다.
EgovBizException: 업무에서 Checked Exception인 경우에 공통으로 사용하는 Exception이다. 개발자가 특정한 오류에 대해서 throw하여 특정 메시지를 전달하고자 하는 경우에는 processException() 메소드를 이용하도록 한다.</description></item><item><title>EhCache</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/cache-ehcache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/cache-ehcache/</guid><description>EhCache 개요 전자정부 프레임워크에서 Cache Service는 EhCache를 선정하여 가이드한다.
Spring 버전 3.1 이전에서는 EhCache에서 제공하는 CacheManager를 직접 사용한다. 3.1 이후 버전에서는 CacheManager Abstraction을 제공함으로써 Cache를 유연하게 사용할 수 있게 되었다. 아래에서는 EhCache의 설명과 Spring 3.1이전의 EhCache 사용법에 대하여 알아본다.
설명 EhCache를 이용하기 위한 기본 설정 및 기본 사용법에 대해서 설명한다.
Bootstrap Source Cache를 사용하기 위해서 Cache Manager를 생성하는 방법을 샘플을 통해서 설명한다.
//클래스 패스를 이용하여 설정파일 읽어서 Cache Manager 생성하기. URL url = getClass().</description></item><item><title>동기/비동기 처리 예제</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-example-sync_async_v3.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-example-sync_async_v3.7/</guid><description>동기/비동기 처리 예제 개요 일괄(배치)처리 작업 수행 시, 작업처리가 종료될 때까지 대기하는 동기방식 처리와 작업처리의 종료를 Callback매커니즘을 이용하여 전달받는 비동기처리에 대한 예제를 보여준다.
설명 설정 Launcher 설정 동기/비동기 처리 예제의 Launcher 설정파일인 skipSample-job-launcher-context.xml 을 확인한다. Job 수행시, 동기와 비동기 방식으로 데이터를 처리할 수 있으며, 이 예제에서는 동기 처리가 기본값으로 설정되어 있다. 설정위치는 Launcher 설정파일의 jobLauncher 빈에서 taskExecutor 프로퍼티이며, 참조하는 값으로 다음 두 가지를 설정할 수 있다.
sync : 동기처리시 사용할 클래스 설정 async : 비동기처리시 사용할 클래스 설정 &amp;lt;bean id=&amp;#34;jobLauncher&amp;#34; class=&amp;#34;org.</description></item><item><title>MultiResource 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-multi_resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-multi_resource/</guid><description>MultiResource 예제 개요 한 step에서 여러개의 파일을 처리하는 기능을 예제로 제공한다. 스프링 배치에서는 MultiResourceItemReader와 MultiResourceItemWriter를 제공한다.
설명 설정 Job 설정 MultiResource 예제의 Job 설정파일인 multiResourceIoJob.xml을 확인한다.
MultiResourceItemReader는 resources로 정의된 파일들을 읽어와서, 파일 한 개씩 delegate로 정의된 reader가 read하도록 전달한다.
아래의 예제는 실제로 파일을 read하는 reader는 delegate로 정의된 FlatFileItemReader이다.
&amp;lt;bean id=&amp;#34;itemReader&amp;#34; class=&amp;#34;org.springframework.batch.item.file.MultiResourceItemReader&amp;#34; scope=&amp;#34;step&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;delegate&amp;#34;&amp;gt; &amp;lt;bean class=&amp;#34;org.springframework.batch.item.file.FlatFileItemReader&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;lineMapper&amp;#34;&amp;gt; &amp;lt;bean class=&amp;#34;org.springframework.batch.item.file.mapping.DefaultLineMapper&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;lineTokenizer&amp;#34;&amp;gt; &amp;lt;bean class=&amp;#34;org.springframework.batch.item.file.transform.DelimitedLineTokenizer&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;delimiter&amp;#34; value=&amp;#34;,&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;names&amp;#34; value=&amp;#34;name,credit&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;fieldSetMapper&amp;#34;&amp;gt; &amp;lt;bean class=&amp;#34;org.</description></item><item><title>Security Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/security/</guid><description>Security Service 개요 인증, 권한 같은 일반적인(통상적인) 개념의 Security 서비스는 Spring Security를 활용한 공통기반 레이어에서 제공한다. 화면 처리 레이어의 Security 서비스는 입력값 유효성 검증 기능을 제공한다. 입력값 유효성 검증(validation)을 위한 기능은 Valang, Jakarta Commons, Spring 등에서 제공하는데, 여기서는 기반 오픈소스로 Jakarta Commons Validator를 선택했다. MVC 프레임워크인 Spring MVC와 Jakarta Commons Validator의 연계와 활용방안을 설명한다.
설명 Jakarta Commons Validator는 필수값, 각종 primitive type(int,long,float…), 최대-최소길이, 이메일, 신용카드번호등의 값 체크등을 할 수 있도록 Template이 제공된다.</description></item><item><title/><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/mongodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/mongodb/</guid><description/></item><item><title>Cache Abstraction</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/cache-abstraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/cache-abstraction/</guid><description>Cache Abstraction 개요 Spring 3.1부터 Cache Service는 Cache 추상화(CacheManager Interface)와 Cache 추상화를 Java메소드에 제공할 수 있는 @Cacheable을 제공한다. Cache 추상화는 Spring의 트랜잭션기능과 유사하게 코드의 변화를 최소화하면서 Proxy를 통해 동작하게끔 한다. Cache 구현체가 아닌 Cache추상화만을 제공하며 실제 Cache Data저장소는 EhCache와 ConcurrentMap을 지원한다.
Cache Configuration Cache설정을 통하여 어떠한 Cache Data저장소를 쓸 것인지 결정할 수 있다. (EhCache/ConcurrentMap) Cache Manager CacheManager를 통해 설정과 상관없이 동일한 코드로 Cache에 접근할 수 있다. Cache Annotation 메소드의 Cache Annotation을 통해 쉽게 Cache데이터를 저장/삭제할 수 있다.</description></item><item><title>Spring Framework + Jakarta Commons Validator</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/security-jakarta-commons-validator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/security-jakarta-commons-validator/</guid><description>Spring Framework + Jakarta Commons Validator 개요 입력값 검증을 위한 Validation 기능은 Valang, Jakarta Commons, Spring 등에서 제공한다.
여기서는 Jakarta Commons Validator를 Spring Framework과 연동하여 사용하는 방법에 대해서 설명하고자 한다.
Jakarta Commons Validator는 필수값, 각종 primitive type(int,long,float…), 최대-최소길이, 이메일, 신용카드번호등의 값 체크등을 할 수 있도록 Template이 제공된다.
이 Template은 Java 뿐 아니라 Javascript로도 제공되어 client-side, server-side의 검증을 함께 할 수 있으며, Configuration과 에러메시지를 client-side, server-side 별로 따로 하지 않고 한곳에 같이 쓰는 관리상의 장점이 있다.</description></item><item><title>JdbcPaging 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-db_jdbcpaging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-db_jdbcpaging/</guid><description>JdbcPaging 예제 개요 DB를 페이지단위로 읽어서 데이터처리를 수행하는 기능을 예제로 제공한다. 스프링 배치에서는 JdbcPagingItemReader,JpaPagingItemReader등을 제공한다.또한 paging쿼리를 제공하는 인터페이스 PagingQueryProvider를 제공하며 각 DB종류별로 OraclePagingQueryProvider, HsqlPagingQueryProvider, MySqlPagingQueryProvider, SqlServerPagingQueryProvider, SybasePagingQueryProvider 등의 구현클래스를 제공한다.
설명 설정 Job 설정 JdbcPaging 예제의 Job 설정파일인 jdbcPagingIoJob.xml을 확인한다.
JdbcPagingItemReader는 아래와 같은 설정들을 포함한다.
dataSource : 데이터베이스 rowMapper : SQL의 실행 결과인 ResultSet와 객체를 매핑 시키는 역할 queryProvider : 페이징 처리를 위한 쿼리를 제공하는 역할 pageSize : 한 페이지의 DATA 수 parameterValues : 쿼리의 파라미터 값을 Map으로 지정 &amp;lt;bean id=&amp;#34;itemReader&amp;#34; class=&amp;#34;org.</description></item><item><title>Listener (Pre/Post Processing)</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-listener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-listener/</guid><description>Listener (Pre/Post Processing) 개요 배치 수행시 Job을 구성하는 각 단계(Job, Step, Chunk, Read, Process, Write)에서 이벤트설정을 통해 다양한 추가구성을 할 수 있다. 이벤트는 Listener를 활용하여 설정하고, 배치 수행중 설정한 Listener를 접하게 되면 관련된 이벤트를 수행하게 된다.
설명 JobListener(Intercepting Job Execution) Job 실행 과정에서, 사용자가 정의한 코드가 실행 될 수 있도록 Job의 라이프사이클에서 다양한 이벤트로 알려주는 것은 유용하다.SimpleJob는 적절한 시간에 JobListener를 호출하도록 한다.
public interface JobExecutionListener { void beforeJob(JobExecution jobExecution); void afterJob(JobExecution jobExecution); } JobListeners는 Job의 리스너들을 통해 SimpleJob에 추가 될 수 있다.</description></item><item><title>Resource 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/resource/</guid><description>Resource 서비스 개요 리소스를 활용하여 가장 많이 사용하는 메시지 제공 서비스를 살펴본다. 메시지 제공 서비스는 미리 정의된 파일에서 메시지를 읽어 들인 후, 오류 발생시 또는 안내 메시지를 제공하기 위해 키값에 해당하는 메시지를 가져오는 기능을 제공한다.
설명 Message Basic 메시지를 활용하기 위한 기본 설정 및 활용에 대해서 예제를 중심으로 설명한다.
Configuration &amp;lt;bean name=&amp;#34;messageSource&amp;#34; class=&amp;#34;org.springframework.context.support.ResourceBundleMessageSource&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;useCodeAsDefaultMessage&amp;#34;&amp;gt; &amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;basenames&amp;#34;&amp;gt; &amp;lt;list&amp;gt; &amp;lt;value&amp;gt;egovframework-message&amp;lt;/value&amp;gt; &amp;lt;/list&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; 위의 설정에서”egovframework-message” 로 지정한 파일은 실제로는 egovframework-message.</description></item><item><title>Commons Validator에 validation rule 추가하기</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/security-validationa-add-rules-in-common-validator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/security-validationa-add-rules-in-common-validator/</guid><description>Commons Validator에 validation rule 추가하기 개요 Commons Validator는 primitive type, 필수값, 이메일등 흔히 사용되는 유형에 대한 validation rule을 template으로 제공하지만, 프로젝트의 특성에 따라 공통으로 사용되는 validation rule이 발생되고 이를 추가해야할 필요가 생길 수 있다. 공공프로젝트에서 흔히 사용되는 주민등록번호 validator를 추가해 봄으로써, validation rule을 추가하는 방법을 알아보고자 한다.
예제는 easycompany를 이용했다.
설명 Spring Module을 이용해서 Commons Validator를 사용한다면 아래와 같은 내용을 validation rule 정의 파일(validator-rules.xml 같은)에서 보았을 것이다.
&amp;lt;!--필수값 체크 validation rule--&amp;gt; &amp;lt;validator name=&amp;#34;required&amp;#34; classname=&amp;#34;org.</description></item><item><title>JdbcCursor 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-db_jdbccursor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-db_jdbccursor/</guid><description>JdbcCursor 예제 개요 DB를 한 행씩 읽어서 데이터처리를 수행하는 기능을 예제로 제공한다. 스프링 배치에서는 JdbcCursorItemReader, HibernateCursorItemReader를 제공한다.
설명 설정 Job 설정 JdbcCursor 예제의 Job 설정파일인 jdbcCursorIoJob.xml을 확인한다.
JdbcCursorItemReader는 아래와 같은 설정들을 포함한다.
dataSource : 데이터베이스 sql : 실행할 쿼리 verifyCursorPosition : 커서위치 확인여부 rowMapper : SQL의 실행 결과인 ResultSet와 객체를 매핑 시키는 역할 &amp;lt;bean id=&amp;#34;itemReader&amp;#34; class=&amp;#34;org.springframework.batch.item.database.JdbcCursorItemReader&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;dataSource&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;sql&amp;#34; value=&amp;#34;select ID, NAME, CREDIT from CUSTOMER&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;verifyCursorPosition&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;rowMapper&amp;#34;&amp;gt; &amp;lt;bean class=&amp;#34;egovframework.</description></item><item><title>Marshalling/Unmarshallig 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/marshalling-unmarshalling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/marshalling-unmarshalling/</guid><description>Marshalling/Unmarshallig 서비스 개요 Object/XML Mapping, 줄여서 O/X mapping은 Object를 XML문서로 변환하는데 이를 XML Mashalling 또는 Marshalling 이다. 반대로 XML문서를 Object로 변환하는 것은 Unmarshalling 이다.
설명 Spring Web Service OXM Client &amp;lt;------ XML ------&amp;gt; Server WS는 Server와 Client 두 대상 간의 데이터를 주고받는 기술 중 하나이다. 정보를 요청하는쪽이 Client이다.(Client는 Server가 될 수도 있고 일반 사용자가 될 수도 있다.) 요청한 정보를 받아서 알맞게 처리 후 결과값을 리턴하는 쪽이 Server이다.
Client(OXM) &amp;lt;------ XML(WSDL) ------&amp;gt; (OXM)Server WS는 XML(WSDL)형식으로 데이터를 주고받는다.</description></item><item><title>Spring Expression Language(SpEL)</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/spel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer-core/spel/</guid><description>Spring Expression Language(SpEL) 개요 Spring 3.0에서 처음 소개된 스프링 전용 표현식 언어로 강력하고 유연하게 사용된다.
SpEL은 빈 오브젝트에 직접 접근할 수 있는 표현식을 이용해서 프로퍼티 값을 능동적으로 가져오는 방법이며 가장 기본적이다. 또한 jsp에서 &amp;lt;spring:eval&amp;gt;태그를 사용하여 SpEL을 적용 할 수도 있다.
설명 빈 설정파일을 사용하여 SpEL적용 빈 프로퍼티에 값을 설정하면, 다른 빈이나 프로퍼티에 접근 가능하다.
다음의 빈에서 접근하는 예제이다. &amp;lt;bean id=&amp;#34;springTest&amp;#34; ..&amp;gt; &amp;lt;property name=&amp;#34;test&amp;#34; value=&amp;#34;Sample&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;testNames&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;name&amp;#34; value=&amp;#34;#{springTest.</description></item><item><title>병행처리</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-parallel_process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-parallel_process/</guid><description>병행처리 개요 대용량 데이터를 처리하는 배치수행에서 병렬처리를 이용하면, Job의 구성요소들이 여러 쓰레드 분산수행되어 빠른 시간 내에 효율적으로 작업을 완료할 수 있다. 스프링 배치에서 병렬처리 방식은 실행 유형별로 멀티쓰레드 방식, Parallel 방식, 파티셔닝 방식 등이 있다.
설명 멀티쓰레드(Multi-threaded Step) 병렬처리를 시작하는 간단한 방법은 Step 구성요소중 &amp;lt;tasklet&amp;gt; 속성에 TaskExecutor를 추가하는 것이다.
&amp;lt;step id=&amp;#34;loading&amp;#34;&amp;gt; &amp;lt;tasklet task-executor=&amp;#34;taskExecutor&amp;#34;&amp;gt;...&amp;lt;/tasklet&amp;gt; &amp;lt;/step&amp;gt; TaskExecutor 예제에서 TaskExecutor 인터페이스를 구현하기 위해 빈을 정의한다. TaskExecutor 는 스프링 인터페이스 표준이므로 상세한 내용은 스프링 가이드를 참고한다.</description></item><item><title>MongoDB support</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/mongodb-support3_5_1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/mongodb-support3_5_1/</guid><description>MongoDB support 3.5.1 설명 Spring Data MongoDB는 Spring Data의 하위 프로젝트로서 document-oriented storage를 지원하는 MongoDB에 대한 Data Access 기능을 제공한다.
MongoDB support 주요 기능 Spring configuration 지원 (@Configuration, XML namespace) 기본 처리를 효율적으로 지원하는 MongoTemplate helper 제공 Spring이 제공하는 Data Access Exception hierarchy 변환 기능 제공 Spring의 Conversion Service와 통합된 Feature Rich Object Mapping 기능 Annotation 기반 매핑 metadata Java 기반 Query, Criteria, Update DSLs Spring Data의 Repository 인페이스 지원 QueryDSL 등 1.</description></item><item><title>Code Base Exception</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-code_base_exception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-code_base_exception/</guid><description>Code Base Exception 개요 배치 처리시 Code 기반으로 에러를 처리 할 수 있도록 EgovBatchException를 통해서 지원한다. 데이터베이스 에러코드관리 테이블을 등록과 에러코드 데이터를 등록이 선행 되야지만 해당 서비스를 사용가능하다.
설명 Code Base Exception 데이터베이스 설정 C REATE TABLE BATCH_EXCEPTION_MESSAGE ( EX_ID BIGINT NOT NULL PRIMARY KEY, EX_KEY VARCHAR(255) NOT NULL, EX_MESSAGE VARCHAR(2500) NOT NULL ); I NSERT INTO BATCH_EXCEPTION_MESSAGE VALUES(1,&amp;#39;EGOVBATCH000001&amp;#39;,&amp;#39;배치실행 중 업무 관련 에러가 발생 하였습니다.&amp;#39;); I NSERT INTO BATCH_EXCEPTION_MESSAGE VALUES(2,&amp;#39;EGOVBATCH000002&amp;#39;,&amp;#39;배치실행 중 알수 없는 오류가 발생 하였습니다.</description></item><item><title>Ibatis 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-db-ibatis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-db-ibatis/</guid><description>Ibatis 예제 개요 iBatis를 사용하여 Database의 데이터를 읽고 쓰는 기능에 대한 예제를 제공한다. 스프링 배치에서는 IbatisPagingItemReader와 IbatisBatchItemWriter를 제공한다.
설명 설정 Job 설정 Ibatis 예제의 Job 설정파일인 ibatisIoJob.xml을 확인한다.
Ibatis 를 연동을 위해 Spring의 SqlMapClientFactoryBean을 통해 sql-map-config 설정 파일과 Ibatis 에 제공될 dataSource 설정한다. IbatisPagingItemReader와 IbatisBatchItemWriter는 sqlMapClient의 value값으로 정의된 설정파일을 통해 각각 queryId와 statementId의 value값으로 정의된 ID와 동일한 쿼리를 수행한다.
&amp;lt;bean id=&amp;#34;itemReader&amp;#34;class=&amp;#34;org.springframework.batch.item.database.IbatisPagingItemReader&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;queryId&amp;#34; value=&amp;#34;getAllCustomerCredits&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;sqlMapClient&amp;#34; ref=&amp;#34;sqlMapClient&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;itemWriter&amp;#34; class=&amp;#34;org.</description></item><item><title>UI Adaptor Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/ui-adaptor-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/ui-adaptor-service/</guid><description>UI Adaptor Service 개요 전자정부 표준프레임워크와 UI 솔루션(Rich Internet Application) 연동에 대해 살펴 본다. UI Adaptor를 적용하는 방식은 특정한 하나의 방법을 표준화하기 어렵다. 보통 Web Framework 과 UI 솔루션과의 연동을 하는 방법 중 가장 많이 사용하는 방식은 Controller 역할을 수행하는 Servlet 객체에서 업무 로직을 호출 전 데이터를 DTO 형태로 변화하여 업무 로직으로 넘기는 방식이다.
전자정부 표준프레임워크에서는 Spring MVC Annotation 기반으로 개발 시 요청되는 URI 와 Controller 클래스내의 메소드를 매핑하고 있다. 따라서 메소드의 파라미터로 넘어오는 객체가 request 객체가 아닌 업무용 DTO 클래스로 넘어올 수 있도록 가이드 하는 방식을 선택했다.</description></item><item><title>XML Manipulation Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/xml-manipulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/xml-manipulation/</guid><description>XML Manipulation Service 개요 XML Manipulation 서비스는 XML을 생성하고, 읽고, 쓰는 등과 같은 기능과 조작 기능을 제공하는 서비스이다. XML(Extensible Markup Language)은 W3C에서 다른 특수 목적의 마크업 언어를 만드는 용도에서 권장되는 다목적 마크업 언어이다.XML은 SGML의 단순화된 부분집합이지만, 수많은 종류의 데이터를 기술하는데 적용할 수 있다.XML은 주로 다른 시스템, 특히 인터넷에 연결된 시스템끼리 데이터를 쉽게 주고받을 수 있게 하여 HTML의 한계를 극복할 목적으로 만들어졌다. XML은 W3C에서 다른 특수 목적의 마크업 언어를 만드는 용도에서 권장되는 다목적 마크업 언어이다.</description></item><item><title>MongoDB Repositories</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/mongodb-repositories3_5_1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/mongodb-repositories3_5_1/</guid><description>MongoDB Repositories 3.5.1 설명 Spring Data MongoDB도 Spring Data repository 추상화 인터페이스를 지원한다. 이에 대한 내용은 Spring Data JPA 가이드 중 Repository 부분을 참조한다.
1. 시작하기 MongoDB에 대한 repository를 사용하기 위해서는 다음과 같은 mongo schem의 repositories 설정이 필요하다.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:mongo=&amp;#34;http://www.springframework.org/schema/data/mongo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd&amp;#34;&amp;gt; &amp;lt;mongo:mongo-client host=&amp;#34;localhost&amp;#34; port=&amp;#34;27017&amp;#34; credentials=&amp;#34;id:password@database&amp;#34; &amp;gt; &amp;lt;/mongo:mongo-client&amp;gt; &amp;lt;mongo:db-factory dbname=&amp;#34;database&amp;#34; mongo-ref=&amp;#34;mongo&amp;#34; /&amp;gt; &amp;lt;bean id=&amp;#34;mongoTemplate&amp;#34; class=&amp;#34;org.springframework.data.mongodb.core.MongoTemplate&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;mongoDbFactory&amp;#34; ref=&amp;#34;mongoDbFactory&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;!-- for Repository --&amp;gt; &amp;lt;mongo:repositories base-package=&amp;#34;egovframework.</description></item><item><title>센터 컷(CenterCut)</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-centercut-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-centercut-intro/</guid><description>센터 컷(CenterCut) 소개 개요 전자정부 표준프레임워크에서의 큐(Queue)를 사용하여 대용량 데이터 처리를 위해 센터 컷 방식의 배치 작업수행을 위한 가이드를 제공한다.
센터컷 가이드 구조 Unordered List Item기본적으로 센터컷의 구조는 큐(Queue)를 이용하는 부분을 제외하고는 배치 프로그램과 유사하다.
Unordered List Item처음 ItemReader를 사용하여 데이터를 읽고 큐에 넣은 Center-Cut Reading Step과, 읽어온 데이터를 가공 후 QueueSender를 통해 Queue에 넣는 구조이다.
Center-Cut Process Step은 큐에서 들어온 데이터를 읽고 처리 모듈(Busineess Proc)를 활용하여 데이터를 처리하는 구조이다.</description></item><item><title>FixedLength 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-file-fixedlength/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-file-fixedlength/</guid><description>FixedLength 예제 개요 플랫 파일의 데이터를 고정된 길이만큼 처리하는 기능을 예제로 제공한다. 스프링 배치에서는 플랫 파일을 처리하기 위해 FlatFileItemReader와 FlatFileItemWriter를 제공한다.
설명 설정 Job 설정 FixedLength 예제의 Job 설정파일인 fixedLengthIoJob.xml을 확인한다.
FlatFileItemReader는 아래와 같은 설정들을 포함한다.
resource : 처리해야 할 파일 lineMapper : 파일의 한 Line씩 처리하는 역할. lineTokenizer와 fieldSetMapper로 구성 lineTokenizer : FixedLengthTokenizer을 통해 각 Line을 읽어 고정된 위치로 분리하여 fieldSet객체로 만들어 줌 fieldSetMapper : FieldSet을 다시 객체로 매핑시켜줌 &amp;lt;bean id=&amp;#34;itemReader&amp;#34; class=&amp;#34;org.</description></item><item><title>Object Pooling Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/object-pooling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/object-pooling/</guid><description>Object Pooling Service 개요 객체에 대한 Pooling 기능을 제공하는 서비스이다. 객체의 생성 비용이 크고,생성 횟수가 많으면, 평균적으로 사용되는 객체의 수가 적은 경우,성능을 향상시키기 위해서 사용한다. Object Pool은 소프트웨어 디자인 패턴으로서, 객체를 필요에 따라 생성하고 파괴하는 방식이 아닌,적절한 개수의 객체를 미리 사용 가능한 상태로 생성하여 이를 이용하는 방식이다.Client는 Pool에 객체를 요청하여 객체를 얻은 후, 업무를 수행한다. 얻어온 객체를 이용하여 업무 수행을 끝마친 후, 객체를 파괴하는 것이 아니라 Pool에게 돌려주어 다른 Client가 사용할 수 있도록 한다.</description></item><item><title>Asynchronous request processing</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/asynchronous-request-processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/asynchronous-request-processing/</guid><description>Asynchronous request processing 개요 기존의 요청 처리는 하나의 요청에 대해 한 개의 쓰레드를 사용하였다. 하나의 쓰레드에서 요청-응답 과정을 모두 처리하기 때문에 요청처리 이후 응답이 오기까지 쓰레드를 대기상태로 유지하였다. 그러나 서버와의 연결을 유지한채 대기상태로 있는 것이 아니라 서버와의 처리를 계속 이어가게 해주기 위해서는 이러한 기존의 처리에 한계가 있었다.
Servlet 3.0에서 제공하는 비동기 요청 처리는 쓰레드가 대기상태로 있는 것이 아니라 요청을 처리하는 Servlet 쓰레드가 요청후 바로 반환되고 내부의 다른 쓰레드가 이를 처리했다가 처리완료 후 응답처리 리소스가 가용할 때 Servlet쓰레드가 응답처리를 계속 이어가게 해 주는 것이다.</description></item><item><title/><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/crypto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/crypto/</guid><description>Encryption/Decryption과 crypto 간소화를 crypto라는 목록에 넣기 위해 생성. 좌측 네비게이션 바에는 보이지만, 클릭과 url접근은 안 됨.</description></item><item><title>Delimited 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-file_delimited/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-file_delimited/</guid><description>Delimited 예제 개요 플랫 파일의 데이터를 구분자(delimiter)로 구분하여 처리하는 기능을 예제로 제공한다. 스프링 배치에서는 플랫 파일을 처리하기 위해 FlatFileItemReader와 FlatFileItemWriter를 제공한다.
설명 설정 Job 설정 Delimited 예제의 Job 설정파일인 delimitedIoJob.xml을 확인한다.
FlatFileItemReader는 아래와 같은 설정들을 포함한다.
resource : 처리해야 할 파일 lineMapper : 파일의 한 Line씩 처리하는 역할. lineTokenizer와 fieldSetMapper로 구성 lineTokenizer : DelimitedLineTokenizer을 통해 각 Line을 읽어 구분자로 분리하여 fieldSet객체로 만들어 줌 fieldSetMapper : FieldSet을 다시 객체로 매핑시켜줌 &amp;lt;bean id=&amp;#34;itemReader&amp;#34; class=&amp;#34;org.</description></item><item><title>이벤트알림 템플릿 관리</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-event_notice_template_mgmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-event_notice_template_mgmt/</guid><description>이벤트알림 템플릿 관리 개요 전자정부 표준프레임워크의 배치 수행중 특정시점에 이벤트가 발생하는 경우 EventNoticeTrigger 인터페이스를 활용하여 SMS, Email 등을 통해 정보를 전달할 수 있는 추상화된 외부알림 access 관리기능이다.
설명 EventNoticeTrigger EventNoticeTrigger 는 이벤트 알림 기능을 사용하도록 추상화된 인터페이스이다.
메소드는 트리거를 호출하는 invoke 메소드를 파라메터 타입별로 구성하였고, 모든 메소드의 리턴타입은 void 이다.
메소드 파라메터 설명 invoke() 없음 파라메터 없이 이벤트호출 ‌로직 구현 invoke(StepExecution) StepExecution 파라메터인 StepExecution 정보를 활용하는 로직 구현 invoke(JobExecution) JobExecution 파라메터인 JobExecution 정보를 활용하는 로직 구현 invoke(Exception) Exception 파라메터인 Execption 정보를 활용하는 로직 구현 EgovEventNoticeTrigger EgovEventNoticeTrigger 클래스는 EventNoticeTrigger 인터페이스를 상속받은 형태로, 파라메터 타입별로 이벤트 알림 기능(Email전송, SMS전송)을 호출하기 위한 invoke 메소드를 갖고 있다.</description></item><item><title>jQuery 가이드</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/jquery-ajax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/jquery-ajax/</guid><description>jQuery 가이드 개요 jQuery는 브라우저 호환성이 있는 다양한 기능을 제공하는 자바스크립트 라이브러리이다. jQuery에서 제공하는 오픈 라이브러리들을 통해 java script로 ajax, event, 다양한 ui 기능 등을 구현할 수 있으며 위키가이드에서는 jQuery의 기본적인 몇가지 기능(ajax, callback함수, post호출 등)에 대하여 살펴본다.
자세한 내용은 jQuery 사이트를 살펴보도록 한다.
jQuery ajax의 다양한 기능들 중 기본Ajax기능과 응용을 통한 콤보박스, Select박스의 간단한 화면처리에 대하여 가이드한다.
jQuery ajax 기본기능
jQuery.ajax() jQuery.get() jQuery.post() jQuery ajax 응용
Select box Tabs 설정 jQuery를 이용하기 위해서는 jQuery java script를 추가해주어야 한다.</description></item><item><title>ORM 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm/</guid><description>ORM 서비스 개요 객체 모델링(Object Oriented Modeling)과 관계형 데이터 모델링(Relational Data Modeling) 사이의 불일치를 해결해 주는 OR Mapping 서비스로 자바 표준인 JPA를 표준 서비스로 제시하고 구현체로는 JPA 구현체중에 가장 성능이 우수한 것으로 알려진 Hibernate를 이용하였다. 서비스의 특징을 살펴보면 다음과 같다.
특정 DBMS에 영향을 받지 않으므로 DBMS가 변경되더라도 데이터 액세스 처리 코드에 대한 변경없이 설정 정보의 변경만으로도 동작 가능하다. SQL을 작성하고 SQL 실행 결과로부터 전달하고자 하는 객체로 변경하는 코드를 작성하는 시간이 줄어든다.</description></item><item><title>Entities</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-entities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-entities/</guid><description>Entities ORM 서비스를 구성하는 가장 기초적인 클래스로 어플리케이션에서 다루고자 하는 테이블에 대응하여 구성할 수 있으며 테이블이 포함하는 컬럼에 대응한 속성들을 가지고 있다.
기본 필요 요건 Entity를 구성하기 위한 아래와 같은 요건이 있다.(JPA요건)
[필수] Entity annotation 선언 필요 ( 혹은 XML 설정파일에 정의 ) @Entity public class User { } [필수] Argument 없는 생성자 필요 public User(){ } [필수] 최상위레벨 클래스로 생성되어야 하고 enum,interface로 정의될 수 없음 [필수] final 클래스로 선언될 수 없음 [필수] Primary Key 있어야 함 : @Id라는 Annotation 표기 @Id private String userId; [권장] Serializable 인터페이스 구현 public class User implements Serializable { private static final long serialVersionUID = -8077677670915867738L; } [권장] 속성 정보 접근을 위한 getter, setter 정의 private String userName; public String getUserName() { return userName; } public void setUserName(String userName) { this.</description></item><item><title>Encryption/Decryption Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/crypto-encryption-decryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/crypto-encryption-decryption/</guid><description>Encryption/Decryption Service 개요 암호화는 시큐리티에 대처하는 가장 강력한 수단이다. 이때 본래의 메시지를 평문(Plan Text,Clear Text)이라고 부르고, 암호화된 메시지는 암호문(Cipher Text,Cryptogram)이라고 부른다. 암호화(Encryption,Ciphering)는 메시지의 내용이 불명확하도록 평문을 재구성하여 암호문을 만드는 것인데, 이 때 사용되는 메시지의 재구성 방법을 암호화 알고리즘(Encryption Algorithm)이라고 부른다. 암호화 알고리즘에서는 암호화의 비밀성을 높이기 위해 키(Key)를 사용하기도 한다. 복호화(Decyption,decipheing)란 암호화의 역과정으로, 불명확한 메시지로부터 본래의 메시지를 환원하는 과정이다. 일반적으로 복호화에도 암호화에 사용된 것과 동일한 알고리즘이 사용된다. 그리고 암호화 기법을 적용하는 암호화 및 복호화 과정으로 구성된 시스템을 암호계(Crypto System)라고 부른다.</description></item><item><title>CompositeItem 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-composite_item/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-composite_item/</guid><description>CompositItem 예제 개요 서로 다른 유형으로 업무 처리하는 예제로 스프링 배치에서는 CompositeItemProcessor와 CompositeItemWriter를 제공한다. CompositeItemWriter를 사용하여 서로 다른 타입의 writer로 업무를 처리하는 기능을 예제로 제공한다.
설명 설정 Job 설정 CompositeItem 예제의 Job 설정파일인 compositeItemWriterSampleJob.xml을 확인한다.
CompositeItemWriter는 Item을 delegetes으로 정의된 writer에게 각각 전달하여 처리하도록 한다. 아래의 예제에서는 tradeDao, fileItemWriter1, fileItemWriter2 총 3개의 writer로 설정되어 있다.
✔CompositeItemWriter 사용시에는 step에 delegetes으로 정의된 writer들은 streams로 설정하여야 한다.
&amp;lt;job id=&amp;#34;compositeItemWriterJob&amp;#34; xmlns=&amp;#34;http://www.springframework.org/schema/batch&amp;#34; &amp;gt; &amp;lt;step id=&amp;#34;compositeItemWriterStep1&amp;#34;&amp;gt; &amp;lt;tasklet&amp;gt; &amp;lt;chunk reader=&amp;#34;fileItemReader&amp;#34; processor=&amp;#34;processor&amp;#34; writer=&amp;#34;compositeWriter&amp;#34; commit-interval=&amp;#34;1&amp;#34;&amp;gt; &amp;lt;streams&amp;gt; &amp;lt;stream ref=&amp;#34;fileItemReader&amp;#34;/&amp;gt; &amp;lt;stream ref=&amp;#34;fileItemWriter1&amp;#34;/&amp;gt; &amp;lt;stream ref=&amp;#34;fileItemWriter2&amp;#34;/&amp;gt; &amp;lt;/streams&amp;gt; &amp;lt;/chunk&amp;gt; &amp;lt;/tasklet&amp;gt; &amp;lt;/step&amp;gt; &amp;lt;/job&amp;gt; &amp;lt;bean id=&amp;#34;compositeWriter&amp;#34; class=&amp;#34;org.</description></item><item><title>Flow Control</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-flow_control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/batch-layer/batch-core-flow_control/</guid><description>Flow Control 개요 Job 내부에는 여러 Step 들이 존재할 수 있고, 각 Step 사이의 흐름을 관리할 필요가 있다. Step 내의 next 설정과 Desision 설정으로 Job을 수행하다 한 Step의 처리결과에 따라 다른 Step을 선택하여 수행할 수 있고, 특정 Step의 실패가 Job 전체의 실패로 이어지지 않도록 구성할 수 있다.
설명 흐름 처리(Controlling Step Flow) Sequential Flow 가장 간단한 시나리오의 Job은 모든 Step을 순서대로 실행 하는 것이다.
위와 같은 Job의 실행은 Step 엘리먼트의 &amp;rsquo;next&amp;rsquo; 어트리뷰트를 이용해서 설정할 수 있다.</description></item><item><title>WebSocket</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/websocket/</guid><description>WebSocket 개요 WebSocket 은 HTTP 환경에서 소켓 통신을 지원하기 위한 Spring 기술이다. Spring 은 기본적으로 WebSocket sub-protocol 로 STOMP 를 사용한다.
(RFC6455는 웹 어플리케이션을 위한 새 기능으로 WebSocket protocol을 정의한다. 서버와 클라이언트간 양방향 통신(full-duplex)을 지원하는데, 이것은 웹을 좀 더 인터랙티브하게 만들기 위해 사용하였던 java applet, XMLHttpRequest, Flash, ActiveX 등의 기술을 대체하기 위한 중요한 기능이 될 수 있다.)
HTTP 는 초기 handshake (protocol upgrade or switch 요청이고 서버가 동의하는 경우 101 응답을 내려 줌)를 위해서만 사용되며, handshake 가 성공하면 HTTP upgrade 요청에 기인하는 TCP 소켓이 open 된 채 서버와 클라이언트간 통신을 처리한다.</description></item><item><title>Crypto 간소화 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/crypto-simplification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/crypto-simplification/</guid><description>Crypto 간소화 서비스 개요 표준프레임워크 3.8 부터 ARIA 블록암호 알고리즘 기반 암/복호화 설정을 간소화 할 수 있는 방법을 제공한다. 내부적으로 필요한 설정을 가지고 있고, XML Schema를 통해 필요한 설정만을 추가할 수 있도록 제공한다. 또한 globals.properties 설정 파일의 중요 정보 Url, UserName, Password 항목을 암/복호화 처리 할 수 있도록 제공한다. 그외에 정보는 properties 파일에 암호화 데이터 설정후 #{egovEnvCryptoService.decrypt(&amp;rsquo;…&amp;rsquo;)} 복호화 기능을 제공한다.
XML namespace 및 schema 설정 설정 간소화 기능을 사용하기 위해서는 다음과 같은 xml 선언이 필요하다.</description></item><item><title>Entity Operation</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-entity_operation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-entity_operation/</guid><description>Entity Operation ORM서비스를 이용하여 특정 DB에 데이터를 입력, 수정, 조회, 삭제, 배치입력하는 방법에 대해 알아보도록 한다.
입력 EntityManager의 persist()메소드를 호출하여 DB에 단건의 데이터를 추가할 수 있다. persist() 메소드 호출시 대상이 되는 Entity를 입력 인자로 전달해야 한다.
Sample Source private Department addDepartment() throws Exception { // 1. insert a new Department information Department department = new Department(); String DepartmentId = &amp;#34;DEPT-0001&amp;#34;; department.setDeptId(DepartmentId); department.setDeptName(&amp;#34;SaleDept&amp;#34;); department.setDesc(&amp;#34;판매부서&amp;#34;); em.persist(department); ... return department; } 위의 예를 보면 EntityManager의 persist() 메소드에 department라는 Entity를 입력인자로 전달하여 처리하였다.</description></item><item><title>STOMP over WebSocket 개요 및 메시지 처리 흐름</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/websocket-stomp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/websocket-stomp/</guid><description>STOMP Over WebSocket Messaging Architecture http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-stomp
WebSocket protocol 은 content 를 정의하지 않은 채 2 가지 유형 (text, binary) 의 메시지로 분류했다. content 를 정의하지 않은 대신 client 와 서버는 sub-protocol (content 를 정의하는 고수준의 protocol) 을 사용하는 것을 합의해야 할 수도 있다. sub-protocol 을 사용하는 것은 option 이지만 client 와 server 모두 메시지를 어떻게 해석해야 할지를 이해하는 것이 필요하다.
1. STOMP 개요 STOMP 는 Ruby, Python, Perl 과 같은 스크립트 언어를 위해 고안된 단순한 메시징 프로토콜이다.</description></item><item><title>재시도(Restart) 예제</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-restart_mgmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-restart_mgmt/</guid><description>Restart 예제 개요 Job이 restart 되는 기능을 예제로 제공한다.
설명 설정 Job 설정 Restart 예제의 Job 설정파일인 restartFileSampleJob.xml을 확인한다.
job을 재실행할 수 있는지 여부를 Job 설정시 지정할 수 있다. 디폴트는 true이고 아래와 같이 restartable 설정에 따라 지정할 수 있다.
재실행 가능
&amp;lt;job id=&amp;#34;restartFileSampleJob&amp;#34; xmlns=&amp;#34;http://www.springframework.org/schema/batch&amp;#34;&amp;gt; &amp;lt;step id=&amp;#34;restartFileSampleStep1&amp;#34;&amp;gt; &amp;lt;tasklet&amp;gt; &amp;lt;chunk reader=&amp;#34;itemReader&amp;#34; processor=&amp;#34;itemProcessor&amp;#34; writer=&amp;#34;itemWriter&amp;#34; commit-interval=&amp;#34;5&amp;#34;/&amp;gt; &amp;lt;/tasklet&amp;gt; &amp;lt;/step&amp;gt; &amp;lt;/job&amp;gt; 재실행 불가능
&amp;lt;job id=&amp;#34;restartFileSampleJob&amp;#34; restartable=&amp;#34;false&amp;#34; xmlns=&amp;#34;http://www.springframework.org/schema/batch&amp;#34;&amp;gt; &amp;lt;step id=&amp;#34;restartFileSampleStep1&amp;#34;&amp;gt; &amp;lt;tasklet&amp;gt; &amp;lt;chunk reader=&amp;#34;itemReader&amp;#34; processor=&amp;#34;itemProcessor&amp;#34; writer=&amp;#34;itemWriter&amp;#34; commit-interval=&amp;#34;5&amp;#34;/&amp;gt; &amp;lt;/tasklet&amp;gt; &amp;lt;/step&amp;gt; &amp;lt;/job&amp;gt; JunitTest 구성 및 수행 JunitTest 구성 Restart 예제를 수행하고 배치작업 결과에 대한 검증을 위해 다음과 같이 @Test를 구성하였다.</description></item><item><title>Association Mapping</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-association_mapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-association_mapping/</guid><description>Association Mapping 두 클래스 사이의 Association 유형별 매핑 방법에 대해서 살펴보고자 한다. 그리고 다양한 Collection의 매핑 방법 및 Collection의 주요속성인 inverse,cascade에 대해서 샘플코드를 중심으로 살펴본다.
One To One Mapping 테이블간 1:1 매핑이 있을 경우에 각각의 Entity 클래스를 정의하고 클래스간 관계를 OneToOne 매핑으로 처리한다.
Sample Source @Entity public class Employee { @OneToOne private TravelProfile profile; } @Entity public class TravelProfile { @OneToOne private Employee employee; } 위의 예를 보면 Employee 와 TravelProfile가 각각 OneToOne이라는 Annotation을 기재하여 매핑처리한 것을 알수 있다.</description></item><item><title>SockJS Fallback Options</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/websocket-sockjs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/websocket-sockjs/</guid><description>SockJS Fallback Options http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-fallback
WebSocket 이 아직까지 모든 브라우저에서 지원되지 않거나 네트워크 프락시 제약등으로 사용할 수 없는 경우가 있다. 이에 Spring 은 fallback 옵션을 제공하는데 이는 SockJS protocol 에 기반으로 WebSocket API 를 emulate 한다.
1. SockJS 개요 SockJS 는 application 으로 하여금 WebSocket API 를 사용하는데 있다. 만약 WebSocket 사용이 불가한 경우에도 이를 fallback option 으로 제공하여 어떠한 코드 변화없이 WebSocket API 를 사용토록 한다.
SockJS 구성 SockJS protocol SockJS client - javascript library SockJS 서버 구현 - spring-websocket 모듈을 통해 제공 SockJS 는 여러가지 테크닉을 이용하여 다양한 브라우저 및 브라우저 버전을 지원한다.</description></item><item><title>FTP Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/ftp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/ftp/</guid><description>FTP Service 개요 전자정부 표준프레임워크는 FTP 서비스제공을 위해 Apache Commons Net™ [단순 클라이언트측의 기본적인 Internet Protocol의 구현의 FTP기능을 편리하게 제공]을 오픈 소스로 채택하였다.
Apache Commons Net™은 Network utility collection 이다. Apache Commons Net™은 단순 클라이언트측의 기본적인 Internet Protocol을 구현함으로서 기본적인 프로토콜 access가 목적이기 때문에 부분적으로 object-orient 규칙에 위배가 되는 사항이 있다는 것을 참고적으로 알고 있어야 한다.
FTP정의 FTP란 FTP (File Transfer Protocol) 파일 전송 프로토콜로 FTP[에프 티 피]는 인터넷상의 컴퓨터들 간에 파일을 교환하기 위한 표준 프로토콜로서 가장 간단한 방법이기도 하다.</description></item><item><title>배치실행환경 예제 JUnit Test 설명</title><link>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-run_junit_test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/runtime-example/individual-example/batch-layer/batch-example-run_junit_test/</guid><description>배치실행환경 예제 JUnit Test 설명 개요 배치실행환경 예제에서는 JUnit을 이용하여 배치를 수행하고 성공여부 판단 및 테스트 내용 확인을 한다. 초보 사용자의 이해를 돕기위해 예제에서 공통으로 사용하는 JUnitTest의 기본설정과 테스트 수행방법을 설명한다.
설명 예제 JUnit Test 기본 구조 @ContextConfiguration ContextConfiguration 은 컨텍스트를 얻어 그 내용을 참조하는 역할을 하며, 배치실행환경 예제에서는 배치수행에 필요한 설정파일들을 여기서 참조하도록 설정되어 있다.
✔ Launcher설정파일, Job설정파일, JobLauncherTestUtils를 사용하기 위한 별도의 설정파일(ex.job-runner-context.xml) 등이 명시된다.
@ContextConfiguration(locations = { &amp;#34;/egovframework/batch/simple-job-launcher-context.xml&amp;#34;, &amp;#34;/egovframework/batch/jobs/parallelJob.</description></item><item><title>JPA Query Language</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-query_language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-query_language/</guid><description>Query Language JPA에는 별도의 Query Language를 제공함으로써 객체 지향 관점에서 특정 객체에 대한 조회와 DB 유형에 독립적인 Query 정의를 가능하도록 한다. 구성요소 및 작성 방법은 아래와 같다.
구성요소 QL Statement 유형으로는 SELECT 문과 Update and Delete 문 두가지가 있다.
SELECT문 : SELECT 절 + FROM 절 + WHERE 절(Option) + ORDER BY 절(Option) + GROUP BY 절(Option) UPDATE&amp;amp;DELETE문 : UPDATE/DELETE 절 + WHERE 절 각각의 절에 대해서 아래에서 알아보고자 한다. SELECT 절 조회 결과값을 구체적으로 명시하고자 할 경우 정의한다.</description></item><item><title>UI - bootstrap</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/bootstrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/bootstrap/</guid><description>UI - bootstrap 개요 부트스트랩(Bootstrap)은 웹디자인을 쉽게 하기 위해 트위터에서 오픈 소스로 공개한 프런트 엔드 프레임워크로, 유연한 HTML, CSS, JavaScript 템플릿과 UI컴포넌트, 인터렉션을 제공하여 손 쉽게 웹 사이트를 구축할 수 있는 시작점이 된다.
부트스트랩의 장점은 크게 다음과 같다.
부트스트랩 3 이후부터 모바일 중심의 프레임워크이다 다양한 브라우저들을 지원한다. 반응형 웹에 최적화 되어있다. 부트스트랩은 스마트폰, 태블릿, 데스크탑에 최적화 되어 css가 조정이 된다. 시작이 용이하다. HTML, CSS만 알고 있어도 부트스트랩의 사용이 가능하다. 이러한 장점들로 인해 표준프레임워크에서는 실행환경 UI로 bootstrap을 선정하였다.</description></item><item><title>Mail 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/mail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/mail/</guid><description>Mail 서비스 개요 전자정부 프레임워크에서는 이메일 발송을 쉽게 처리하기 위해 Jakarta Commons Email API를 사용하고 있는데 Commons Email은 내부적으로 Java Mail API와 JavaBeans Activation API 를 제공하여 오픈 소스로 채택하였다
Apache Commons-Email은 Java Mail API를 근간으로 좀더 심플하게 메일을 보내는 방안을 제시한다.
Commons Email API는 메일 발송을 처리해주는 SimpleEmail, HtmlEmail과 같은 클래스를 제공하고 있으며, 이들 클래스를 사용하여 일반 텍스트메일, HTML 메일, 첨부 메일 등을 매우 간단(simple)하게 발송할 수 있다.
Email Sample Code는 다음과 같다.</description></item><item><title>Native SQL</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-native_sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-native_sql/</guid><description>Native SQL 기본적으로 CRUD 작업을 할 때 JPA 기본 API를 사용하거나 QL을 이용하여 수행한다. 그러나 특정 DBMS에서 제공하는 기능을 사용할 수 있도록 하기 위해 Native SQL 사용을 지원한다.
기본적인 사용 방법 entityManager.createNativeQuery() 메소드를 이용하여 Native SQL을 실행할 수 있다.
기본 리스트 조회 SQL을 통해 하나의 테이블을 대상으로 조회 작업을 수행할 수 있다.
Sample Source StringBuffer qlBuf = new StringBuffer(); qlBuf.append(&amp;#34;SELECT * &amp;#34;); qlBuf.append(&amp;#34;FROM DEPARTMENT &amp;#34;); qlBuf.append(&amp;#34;WHERE DEPT_NAME like :condition &amp;#34;); qlBuf.</description></item><item><title>Compress/Decompress Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/compress-decompress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/compress-decompress/</guid><description>Compress/Decompress Service 개요 전자정부 프레임워크에서는 다양한 압축방식을 개발자들에게 편리한 API를 제공하는 Jakarta Commons의 Compress를 오픈소스로 채택하였다.
Jakarta Commons의 Compress에서 지원하는 tar, zip and bzip2 파일등을 지원한다.
현재 Commons Compress API 에서는 아래의 Packages를 제공하고 있다.
org.apache.commons.compress.archivers org.apache.commons.compress.archivers.ar org.apache.commons.compress.archivers.cpio org.apache.commons.compress.archivers.jar org.apache.commons.compress.archivers.tar org.apache.commons.compress.archivers.zip org.apache.commons.compress.changes org.apache.commons.compress.compressors org.apache.commons.compress.compressors.bzip2 org.apache.commons.compress.compressors.gzip org.apache.commons.compress.utils 보다 자세한 사항은 Commons Compress API를 참고하기 바란다.
설명 압축이란 파일에 저장되어 있는 정보를 압축하여 보다 적은 기억 공간에 동일한 정보를 저장하는 기술이다.
일반적으로 정보에 포함되어 있는 중복된 내용을 삭제하거나 보다 적은 길이의 코드를 사용하여 정보를 표현하는 방법을 사용하여 저장에 필요한 공간의 크기를 줄인다.</description></item><item><title>UX/UI Controller Component</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/uxui-controller-component/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/uxui-controller-component/</guid><description>UX/UI Controller Component 개요 전자정부에서 효율적인 스마트 전자정부 기반시스템의 구축•운영을 통해 전자정부의 서비스 품질 UX 레이어는 UI/UX Controller Component, JavaScript Module App Framework, HTML5, CSS3 서비스를 제공한다. 오픈소스는 JQuery Mobile을 채택하였으며 jQuery Mobile은 html5, CSS3, javascript를 제공한다. 오픈 소스를 Customizing 하여 UI레이어의 기능을 사용 하며 내용은 아래와 같다 UI/UX Controller Component 모바일 웹 사용자 환경(UX/UI)에 대한 유연한 대응을 위해 Touch Optimized 된 필수 UI 컨트롤러 컴포넌트를 제공한다. HTML5는 모바일 웹 페이지 구성 시 사용 할 수 있는 마크업 언어로서 모바일 특화 태그 밑 디바이스 API를 제공한다.</description></item><item><title>Concurrency</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-concurrency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-concurrency/</guid><description>Concurrency 동시에 동일한 데이터에 접근할 때에 데이터에 대한 접근을 제어하기 위해 Optimistic Locking을 지원한다. 한편 Hibernate의 Native API를 통해서는 지원 가능한 Pessimistic Locking 은 JPA2.0 버전에 정의될 예정이다.
Optimistic Locking Without Locking Source @Test public void testUpdateUserWithoutOptimisticLocking() throws Exception { // 1. 테스트를 위한 신규 데이터를 입력 newTransaction(); addDepartmentUserAtOnce(); closeTransaction(); // 2. 동일한 식별자를 이용하여 User 정보를 두번 조회 newTransaction(); User fstUser = (User) em.find(User.class,&amp;#34;User1&amp;#34;); User scdUser = (User) em.find(User.class,&amp;#34;User1&amp;#34;); closeTransaction(); // 3.</description></item><item><title>압축 파일의 종류</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/compression-file-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/compression-file-types/</guid><description>압축 파일의 종류 압축 파일 설명 .alz 이스트소프트에서 개발한 압축 형식입니다. 분할 압축을 할 경우 확장자는 (ALZip 으로 생성) alz, a00, a01…형식으로 생성됨. .ace ACE, WinAce에서 이용하는 압축 형식입니다. 분할 압축을 할 경우 확장자는 ace, c00, c01, … 형식으로 생성됨. .arc DOS용 프로그램 pkarc.com, pkxarc.com에서 사용되는 압축 형식. .arj DOS용 프로그램 arj.exe, 윈도우용 프로그램 WinArj에서 이용하는 압축 형식. 분할 압축을 할 경우 확장자는 arj, a01, a02,… 형식으로 생기게 됨. .b64 인터넷에서 문서를 주고 받을 때 사용하는 형식으로 BASE64MIME 형식으로 인코딩된 파일임.</description></item><item><title>HTML5 CSS3.0 JavaScript Module App Framework 기본 활용</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/html5-css3.0-javascript-module-app-framework-basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/presentation-layer/html5-css3.0-javascript-module-app-framework-basic/</guid><description>HTML5 CSS3.0 JavaScript Module App Framework 기본 활용 개요 전자정부에서 효율적인 스마트 전자정부 기반 시스템의 구축•운영을 위해 전자정부의 서비스 품질 UX 레이어로 UI/UX Controller Component, HTML5, CSS3, JavaScript Module App Framework 서비스를 제공한다. 오픈소스는 JQuery Mobile을 채택하였으며 jQuery Mobile은 html5, CSS3, javascript를 제공한다. 이를 Customizing 하여 UI 레이어의 기능을 사용하며 내용은 아래와 같다.
UI/UX Controller Component : 모바일 웹 사용자 환경(UX/UI)에 대한 유연한 대응을 위해 Touch Optimized 된 필수 UI 컨트롤러 컴포넌트를 제공한다.</description></item><item><title>Cache Handling</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-cache_handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-cache_handling/</guid><description>Cache Handling 입력 인자로 전달된 객체를 정의된 테이블로 매핑시켜 데이터 액세스 처리를 수행해야 하는데 JPA에서는 이로 인해 발생 가능한 성능 이슈를 개선하기 위해 Cache를 활용한다. 현재 표준버전에서는 1 level Cache 만을 정의하고 있다. JPA 2.0에서는 2level Cache 정의 추가됨.
1 Level Cache Entity Manager 내부에 정의된 Cache로, 트랜잭션의 시작과 종료 사이에서 사용되며 한 트랜잭션 내에서 읽혀진 객체들을 보관하는 역할을 수행한다. JPA 구현체는 하나의 트랜잭션 내에서 동일한 객체를 한 번 이상 Loading할 경우 2번째부터는 Cache로부터 해당 객체를 추출하고 또한, 한 트랜잭션 범위 내에서 객체의 속성 변경시 변경 사항은 트랜잭션 종료시에 자동적으로 DB에 반영하도록 한다.</description></item><item><title>File Upload/Download 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/file-upload-download-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/file-upload-download-service/</guid><description>File Upload/Download 서비스 개요 전자정부 프레임워크에서는 다양한 파일 업로드 API를 제공하는 Commons FileUpload를 오픈 소스로 채택하였다.
Spring 에서는 Commons FileUpload를 사용하여 싱글 파일 업로드에 대하여 가이드 하고 있다. 현재 Spring에서 싱글 파일 업로드에 대해서 매우 좋은 api를 제공해주고 있으나 멀티플 파일 업로드시에 동일한 이름의 여러 개의 파일을 올리려고 할 때 오류가 발생한다.
오류 사항에 대해서는 multipart multi file upload 지원 문제를 참고.
본 매뉴얼에서는 싱글 파일 업로드 보다 멀티플 파일 업로드를 가능하도록 그 대안에 대하여 설명하고자 한다.</description></item><item><title>Fetch Strategy</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-fetch_strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-fetch_strategy/</guid><description>Fetch Strategy ORM 서비스는 기본적으로 Entity간의 연관관계를 정의하고 정의된 연관관계를 가지고 관련 Entity를 추출하여 사용한다. 관련 Entity를 추출하는데 기본적으로 Lazy Loading이란 기법을 통해서 객체가 실제로 필요하기 전까지 SQL을 실행하지 않고 Proxy 객체로 리턴하도록 하고 한다. 그러나 이러한 Lazy Loading으로 처리하게 되면 Lazy Loading을 하지 않는 것에 대비하여 필요시점에 쿼리를 여러번 수행해야 하는 문제가 발생한다. 이런 문제를 해결하기 위한 여러가지 Fetch 전략이 존재하는데 Batch를 이용하여 데이터 조회, Sub-Query를 이용하여 데이터 조회, Join Fetch를 이용하여 데이터 한꺼번에 조회하는 방법이 있다.</description></item><item><title>File Upload Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/file-upload-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/file-upload-service/</guid><description>File Upload Service 개요 업로드는 한 컴퓨터 시스템에서 다른 시스템으로 파일을 전송하는 것을 말하는데, 대개 작은 컴퓨터에서 큰 컴퓨터로 옮길 때 이런 용어를 사용한다. 네트웍 사용자의 관점에서 보면, 파일을 업로드하는 것은 그 파일을 받을 수 있도록 설정된 다른 컴퓨터에 파일을 보내는 것이다. 전자게시판 상의 다른 사용자와 이미지 파일을 공유하기를 원하는 사람들은 그 전자게시판에 파일을 업로드하면 된다.
그러면 반대편 입장에 있는 사람은 그 파일을 다운로드하게 되는데, 여기서 다운로드는 대개 큰 컴퓨터에서 작은 컴퓨터로 파일을 전송하는 것을 의미한다.</description></item><item><title>Spring mvc Multipart Multi file upload 지원 문제</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/file-upload-service-multi-file-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/file-upload-service-multi-file-support/</guid><description>Spring mvc Multipart Multi file upload 지원 문제 개요 Spring mvc 2.5.5 Multipart Multi file upload 지원부분에서 동일한 이름의 여러개의 파일을 올리려고 할 때 에러가 발생한다. 본 가이드에서는 이러한 문제가 발생하여 아직 Spring쪽에서 답변이 없는 상황이다. 이부분에 대하여 개발시 참고 하기바란다.
설명 업로드 갯수를 고려하지 않고 동적으로 upload 폼을 추가할 경우 오류 메시지가 나온다.
org.springframework.web.multipart.MultipartException: Multiple files for field name [files] found - not supported by MultipartResolver org.springframework.web.multipart.commons.CommonsFileUploadSupport.parseFileItems(CommonsFileUploadSupport.java:254) org.springframework.web.multipart.commons.CommonsMultipartResolver.parseRequest(CommonsMultipartResolver.java:166) org.springframework.web.multipart.commons.CommonsMultipartResolver.resolveMultipart(CommonsMultipartResolver.java:149) org.</description></item><item><title>Spring과 JPA 통합</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-spring_integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-spring_integration/</guid><description>Spring Integration Spring에서는 JPA 기반에서 DAO 클래스를 쉽게 구현할 수 있도록 하기 위해 JdbcTemplate,HibernateTemplate등처럼 JpaTemplate을 제공한다. 하지만 JPA에 있어서는 Entity Manager의 Method를 직접 이용하는 것(plain JPA)에 대한 것도 가이드한다. 이에 두가지 방법에 대한 설정 및 사용방법에 대해서 설명하고자 한다. Spring JPA
기본 설정 Spring 기반하에서 JPA를 쓰고자 할 때 필요한 설정은 persistence.xml과 ApplicationContext 파일 설정이 필요하다.
persistence.xml 설정 &amp;lt;persistence-unit name=&amp;#34;HSQLMUnit&amp;#34; transaction-type=&amp;#34;RESOURCE_LOCAL&amp;#34;&amp;gt; // 구현체는 Hibernate &amp;lt;provider&amp;gt;org.hibernate.ejb.HibernatePersistence&amp;lt;/provider&amp;gt; // Entity Class List &amp;lt;class&amp;gt;egovframework.sample.model.bidirection.User&amp;lt;/class&amp;gt; &amp;lt;class&amp;gt;egovframework.</description></item><item><title>File Download Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/file-download-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/file-download-service/</guid><description>File Download Service 개요 여기서 다운로드는 대개 큰 컴퓨터에서 작은 컴퓨터로 파일을 전송하는 것을 의미한다. 인터넷 사용자의 입장에서의 다운로드란 다른 컴퓨터에서 파일을 받는 것이다.
설명 EgovFrameWork에서는 파일 다운로드를 하기위한 DownloadController 클래스를 간단하게 구현하여 보았다.
DownloadController 클래스 예시
@Controller(&amp;#34;downloadController&amp;#34;) public class DownloadController { @Resource(name = &amp;#34;fileUploadProperties&amp;#34;) Properties fileUploadProperties; @RequestMapping(value = &amp;#34;/download/downloadFile.do&amp;#34;) public void downloadFile( @RequestParam(value = &amp;#34;requestedFile&amp;#34;) String requestedFile, HttpServletResponse response) throws Exception { String uploadPath = fileUploadProperties .getProperty(&amp;#34;file.upload.path&amp;#34;); File uFile = new File(uploadPath, requestedFile); int fSize = (int) uFile.</description></item><item><title>JPA Configuration</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-jpa_configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/orm-jpa_configuration/</guid><description>JPA Configuration JPA는 실행 속성을 포함하고 있는 persistence.xml을 기반으로 하여 동작하도록 구성되어 있다. persistence.xml 파일의 주요 구성 요소와 속성 정의 방법에 대해 살펴보기로 한다. 먼저, persistence.xml 파일은 가장 상위에 &amp;lt;persistence&amp;gt; 태그를 포함하고 있으며 &amp;lt;persistence&amp;gt; 태그 내에 여러개의 &amp;lt;persistence-unit&amp;gt;를 포함할 수 있다.
Persistence Unit Persistence Unit에 포함하고 있는 주요한 엔티티들은 다음과 같다.
element 명 설 명 provider Entity Manager를 지원하는 Provider 클래스 mapping-file 매핑정보 파일 class Entity 클래스 리스트, @Entity, @Embeddable or @MappedSuperclass 를 포함하고 있는 클래스 exclude-unlisted-classes class 에서 정의하지 않은 것은 제외 properties JPA 구현체 프로퍼티 리스트 상세한 정보는 스키마 참조 아래는 위의 항목을 포함하고 있는 설정파일 예입니다.</description></item><item><title>Tomcat 한글 설정하기</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/file-download-service-tomcat-encoding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/file-download-service-tomcat-encoding/</guid><description>Tomcat 한글 설정하기 개요 Tomcat에서 문자셋 인코딩을 하여 한글이 깨지는 문제를 해결할 수 있다.
설명 일반적으로 웹 어플리케이션이 GET과 POST 방식으로 파라미터를 넘겨 받을 때 request.setCharacterEncoding()을 통한 문자셋 인코딩이 필요하다.
Tomcat 4.x 단순히 JSP 혹은 서블릿의 최 상단에 request.setCharacterEncoding(&amp;#34;euc-kr&amp;#34;);을 하면 된다. GET과 POST 방식에 상관없이 인코딩을 해준다. Tomcat 5.x POST 방식은 request.setCharacterEncoding(&amp;#34;euc-kr&amp;#34;);로 계속 하면된다. 하지만 GET 방식은 server.xml의 &amp;lt;Connector&amp;gt; 설정 부분을 바꿔줘야만 한다. &amp;lt;Connector port=&amp;#34;8080&amp;#34; maxThreads=&amp;#34;150&amp;#34; minSpareThreads=&amp;#34;25&amp;#34; maxSpareThreads=&amp;#34;75&amp;#34; enableLookups=&amp;#34;false&amp;#34; redirectPort=&amp;#34;8443&amp;#34; acceptCount=&amp;#34;100&amp;#34; debug=&amp;#34;0&amp;#34; connectionTimeout=&amp;#34;20000&amp;#34; disableUploadTimeout=&amp;#34;true&amp;#34; URIEncoding=&amp;#34;euc-kr&amp;#34;/&amp;gt; 위에서 URIEncoding=&amp;#34;euc-kr&amp;#34; 부분이다.</description></item><item><title>Transaction 서비스</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/transaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/transaction/</guid><description>Transaction 서비스 개요 트랜잭션 서비스는 Spring 트랜잭션 서비스를 채택하여 가이드한다. 트랜잭션 서비스에는 여러가지가 있지만 여기서는 DataSource Transaction Service, JTA Transaction Service, JPA Transaction Service에 대해서 설명하고 트랜잭션 활용에 대해서는 설정 및 Annotation을 통해서 활용할 수 있는 Declaration Transaction Management와 프로그램에서 직접 API를 호출하여 쓸 수 있도록 하는 Programmatic Transaction Management 두가지에 대해서 설명한다.
Declarative Transaction Management Programmatic Transaction Management 설명 DataSource Transaction Service DataSource를 사용하여 Local Transaction을 관리할 수 있다. 아래에서 예를 들어서 설정 방법과 사용법을 설명한다.</description></item><item><title>선언적 Transaction 관리</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/transaction-declarative-transaction-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/transaction-declarative-transaction-management/</guid><description>Declarative Transaction Management 개요 코드에서 직접적으로 Transaction 처리하지 않고, 선언적으로 Transaction을 관리할 수 있는데 Annotation을 이용한 Transaction 관리, XML 정의를 이용한 Transaction 관리를 지원한다.
설명 Annotation Transaction Management Annotation 설정을 이용해서 Transaction을 관리할 수 있는데 아래에서 예를 들어서 설정 방법과 사용법을 설명한다.
Configuration &amp;lt;tx:annotation-driven transaction-manager=&amp;#34;transactionManager&amp;#34; /&amp;gt; 설정 XML에 위의 &amp;lt;tx:annotation-driven..&amp;gt;을 기재하면 설정된다. transactionManager는 TransactionManager 설정 참조
Sample Source @Transactional public void removeRole(Role role) throws Exception { this.roleDAO.removeRole(role); } 위의 예를 보면 @Transactional을 트랜잭션 처리하고자 하는 메소드위에 기재하여 트랜잭션 관리를 할 수 있다.</description></item><item><title>File Handling</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/file-handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/file-handling/</guid><description>File Handling 개요 File Handling 서비스를 적용해서 Excel 다운로드 하기 위한 Excel 정보를 설정한다.
Excel 서비스에 적용되어 있다.
설명 Source FileObject writtenFile = manager.resolveFile(baseDir, this.propertyPath); FileContent writtenContents = writtenFile.getContent(); InputStream is = writtenContents.getInputStream(); BufferedReader reader = new BufferedReader(new InputStreamReader(is)); StringBuffer sb = new StringBuffer(); for (String line = &amp;#34;&amp;#34;; (line = reader.readLine()) != null; sb.append(line)); is.close();</description></item><item><title>프로그래밍 방식의 Transaction 관리</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/transaction-programmatic-transaction-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/transaction-programmatic-transaction-management/</guid><description>Programmatic Transaction Management 개요 프로그램에서 직접 트랜잭션을 관리하고자 할 때 사용할 수 있는 방법에 대해서 설명하고자 한다. TransactionTemplate를 사용하는 방법과 Trnasaction Manager를 사용하는 방법 두가지가 있다.
설명 TransactionTemplate를 사용하는 방법 TransactionTemplate를 정의하고 callback 메소드 정의를 이용하여 Transaction 관리를 할 수 있도록 하는 방법이다.
Configuration
&amp;lt;bean id=&amp;#34;transactionTemplate&amp;#34; class=&amp;#34;org.springframework.transaction.support.TransactionTemplate&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;transactionManager&amp;#34; ref=&amp;#34;transactionManager&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;transactionManager&amp;#34; class=&amp;#34;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;dataSource&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; PROPERTIES 설 명 transactionManager 트랜잭션매니저 dataSource 데이타소스 위의 설정에서 transactionTemplate를 정의하고 property로 transactionManager을 정의한다.</description></item><item><title>Excel Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/excel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/excel/</guid><description>Excel Service 개요 Excel 파일 포맷을 다룰 수 있는 자바 라이브러리를 제공하여, 사용자들이 데이터를 Excel 파일 포맷으로 다운받거나, 대량의 Excel 데이터를 시스템에 올릴 수 있도록 지원하기 위한 서비스이다. Excel 서비스는 Apache POI 오픈소스를 사용하여 구현하였으며 주요 Excel 접근 기능 외에 Excel 다운로드, Excel 파일 업로드 등의 기능이 있다. Excel 서비스 3.0 버전에서는 기존 버전을 refactoring 하였다. 기존의 메소드(xls, xlsx)를 지원하는 메소드들의 이름을 하나로 하여 Parameter 방식으로 구분자를 추가하였다. 또한, 기존의 iBatis 뿐만 아니라 MyBatis도 지원하는 클래스를 추가하였다.</description></item><item><title>Spring Data - Reactive</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive/</guid><description>Spring Data - Reactive 개요 Spring Data는 스프링 프레임워크의 하위 프로젝트 중 하나로, 데이터 액세스를 단순화하고 보다 쉽게 관리할 수 있도록 지원하는 도구 모음이다. 주로 데이터베이스와의 상호 작용을 다루며, 다양한 데이터 저장소 및 데이터 액세스 기술을 지원한다.
여기서는 NoSQL 데이터베이스인 R2DBC, Spring Data MongoDB, Cassandra, Redis와 Spring Reactive 연동에 전자정부 표준프레임워크에서 지원하는 라이브러리에 대해 설명한다.
자세한 내용은 아래 페이지에서 확인할 수 있다.
R2DBC MongoDB Cassandra Redis</description></item><item><title>String Util Service</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/string-util/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/foundation-layer/string-util/</guid><description>String Util Service 개요 시스템을 개발할 때 필요한 문자열 데이터를 다루기 위해 다양한 기능을 사용하도록 서비스한다. 문자열을 다루는 EgovStringUtil Service와 숫자를 다루는 EgovNumericUtil Service, 날짜형식을 다루는 EgovDateUtil Service 그리고 객체 생성 등의 EgovObjectUtil Service 4가지가 있다.
설명 1. EgovStringUtil Service Pattern matching String이 특정 Pattern(정규표현식)에 부합하는지 검사한다.
Sample Source @Test public void testPatternMatch() throws Exception { // pattern match 성공 String str = &amp;#34;abc-def&amp;#34;; pattern = &amp;#34;*-*&amp;#34;; assertTrue(EgovStringUtil.isPatternMatching(str, pattern)); // pattern match 실패 str = &amp;#34;abc&amp;#34;; assertTrue(!</description></item><item><title>R2DBC</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-r2dbc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-r2dbc/</guid><description>R2DBC 개요 R2DBC(Relational Reactive Database Connectivity)는 Reactive 프로그래밍 모델을 기반으로 하는 비동기적인 방식으로 관계형 데이터베이스와 상호 작용하기 위한 자바 라이브러리로 Spring WebFlux와 함께 사용하여 비동기 논블로킹 방식의 애플리케이션을 구성할 수 있다. 이를 통해 리액티브 애플리케이션 스택에서 관계형 데이터 액세스 기술을 사용하는 Spring 기반 애플리케이션을 더 쉽게 빌드할 수 있다.
설명 데이터베이스 연동 R2DBC를 사용하여 데이터베이스에 액세스하기 위해 가장 먼저 해야 할 일은 JDBC의 DataSource와 비슷한 역할을 하는 ConnectionFactory 객체를 만드는 것이다.</description></item><item><title>MongoDB</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-mongodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-mongodb/</guid><description>MongoDB 개요 Spring Data MongoDB 프로젝트는 MongoDB 문서 스타일 데이터 저장소를 사용하는 솔루션 개발에 Spring의 핵심 개념을 적용하여 문서를 저장하고 쿼리하기 위한 높은 수준의 추상화 템플릿을 제공한다. Spring 프레임워크에서 제공하는 JDBC 지원과 유사하다는 것을 알 수 있다.
설명 데이터베이스 연동 Spring WebFlux에서 MongoDB 데이터베이스와 연결을 설정하고 관리하기 위해서는 ReactiveMongoDatabaseFactory 인터페이스의 구현클래스인 SimpleReactiveMongoDatabaseFactory 클래스를 사용하여, 연결 풀링이나 커넥션 관리 기능 등을 추상화하여 데이터 액세스 작업에 집중할 수 있게 한다.
실행환경 라이브러리 package org.</description></item><item><title>Cassandra</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-cassandra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-cassandra/</guid><description>Cassandra 개요 Cassandra를 위한 Spring 데이터 프로젝트는 핵심 Spring 개념을 Cassandra 컬럼형 데이터 저장소를 사용하는 솔루션 개발에 적용하여 문서를 저장하고 쿼리하기 위한 높은 수준의 추상화 템플릿을 제공한다. Spring 프레임워크에서 제공하는 JDBC 지원과 유사하다는 것을 알 수 있다.
설명 데이터베이스 연동 Spring Data Cassandra와 Spring WebFlux를 함께 사용하여 Cassandra 데이터베이스와의 비동기적인 상호 작용을 지원하기 위해 Spring Data Cassandra에서 제공하는 DefaultBridgedReactiveSession 클래스를 사용한다. 해당 클래스를 사용하여 Cassandra 클러스터에 대한 연결을 설정하고, 세션을 관리하며 비동기 쿼리를 실행하고 결과를 처리할 수 있다.</description></item><item><title>Redis</title><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/persistence-layer/reactive-redis/</guid><description>Redis 개요 Spring Data Redis 프로젝트는 키-값 스타일 데이터 저장소를 사용하여 솔루션 개발에 핵심 Spring 개념을 적용하여 메시지를 주고받기 위한 높은 수준의 추상화 템플릿을 제공한다. Spring 프레임워크의 JDBC 지원과 유사하다는 것을 알 수 있다.
설명 데이터베이스 연동 Spring Data Redis와 Spring WebFlux를 함께 사용하여 Redis 데이터베이스와의 비동기적인 상호 작용을 지원하기 위해 Spring Data Redis에서 제공하는 ReactiveRedisConnectionFactory 인터페이스의 구현클래스인 LettuceConnectionFactory 클래스를 사용한다. 해당 클래스를 사용하여 데이터베이스 연결을 설정하고, 세션을 관리하며 비동기 쿼리를 실행하고 결과를 처리할 수 있다.</description></item><item><title/><link>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/egovframe-runtime/intro/</guid><description>표준프레임워크 실행환경 가이드 표준프레임워크 실행환경 표준프레임워크 실행환경 소개 공통기반 핵심 IoC Container Basics
IoC Container를 설명하기 위해 필요한 기본적인 개념 및 사용 방법을 설명한다. Dependencies
IoC Container의 핵심 기능인 Dependency Injection의 사용 방식 및 설정 방법을 설명한다. Bean scope
IoC Container에 의해 관리되는 Bean의 생성 방식 및 적용 범위를 설명한다. Customizing the nature of a bean
Bean의 생명주기 관리, Bean이 속한 Container 참조 등 Bean의 성질을 변화시키는 방법을 설명한다. Bean definition inheritance</description></item><item><title/><link>https://eGovFramework.github.io/egovframe-docs/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eGovFramework.github.io/egovframe-docs/readme/</guid><description>전자정부 표준프레임워크 가이드 본 GitHub 저장소는 표준프레임워크 포털에서 제공하고 있는 DokuWiki 가이드 문서를 간단하고 직관적인 Markdown 문서로 변환하여 기여받기 위해 생성되었습니다. 이 프로젝트의 목적은 보다 쉽게 접근할 수 있는 문서 형식을 통해 사용자와 개발자들이 표준프레임워크를 더욱 효과적으로 활용할 수 있도록 돕는 것입니다. 표준프레임워크 가이드 컨트리뷰션 범위는 실행환경 문서로 한정하여 시작하려 합니다. 가이드 문서 보기 https://egovframework.github.io/egovframe-docs/ 문서 구조 파일 구조 문서 파일과 관련 리소스는 다음과 같은 디렉토리 구조를 따릅니다. 현재 개발가이드와 유사하게 구성되어 있습니다.</description></item></channel></rss>